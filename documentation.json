{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-e776c32ecc4e04465771201c461fbb0d",
            "file": "src/app/pipes/htmlSanitizer.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import {DomSanitizer} from '@angular/platform-browser';\nimport {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({ name: 'safeHtml'})\nexport class SafeHtmlPipe implements PipeTransform  {\n  constructor(private sanitized: DomSanitizer) {}\n  transform(value) {\n    return this.sanitized.bypassSecurityTrustHtml(value);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "DialogData",
            "id": "interface-DialogData-5ea7e8438a9b245a5607a7819feb180b",
            "file": "src/app/essays/essay-chart-details/essay-chart-details.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport {Chart} from '../../models/chart';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  chart: Chart;\n}\n\n@Component({\n  selector: 'app-essay-chart-details',\n  templateUrl: './essay-chart-details.component.html',\n  styleUrls: ['./essay-chart-details.component.scss']\n})\nexport class EssayChartDetailsComponent implements OnInit {\n\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "properties": [
                {
                    "name": "chart",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-7f88b9a9cd28bcdbcef09500eaf4d1c7-1",
            "file": "src/app/essays/essay-event-details/essay-event-details.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {Event} from '../../models/events/event';\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  event: Event;\n}\n\n@Component({\n  selector: 'app-essay-event-details',\n  templateUrl: './essay-event-details.component.html',\n  styleUrls: ['./essay-event-details.component.scss']\n})\nexport class EssayEventDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<EssayEventDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() { }\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DialogData-1"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-1a11aeb4e9bd9be199f54ecb54eaa40b-2",
            "file": "src/app/essays/essay-person-details/essay-person-details.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {Person} from '../../models/persons/person';\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  person: Person;\n}\n\n\n@Component({\n  selector: 'app-essay-person-details',\n  templateUrl: './essay-person-details.component.html',\n  styleUrls: ['./essay-person-details.component.scss']\n})\nexport class EssayPersonDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<EssayPersonDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n    this.data.person.formatYears();\n    this.data.person.formatBirthAndDeath();\n    this.data.person.setAge();\n  }\n\n}\n",
            "properties": [
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "DialogData-2"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-fbec4e557330db7a4a4f2ddfafac16e9-3",
            "file": "src/app/essays/essay-reference-details/essay-reference-details.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport {EssayReference} from '../../models/essays/essay-reference';\nimport {Source} from '../../models/source';\n\nexport interface DialogData {\n  ref: EssayReference;\n  source: Source;\n  chapter: string;\n  page: string;\n}\n\n@Component({\n  selector: 'app-essay-reference-details',\n  templateUrl: './essay-reference-details.component.html',\n  styleUrls: ['./essay-reference-details.component.scss']\n})\n\nexport class EssayReferenceDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<EssayReferenceDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA)\n              public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "properties": [
                {
                    "name": "chapter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "page",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "ref",
                    "type": "EssayReference",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "DialogData-3"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-b422e602f1329c91dfebcdb867013df0-4",
            "file": "src/app/essays/essay-timeline-details/essay-timeline-details.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {Timeline} from '../../models/timelines/timeline';\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  timeline: Timeline;\n}\n\n@Component({\n  selector: 'app-essay-timeline-details',\n  templateUrl: './essay-timeline-details.component.html',\n  styleUrls: ['./essay-timeline-details.component.scss']\n})\nexport class EssayTimelineDetailsComponent implements OnInit {\n  public timelineLink: string;\n\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n    this.timelineLink = '/timeline/' + this.data.timeline.id.toString();\n  }\n\n}\n",
            "properties": [
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "DialogData-4"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-3f51d7926eb0960c1788d8fb79bc67a5-5",
            "file": "src/app/essays/quick-essay/quick-essay.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Essay} from '../../models/essays/essay';\nimport {Sleep} from '../../utilities/sleep';\nimport {EssayType} from '../../models/essays/essay-type';\nimport {EssayService} from '../../services/essay.service';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickEssayReturnData {\n  essay: Essay;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-essay',\n  templateUrl: './quick-essay.component.html',\n  styleUrls: ['./quick-essay.component.scss']\n})\nexport class QuickEssayComponent implements OnInit, AfterViewInit {\n  public essay: Essay;\n\n  public essayTypes: EssayType[];\n\n  public searchEssays: Essay[] = [];\n\n  public essayTitleAutocompleteControl = new FormControl();\n  public essayTitleFilteredOptions: Observable<Essay[]>;\n  public essayTitleFieldDisplayValue: string;\n\n  private userId: string;\n\n  private returnData: QuickEssayReturnData;\n\n  constructor(public dialogRef: MatDialogRef<QuickEssayComponent>,\n              private essayService: EssayService,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    this.userId = localStorage.getItem('user.id');\n\n    this.essayTypes = [];\n\n    this.returnData = new QuickEssayReturnData;\n\n    this.essay = new Essay();\n    this.essay.initializeNewEssay();\n\n    this.essayService.getApiEssayTypes().subscribe((response) => {\n      for (const type of response.data) {\n        const newType = new EssayType();\n        newType.initializeNewEssayType();\n\n        newType.mapEssayType(type);\n\n        this.essayService.setEssayType(newType);\n      }\n\n      this.essayTypes = this.essayService.getEssayTypes();\n    });\n\n    this.essayService.getApiEssays(\n      '/essay_users',\n      this.userId,\n      '0',\n      null,\n      null,\n      false,\n      null,\n      false).subscribe(response => {\n\n      this.searchEssays = response.essays;\n\n      this.essayTitleFilteredOptions = this.essayTitleAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(essay => this._filterEssayTitle(essay))\n      );\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingEssay(essay) {\n    this.returnData.essay = essay;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewEssay() {\n    this.returnData.essay = this.essay;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  displayEssayName(essay: Essay) {\n    if (essay) {\n      this.essayTitleFieldDisplayValue = '';\n\n      if (essay.title) {\n        this.essayTitleFieldDisplayValue = essay.title;\n      }\n    }\n\n    return this.essayTitleFieldDisplayValue;\n  }\n\n  private _filterEssayTitle(filterValue: any): Essay[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchEssays.filter(essay => {\n\n        if (essay.title) {\n          return essay.title.toLowerCase().includes(filterValue);\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n\n  selectEssayType(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_essay_label').focus();\n    } catch(e) {\n      document.getElementById('essay_label').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "showExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showNew",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "DialogData-5"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-c3592b544e038f6c6fcf48db414a9a3f-6",
            "file": "src/app/timelines/timeline-event-details/timeline-event-details.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\n\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\n\nimport { Timeline } from '../../models/timelines/timeline';\n\nimport { TimelineService } from '../../services/timeline.service';\nimport {TimelineCategory} from '../../models/timelines/timeline-category';\nimport {Category} from '../../models/category';\nimport {EventNote} from '../../models/events/event-note';\nimport {TimelineEvent} from '../../models/timelines/timeline-event';\n\nexport interface DialogData {\n  timelineEvent: TimelineEvent;\n  timeline: Timeline;\n  categoryEvents: Array<Category>;\n}\n\n@Component({\n  selector: 'app-timeline-event-details',\n  templateUrl: './timeline-event-details.component.html',\n  styleUrls: ['./timeline-event-details.component.scss']\n})\n\nexport class TimelineEventDetailsComponent {\n  public isShadow: boolean;\n  public selectedCategoryId: number;\n  public selectedCategory: TimelineCategory;\n  public categoryEventId: number;\n\n  public isEditMode: boolean;\n\n  public isInCategory: boolean;\n\n  public displayNotes: EventNote[];\n\n  public numberOfNotesToShow: number;\n  public numberOfAdditionalNotes: number;\n\n  public eventLink: string;\n\n  constructor(public dialogRef: MatBottomSheetRef<TimelineEventDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData,\n              public timelineService: TimelineService) {\n\n    const self = this;\n\n    this.isShadow = data.timelineEvent.isShadow;\n    this.selectedCategoryId = 0;\n    this.categoryEventId = 0;\n    this.selectedCategory = null;\n    this.isInCategory = false;\n    this.isEditMode = false;\n\n    this.displayNotes = [];\n    this.numberOfNotesToShow = 2;\n    this.numberOfAdditionalNotes = 0;\n\n    // check if this event is in a category or not\n    for (const category of this.data.timeline.categories) {\n      if (!category.events) {\n        category.events = [];\n      }\n\n      function idFound(ids) {\n        return ids[1] === self.data.timelineEvent.id.toString();\n      }\n\n      const categoryEventIndex = category.events.findIndex(idFound);\n\n      if (categoryEventIndex >= 0) {\n        this.isInCategory = true;\n        this.selectedCategory = category;\n        this.selectedCategoryId = category.id;\n        this.categoryEventId = category.events[categoryEventIndex][0];\n      }\n    }\n\n    if (this.data.timelineEvent.event.notes.length) {\n      for (let i = 0; i < this.data.timelineEvent.event.notes.length; i++) {\n        if (i < this.numberOfNotesToShow) {\n          this.displayNotes.push(this.data.timelineEvent.event.notes[i]);\n          continue;\n        }\n\n        break;\n      }\n    }\n\n    if (this.data.timelineEvent.event.notes.length > this.displayNotes.length) {\n      this.numberOfAdditionalNotes = this.data.timelineEvent.event.notes.length - this.displayNotes.length;\n    }\n\n    this.eventLink = '/manager/events/' + this.data.timelineEvent.event.id.toString();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.dismiss();\n  }\n\n  updateShadowState() {\n    // this is a change event, but does not have access to the event at the moment of the click event.\n    // As such false is equal to true and the other way around\n    let shadowState = false;\n\n    if (!this.isShadow) {\n      shadowState = true;\n    }\n\n    this.data.timelineEvent.isShadow = shadowState;\n\n    this.timelineService.patchEventApiTimeline(this.data.timelineEvent, this.data.timeline).subscribe(() => { });\n  }\n\n  addToCategory() {\n    let categoryToAdd: TimelineCategory = new TimelineCategory();\n\n    for (const category of this.data.timeline.categories) {\n      if (category.id === this.selectedCategoryId) {\n        categoryToAdd = category;\n      }\n    }\n\n    // event was not in a category and is being added to one\n    if (!this.selectedCategory) {\n      this.timelineService.createCategoryEventApiTimeline(categoryToAdd, this.data.timelineEvent.event).subscribe(response => {\n        this.categoryEventId = response.data.id;\n        this.selectedCategory = categoryToAdd;\n        this.selectedCategoryId = categoryToAdd.id;\n        this.isInCategory = true;\n\n        this.addCategoryEventToTimeline(this.data.timelineEvent, this.categoryEventId);\n      });\n\n    } else {\n      // event was in a category and is now being removed from all categories\n      if (this.selectedCategoryId == 0) {\n        this.timelineService.removeCategoryEventApiTimeline(this.categoryEventId).subscribe(() => {\n          this.removeCategoryEventFromTimeline(this.data.timelineEvent, this.categoryEventId, false);\n\n          this.selectedCategoryId = 0;\n          this.categoryEventId = 0;\n          this.selectedCategory = null;\n          this.isInCategory = false;\n        });\n\n        // event is was in category A and is being updated to category B\n      } else {\n        this.timelineService.removeCategoryEventApiTimeline(this.categoryEventId).subscribe(() => {\n          this.removeCategoryEventFromTimeline(this.data.timelineEvent, this.categoryEventId, true);\n\n          this.timelineService.createCategoryEventApiTimeline(categoryToAdd, this.data.timelineEvent.event).subscribe(secondResponse => {\n            this.categoryEventId = secondResponse.data.id;\n            this.selectedCategory = categoryToAdd;\n            this.selectedCategoryId = categoryToAdd.id;\n            this.isInCategory = true;\n\n            this.addCategoryEventToTimeline(this.data.timelineEvent, this.categoryEventId);\n          });\n        });\n      }\n    }\n  }\n\n  addCategoryEventToTimeline(event, categoryEventId) {\n    // add it to the list of available categories\n    this.selectedCategory.events.push([categoryEventId, event.id]);\n\n    // if this is the first event in the category add the category to the data object first\n    let thisCategory = null;\n\n    for (const category of this.data.categoryEvents) {\n      if (category.id === this.selectedCategoryId) {\n        thisCategory = category;\n      }\n    }\n\n    if (!thisCategory) {\n      thisCategory = new Category();\n      thisCategory.id = this.selectedCategory.id;\n      thisCategory.label = this.selectedCategory.label;\n      thisCategory.events = [];\n      thisCategory.people = [];\n\n      this.data.categoryEvents.push(thisCategory);\n    }\n\n    // add the event to the categoryEvents object so it reflects on the timeline\n    for (const category of this.data.categoryEvents) {\n      // remove event from the generic category if it's there\n      if (!category.id) {\n        if (event.formattedStartYear === event.formattedEndYear) {\n          for (let i = 0; i < category.singlePointEvents.length; i++) {\n            if (category.singlePointEvents[i].id === event.id) {\n              category.singlePointEvents.splice(i, 1);\n            }\n          }\n        } else {\n          for (let i = 0; i < category.multiPointEvents.length; i++) {\n            if (category.multiPointEvents[i].id === event.id) {\n              category.multiPointEvents.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      // add the event to the appropriate category\n      if (category.id === this.selectedCategoryId) {\n        if (event.formattedStartYear === event.formattedEndYear) {\n          category.singlePointEvents.push(event);\n        } else {\n          category.multiPointEvents.push(event);\n        }\n      }\n    }\n  }\n\n  removeCategoryEventFromTimeline(event, categoryEventId, isUpdate) {\n    // remove it from the list of available categories\n    for (const category of this.data.timeline.categories) {\n      if (category.events.length) {\n        for (let i = 0; i < category.events.length; i++) {\n          if (category.events[i][1] === event.id && category.events[i][0] === categoryEventId) {\n            category.events.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    // remove the event from the category events so that it is reflected on the timeline\n    for (const category of this.data.categoryEvents) {\n      // if actually removing from all categories and not just updating it to a new category then add it back to the generic category\n      if (!isUpdate) {\n        if (!category.id) {\n          if (event.formattedEndYear === event.formattedStartYear) {\n            category.singlePointEvents.push(event);\n          } else {\n            category.multiPointEvents.push(event);\n          }\n        }\n      }\n\n      if (category.id === this.selectedCategory.id) {\n        if (event.formattedEndYear === event.formattedStartYear) {\n          for (let i = 0; i < category.singlePointEvents.length; i++) {\n            if (category.singlePointEvents[i].id === event.id) {\n              category.singlePointEvents.splice(i, 1);\n            }\n          }\n        } else {\n          for (let i = 0; i < category.multiPointEvents.length; i++) {\n            if (category.multiPointEvents[i].id === event.id) {\n              category.multiPointEvents.splice(i, 1);\n            }\n          }\n        }\n\n        // if there are no more events in this category remove it from the main categoryEvents object\n        if (!category.singlePointEvents.length && !category.multiPointEvents.length) {\n          for (let i = 0; i < this.data.categoryEvents.length; i++) {\n            if (category.id === this.data.categoryEvents[i].id) {\n              this.data.categoryEvents.splice(i, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "categoryEvents",
                    "type": "Array<Category>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "timelineEvent",
                    "type": "TimelineEvent",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 6,
            "duplicateName": "DialogData-6"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-75a356b738faae4a096f8a7f06ba041d-7",
            "file": "src/app/timelines/timeline-person-details/timeline-person-details.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\n\nimport {Person} from '../../models/persons/person';\nimport {Timeline} from '../../models/timelines/timeline';\n\nexport interface DialogData {\n  person: Person;\n  timeline: Timeline;\n}\n\n@Component({\n  selector: 'app-timeline-person-details',\n  templateUrl: './timeline-person-details.component.html',\n  styleUrls: ['./timeline-person-details.component.scss']\n})\n\nexport class TimelinePersonDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<TimelinePersonDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() { }\n\n  onNoClick(): void {\n    this.dialogRef.dismiss();\n  }\n}\n",
            "properties": [
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 7,
            "duplicateName": "DialogData-7"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-8927dfb5ca4c673e040077b0fde488ea-8",
            "file": "src/app/utilities/add-chart-dialog/add-chart-dialog.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Chart} from '../../models/chart';\nimport {ChartService} from '../../services/chart.service';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickChartReturnData {\n  chart: Chart;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-chart-dialog',\n  templateUrl: './add-chart-dialog.component.html',\n  styleUrls: ['./add-chart-dialog.component.scss']\n})\nexport class AddChartDialogComponent implements OnInit {\n  public charts: Chart[];\n  public chart: Chart;\n\n  public searchCharts: Chart[] = [];\n\n  public chartNameAutocompleteControl = new FormControl();\n  public chartNameFilteredOptions: Observable<Chart[]>;\n\n  private returnData: QuickChartReturnData;\n\n  constructor(private chartService: ChartService,\n              public dialogRef: MatDialogRef<AddChartDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n\n    this.returnData = new QuickChartReturnData();\n\n    this.chart = new Chart();\n    this.chart.initializeNewChart();\n\n    this.chartService.getApiCharts('/charts?page[size]=0').subscribe(response => {\n\n      this.searchCharts = response.charts;\n\n      this.chartNameFilteredOptions = this.chartNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(chart => this._filterChartsName(chart))\n      );\n    });\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveChartTitle(value) {\n    if (value) {\n      this.chart.options.title.text = value;\n    } else {\n      this.chart.options.title.text = this.chartNameAutocompleteControl.value;\n    }\n  }\n\n  saveExistingChart(chart) {\n    this.returnData.chart = chart;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewChart() {\n    this.returnData.chart = this.chart;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  private _filterChartsName(filterValue: any): Chart[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchCharts.filter(chart => {\n        if (chart.options.title.text) {\n          return chart.options.title.text.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_chart_title').focus();\n    } catch(e) {\n      document.getElementById('new_chart_title').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "showExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showNew",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 8,
            "duplicateName": "DialogData-8"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-4988f39402eca9da5636e5456b6cb0da-9",
            "file": "src/app/utilities/add-brainstorm-dialog/add-brainstorm-dialog.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {BrainstormService} from '../../services/brainstorm.service';\nimport {Brainstorm} from '../../models/brainstorm';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickBrainstormReturnData {\n  brainstorm: Brainstorm;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-brainstorm-dialog',\n  templateUrl: './add-brainstorm-dialog.component.html',\n  styleUrls: ['./add-brainstorm-dialog.component.scss']\n})\nexport class AddBrainstormDialogComponent implements OnInit {\n  public brainstorms: Brainstorm[];\n  public brainstorm: Brainstorm;\n\n  public searchBrainstorms: Brainstorm[] = [];\n\n  public brainstormNameAutocompleteControl = new FormControl();\n  public brainstormNameFilteredOptions: Observable<Brainstorm[]>;\n\n  private returnData: QuickBrainstormReturnData;\n\n  constructor(public dialogRef: MatDialogRef<AddBrainstormDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData,\n              private brainstormService: BrainstormService) {\n    this.returnData = new QuickBrainstormReturnData();\n\n    this.brainstorm = new Brainstorm();\n    this.brainstorm.initializeNewBrainstorm();\n\n    this.brainstormService.getApiBrainstorms(null, null, '0', null, null, null, false, null, false).subscribe(response => {\n\n      this.searchBrainstorms = response.brainstorms;\n\n      this.brainstormNameFilteredOptions = this.brainstormNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(chart => this._filterBrainstormsName(chart))\n      );\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingBrainstorm(brainstorm) {\n    this.returnData.brainstorm = brainstorm;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewBrainstorm() {\n    this.returnData.brainstorm = this.brainstorm;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  private _filterBrainstormsName(filterValue: any): Brainstorm[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchBrainstorms.filter(brainstorm => {\n        if (brainstorm.title) {\n          return brainstorm.title.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_brainstorm_title').focus();\n    } catch(e) {\n      document.getElementById('new_brainstorm_title').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "showExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showNew",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 9,
            "duplicateName": "DialogData-9"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-8397335f3edcea1f94cd1993bf921401-10",
            "file": "src/app/utilities/confirm-removal/confirm-removal.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport {MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nexport interface DialogData {\n  label: string;\n  content: string;\n}\n\n@Component({\n  selector: 'app-confirm-removal',\n  templateUrl: './confirm-removal.component.html',\n  styleUrls: ['./confirm-removal.component.scss']\n})\nexport class ConfirmRemovalComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<ConfirmRemovalComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 10,
            "duplicateName": "DialogData-10"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-bb6c10debdb875419589349674003f9d-11",
            "file": "src/app/utilities/message-dialog/message-dialog.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nexport interface DialogData {\n  title: string;\n  message: string;\n}\n\n@Component({\n  selector: 'app-message-dialog',\n  templateUrl: './message-dialog.component.html',\n  styleUrls: ['./message-dialog.component.scss']\n})\nexport class MessageDialogComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<MessageDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 11,
            "duplicateName": "DialogData-11"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-0e0991e36da759b8d3ba9cc807176377-12",
            "file": "src/app/utilities/add-timeline-dialog/add-timeline-dialog.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {map, startWith} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\nimport {TimelineService} from '../../services/timeline.service';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickTimelineReturnData {\n  timeline: Timeline;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-timeline-dialog',\n  templateUrl: './add-timeline-dialog.component.html',\n  styleUrls: ['./add-timeline-dialog.component.scss']\n})\nexport class AddTimelineDialogComponent implements OnInit {\n  public timelines: Timeline[];\n  public timeline: Timeline;\n\n  public searchTimelines: Timeline[] = [];\n\n  public timelineNameAutocompleteControl = new FormControl();\n  public timelineNameFilteredOptions: Observable<Timeline[]>;\n\n  private returnData: QuickTimelineReturnData;\n\n  constructor(private timelineService: TimelineService,\n              public dialogRef: MatDialogRef<AddTimelineDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    this.returnData = new QuickTimelineReturnData();\n\n    this.timeline = new Timeline();\n    this.timeline.initializeNewTimeline();\n\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['id', 'label'], null, null, null, false).subscribe(response => {\n      this.searchTimelines = response.timelines;\n\n      this.timelineNameFilteredOptions = this.timelineNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterTimelinesName(timeline))\n      );\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  saveExistingTimeline(timeline) {\n    this.returnData.timeline = timeline;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewTimeline() {\n    this.returnData.timeline = this.timeline;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveTimelineTitle(value) {\n    if (value) {\n      this.timeline.label = value;\n    } else {\n      this.timeline.label = this.timelineNameAutocompleteControl.value;\n    }\n  }\n\n  private _filterTimelinesName(filterValue: any): Timeline[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchTimelines.filter(timeline => {\n        if (timeline.label) {\n          return timeline.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_timeline_title').focus();\n    } catch(e) {\n      document.getElementById('new_timeline_title').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "showExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showNew",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 12,
            "duplicateName": "DialogData-12"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-bf5a0608f2d9639bde0b76328cc03fdf-13",
            "file": "src/app/manager/events/quick-event/quick-event.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Sleep} from '../../../utilities/sleep';\n\nimport {SourceService} from '../../../services/source.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\n\nimport {Source} from '../../../models/source';\nimport {Event} from '../../../models/events/event';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\nimport {EventService} from '../../../services/event.service';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickEventReturnData {\n  event: Event;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-event',\n  templateUrl: './quick-event.component.html',\n  styleUrls: ['./quick-event.component.scss']\n})\nexport class QuickEventComponent implements OnInit, AfterViewInit {\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  public searchEvents: Event[] = [];\n  public eventTitleAutocompleteControl = new FormControl();\n  public eventTitleFilteredOptions: Observable<Event[]>;\n  public eventTitleFieldDisplayValue: string;\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n  public sources: Source[] = [];\n\n  public event: Event;\n\n  private returnData: QuickEventReturnData;\n\n  constructor(private eventService: EventService,\n              private sourceService: SourceService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData,\n              public dialogRef: MatDialogRef<QuickEventComponent>) {\n\n    this.event = new Event();\n    this.event.initializeNewEvent();\n\n    this.returnData = new QuickEventReturnData();\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        const newEra = new Era().mapEra(era);\n\n        // set to AD so that drop-downs auto populate with the value.\n        if (newEra.label === 'AD') {\n          this.event.startEra = newEra;\n          this.event.endEra = newEra;\n        }\n\n        this.eras.push(newEra);\n      }\n    });\n\n    this.monthService.getMonths().subscribe(months => {\n      for (const month of months.data) {\n        this.months.push(new Month().mapMonth(month));\n      }\n    });\n\n    this.sourceService.getApiSources('/references?page[size]=0&fields[reference]=title,sub_title').subscribe(sources => {\n      for (const source of sources.sources) {\n        this.sourceService.setSource(source);\n      }\n\n      this.sources = this.sourceService.getSources();\n\n      this.sourcesFilteredOptions = this.sourcesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(source => this._filterSources(source))\n      );\n    });\n\n    this.eventService.getApiEvents('/events?page[size]=0&fields[event]=label',\n      null, null, false).subscribe(response => {\n      this.searchEvents = response.events;\n\n      this.eventTitleFilteredOptions = this.eventTitleAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(event => this._filterEventsTitle(event))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveSource() {\n    this.event.source = this.sourcesAutocompleteControl.value;\n  }\n\n  saveEventTitle(value) {\n    if (value) {\n      this.event.label = value;\n    } else {\n      this.event.label = this.eventTitleAutocompleteControl.value;\n    }\n  }\n\n  saveExistingEvent(event: Event) {\n    this.returnData.event = event;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewEvent() {\n    this.returnData.event = this.event;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  displaySource(source: Source) {\n    if (source) {\n      this.sourceFieldDisplayValue = source.title;\n\n      if (source.subTitle) {\n        this.sourceFieldDisplayValue = this.sourceFieldDisplayValue + ': ' + source.subTitle;\n      }\n    }\n\n    return this.sourceFieldDisplayValue;\n  }\n\n  displayEvent(event: Event) {\n    if (event) {\n      this.eventTitleFieldDisplayValue = '';\n\n      if (event.label) {\n        this.eventTitleFieldDisplayValue = event.label;\n      }\n    }\n\n    return this.eventTitleFieldDisplayValue;\n  }\n\n  private _filterSources(filterValue: any): Source[] {\n    // when a source is actually selected the value is changed to the source itself. Do not filter if that is the case.\n    if (!filterValue.id) {\n      filterValue = filterValue.toLowerCase();\n\n      return this.sources.filter(source => {\n        return source.title.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n\n  private _filterEventsTitle(filterValue: any): Event[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchEvents.filter(event => {\n        if (event.label) {\n          return event.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_event_title').focus();\n    } catch(e) {\n      document.getElementById('event_label').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "showExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showNew",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 13,
            "duplicateName": "DialogData-13"
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-c4a9d10c921695665e5d288ebe8ebd19-14",
            "file": "src/app/manager/persons/quick-person/quick-person.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Sleep} from '../../../utilities/sleep';\n\nimport {Source} from '../../../models/source';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\nimport {Person} from '../../../models/persons/person';\n\nimport {PersonService} from '../../../services/person.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickPersonReturnData {\n  person: Person;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-person',\n  templateUrl: './quick-person.component.html',\n  styleUrls: ['./quick-person.component.scss']\n})\nexport class QuickPersonComponent implements OnInit, AfterViewInit {\n  public searchPersons: Person[] = [];\n\n  public personNameAutocompleteControl = new FormControl();\n  public personNameFilteredOptions: Observable<Person[]>;\n  public personNameFieldDisplayValue: string;\n\n  public personFirstNameAutocompleteControl = new FormControl();\n  public personFirstNameFilteredOptions: Observable<Person[]>;\n  public personFirstNameFieldDisplayValue: string;\n\n  public personLastNameAutocompleteControl = new FormControl();\n  public personLastNameFilteredOptions: Observable<Person[]>;\n  public personLastNameFieldDisplayValue: string;\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n  public sources: Source[] = [];\n\n  public person: Person;\n\n  private returnData: QuickPersonReturnData;\n\n  constructor(private personService: PersonService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              public dialogRef: MatDialogRef<QuickPersonComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n\n    this.returnData = new QuickPersonReturnData();\n\n    this.person = new Person();\n    this.person.initializeNewPerson();\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        const newEra = new Era().mapEra(era);\n\n        // set to AD so that drop-downs auto populate with the value.\n        if (newEra.label === 'AD') {\n          this.person.birthEra = newEra;\n          this.person.deathEra = newEra;\n        }\n\n        this.eras.push(newEra);\n      }\n    });\n\n    this.monthService.getMonths().subscribe(months => {\n      for (const month of months.data) {\n        this.months.push(new Month().mapMonth(month));\n      }\n    });\n\n    this.personService.getApiPersons(\n      '/persons?page[size]=0&fields[person]=first_name,last_name,birth_year,birth_era,death_year,death_era&sort=last_name',\n      null, null, false)\n      .subscribe(response => {\n\n      this.searchPersons = response.persons;\n\n      this.personNameFilteredOptions = this.personNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsName(person))\n      );\n\n      this.personFirstNameFilteredOptions = this.personFirstNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsFirstName(person))\n      );\n\n      this.personLastNameFilteredOptions = this.personLastNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsLastName(person))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingPerson(person) {\n    this.returnData.person = person;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewPerson() {\n    this.returnData.person = this.person;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  savePersonFirstName(value) {\n    if (value) {\n      this.person.firstName = value;\n    }\n  }\n\n  savePersonLastName(value) {\n    if (value) {\n      this.person.lastName = value;\n    }\n  }\n\n  displayPersonName(person: Person) {\n    if (person) {\n      this.personNameFieldDisplayValue = '';\n\n      if (person.firstName) {\n        this.personNameFieldDisplayValue = person.firstName;\n      }\n\n      if (person.lastName) {\n        this.personNameFieldDisplayValue = this.personNameFieldDisplayValue + ' ' + person.lastName;\n      }\n    }\n\n    return this.personFirstNameFieldDisplayValue;\n  }\n\n  displayPersonFirstName(person: Person) {\n    if (person) {\n      this.personFirstNameFieldDisplayValue = '';\n\n      if (person.firstName) {\n        this.personFirstNameFieldDisplayValue = person.firstName;\n      }\n    }\n\n    return this.personFirstNameFieldDisplayValue;\n  }\n\n  displayPersonLastName(person: Person) {\n    if (person) {\n      this.personLastNameFieldDisplayValue = '';\n\n      if (person.lastName) {\n        this.personLastNameFieldDisplayValue = person.lastName;\n      }\n    }\n\n    return this.personLastNameFieldDisplayValue;\n  }\n\n  private _filterPersonsName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.firstName || person.lastName) {\n          return person.firstName.toLowerCase().includes(filterValue) || person.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterPersonsFirstName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.firstName) {\n          return person.firstName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterPersonsLastName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.lastName) {\n          return person.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('person_name').focus();\n    } catch(e) {\n      document.getElementById('person_first_name').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "showExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showNew",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 14,
            "duplicateName": "DialogData-14"
        },
        {
            "name": "ReturnRemoveData",
            "id": "interface-ReturnRemoveData-bbbc0527c0c7272d84cae5b9b91f82ad",
            "file": "src/app/brainstorms/brainstorm/thought/thought.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Inject, InjectionToken, Input, OnInit, Output} from '@angular/core';\n\nimport {BrainstormThought} from '../../../models/brainstorm-thought';\nimport {Brainstorm} from '../../../models/brainstorm';\nimport {BrainstormService} from '../../../services/brainstorm.service';\nimport {BrainstormTopic} from '../../../models/brainstorm-topic';\n\nimport {ConfirmRemovalComponent} from '../../../utilities/confirm-removal/confirm-removal.component';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface ReturnRemoveData {\n  topic: BrainstormTopic;\n  thought: BrainstormThought;\n}\n\n@Component({\n  selector: 'app-thought',\n  templateUrl: './thought.component.html',\n  styleUrls: ['./thought.component.scss']\n})\nexport class ThoughtComponent implements OnInit {\n  @Input() public brainstorm: Brainstorm;\n  @Input() public topic: BrainstormTopic;\n  @Input() public thought: BrainstormThought;\n\n  @Output() private removeTopicThought: EventEmitter<ReturnRemoveData>;\n  @Output() private removeBrainstormThought: EventEmitter<ReturnRemoveData>;\n\n  public deleteReturnData: any;\n\n  public isEditMode: boolean;\n\n  constructor(public dialog: MatDialog,\n              private brainstormService: BrainstormService) {\n    this.isEditMode = false;\n\n    this.deleteReturnData = {\n      topic: null,\n      thought: null\n    };\n\n    this.removeTopicThought = new EventEmitter<ReturnRemoveData>();\n    this.removeBrainstormThought = new EventEmitter<ReturnRemoveData>();\n  }\n\n  ngOnInit() {\n  }\n\n  saveThought(thoughtContent) {\n    this.thought.thought = thoughtContent;\n\n    if (!this.topic) {\n      this.brainstormService.patchApiBrainstormThought(this.thought).subscribe(() => { });\n    } else {\n      this.brainstormService.patchApiTopicThought(this.thought).subscribe(() => { });\n    }\n\n    this.cancelThoughtEditMode();\n  }\n\n  doDeleteThought() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the thought '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.deleteReturnData.thought = this.thought;\n\n        if (this.topic) {\n          this.deleteReturnData.topic = this.topic;\n\n          this.removeTopicThought.emit(this.deleteReturnData);\n\n        } else {\n          this.removeBrainstormThought.emit(this.deleteReturnData);\n        }\n\n        this.cancelThoughtEditMode();\n      }\n    });\n  }\n\n  editThought() {\n    this.isEditMode = true;\n  }\n\n  cancelThoughtEditMode() {\n    this.isEditMode = false;\n  }\n}\n",
            "properties": [
                {
                    "name": "thought",
                    "type": "BrainstormThought",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "topic",
                    "type": "BrainstormTopic",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthorService",
            "id": "injectable-AuthorService-c119d6a380f5ada54bcf241bd543e786",
            "file": "src/app/services/author.service.ts",
            "properties": [
                {
                    "name": "authorPost",
                    "type": "AuthorPost",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createApiAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiAuthor",
                    "args": [
                        {
                            "name": "authorId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Author>",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "authorId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiAuthors",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthorResponse>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "patchApiAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "setAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\n\nimport { Author } from '../models/author';\nimport { AuthorPost } from '../models/posts/author-post';\nimport {AuthorResponse} from '../models/responses/author-response';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthorService {\n  private authors: Author[];\n  private authorPost: AuthorPost;\n\n  constructor(private http: HttpClient) {\n    this.resetAuthors();\n  }\n\n  resetAuthors() {\n    this.authors = [];\n  }\n\n  getAuthors() {\n    return this.authors;\n  }\n\n  setAuthor(author: Author) {\n    this.authors.push(author);\n  }\n\n  removeAuthor(author: Author) {\n    for (let i = 0; i < this.authors.length; i++) {\n      if (this.authors[i].id === author.id) {\n        this.authors.splice(i, 1);\n      }\n    }\n  }\n\n  getApiAuthors(path): Observable<AuthorResponse> {\n    this.authors = [];\n\n    if (!path) {\n      path = '/authors';\n    }\n\n    return this.http.get<AuthorResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'authors')\n    });\n  }\n\n  getApiAuthor(authorId): Observable<Author> {\n    return this.http.get<Author>(environment.apiUrl + '/authors/' + authorId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'person')\n    });\n  }\n\n  removeApiAuthor(author: Author): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/authors/' + author.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  createApiAuthor(author: Author): Observable<any> {\n    this.authorPost = new AuthorPost();\n    this.authorPost.mapToPost(author, false);\n\n    return this.http.post(environment.apiUrl + '/authors', this.authorPost, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json').set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiAuthor(author: Author): Observable<any> {\n    this.authorPost = new AuthorPost();\n    this.authorPost.mapToPost(author, true);\n\n    return this.http.patch(environment.apiUrl + '/authors/' + author.id, this.authorPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-94ea58d4ba27f49aae0b063088db5402",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "userToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkAuth",
                    "args": [
                        {
                            "name": "auth",
                            "type": "Auth"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiMasterUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "setToken",
                    "args": [
                        {
                            "name": "token",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Auth} from '../models/auth';\nimport {Observable} from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public userToken: string;\n\n  constructor(private http: HttpClient) { }\n\n  checkAuth(auth: Auth): Observable<any> {\n    return this.http.post(environment.apiUrl + '/login', auth, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json').set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  getApiMasterUser(): Promise<any> {\n    return this.http.get<any>(environment.apiUrl + '/auth?page[size]=1&page[number]=1&fields[auth]=token', {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n    }).toPromise();\n  }\n\n  static logOut(): void {\n    localStorage.setItem('isLoggedIn', 'false');\n\n    localStorage.removeItem('user.id');\n    localStorage.removeItem('user.firstName');\n    localStorage.removeItem('user.lastName');\n  }\n\n  setToken(token) {\n    this.userToken = token;\n  }\n\n  getToken() {\n    return this.userToken;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BrainstormService",
            "id": "injectable-BrainstormService-e4fab894e863891fb02b0ee81e278f11",
            "file": "src/app/services/brainstorm.service.ts",
            "properties": [
                {
                    "name": "brainstormPost",
                    "type": "BrainstormPost",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "brainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstormThoughtPost",
                    "type": "BrainstormThoughtPost",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "brainstormUserPost",
                    "type": "BrainstormUserPost",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "topicPost",
                    "type": "BrainstormTopicPost",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "topicThoughtPost",
                    "type": "BrainstormTopicThoughtPost",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUserToBrainstorm",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 220,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiBrainstorm",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiBrainstormThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 209,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiBrainstormTopic",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        },
                        {
                            "name": "topic",
                            "type": "BrainstormTopic"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 187,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "topic",
                            "type": "BrainstormTopic",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiBrainstormTopicThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 198,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteApiBrainstormThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 264,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteApiBrainstormTopicThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 270,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiBrainstorm",
                    "args": [
                        {
                            "name": "brainstormId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "brainstormId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiBrainstorms",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "string"
                        },
                        {
                            "name": "pageNumber",
                            "type": "string"
                        },
                        {
                            "name": "fields",
                            "type": "Array<string>"
                        },
                        {
                            "name": "sort",
                            "type": "Array<string>"
                        },
                        {
                            "name": "sortDescending",
                            "type": "boolean"
                        },
                        {
                            "name": "additionalFilters",
                            "type": "Array<Object>"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BrainstormResponse>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fields",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortDescending",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "additionalFilters",
                            "type": "Array<Object>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiBrainstormUsers",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserResponse>",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBrainstorms",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 280
                },
                {
                    "name": "patchApiBrainstormThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 242,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiTopic",
                    "args": [
                        {
                            "name": "topic",
                            "type": "BrainstormTopic"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "topic",
                            "type": "BrainstormTopic",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiTopicThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 253,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBrainstormThought",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        },
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTopicThought",
                    "args": [
                        {
                            "name": "topic",
                            "type": "BrainstormTopic"
                        },
                        {
                            "name": "thought",
                            "type": "BrainstormThought"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "jsdoctags": [
                        {
                            "name": "topic",
                            "type": "BrainstormTopic",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "thought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBrainstorm",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\n\nimport {BrainstormResponse} from '../models/responses/brainstorm-response';\n\nimport { environment } from '../../environments/environment';\n\nimport {BrainstormTopicPost} from '../models/posts/brainstorm-topic-post';\nimport {BrainstormTopicThoughtPost} from '../models/posts/brainstorm-topic-thought-post';\nimport {BrainstormThought} from '../models/brainstorm-thought';\nimport {BrainstormThoughtPost} from '../models/posts/brainstorm-thought-post';\nimport {BrainstormPost} from '../models/posts/brainstorm-post';\nimport {BrainstormTopic} from '../models/brainstorm-topic';\nimport {Brainstorm} from '../models/brainstorm';\nimport {BrainstormUserPost} from '../models/brainstorms/posts/brainstorm-user-post';\nimport {UserResponse} from '../models/users/responses/user-response';\nimport {User} from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrainstormService {\n  public brainstorms: Brainstorm[];\n  public users: User[];\n\n  private brainstormPost: BrainstormPost;\n  private topicPost: BrainstormTopicPost;\n  private topicThoughtPost: BrainstormTopicThoughtPost;\n  private brainstormThoughtPost: BrainstormThoughtPost;\n  private brainstormUserPost: BrainstormUserPost;\n\n  constructor(private http: HttpClient) {\n    this.brainstorms = [];\n  }\n\n  getApiBrainstorms(path: string, userId, pageSize: string, pageNumber: string, fields: Array<string>, sort: Array<string>,\n                    sortDescending: boolean, additionalFilters: Array<Object>, isAnotherPage: boolean): Observable<BrainstormResponse> {\n    this.brainstorms = [];\n\n    let type = 'brainstorms';\n\n    // if a next of previous page is being retrieved just all the path as is\n    if (!isAnotherPage) {\n      if (!path) {\n        path = '/brainstorms';\n      }\n\n      // default page size is 20 records per page\n      if (!pageSize) {\n        pageSize = '20';\n      }\n\n      // default page number to 1\n      if (!pageNumber) {\n        pageNumber = '1';\n      }\n\n      let filter = [];\n\n      if (userId) {\n        let userFilter = {\n          name: 'user_rel',\n          op: 'has',\n          val: {\n            name: 'id',\n            op: 'eq',\n            val: userId\n          }\n        };\n\n        filter.push(userFilter);\n\n        path = '/brainstorm_users';\n\n        type = 'user_brainstorms';\n      }\n\n      path = path + '?page[size]=' + pageSize;\n\n      path = path + '&page[number]=' + pageNumber;\n\n      // add any fields filter to the path\n      if (fields && fields.length) {\n        path = path + '&fields[brainstorm]=';\n\n        for (let i = 0; i < fields.length; i++) {\n          path = path + fields[i];\n\n          if (i < fields.length -1) {\n            path = path + ',';\n          }\n        }\n      }\n\n      // add any sorting if requested\n      if (sort && sort.length) {\n        path = path + '&sort=';\n\n        if (sortDescending) {\n          path = path + '-';\n        }\n\n        for (let i = 0; i < sort.length; i++) {\n          path = path + sort[i];\n\n          if (i < sort.length - 1) {\n            path = path + ',';\n          }\n        }\n      }\n\n      // lastly tack on any additional filters passed\n      if (additionalFilters && additionalFilters.length) {\n        for (const additionalFilter of additionalFilters) {\n          filter.push(additionalFilter);\n        }\n      }\n\n      if (filter.length) {\n        path = path + '&filter=' + JSON.stringify(filter);\n      }\n    } else {\n      // set the type to user if the next page are user timelines\n      if (path.includes('/brainstorm_users')) {\n        type = 'user_brainstorms';\n      }\n    }\n\n    return this.http.get<BrainstormResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', type)\n    });\n  }\n\n  getApiBrainstorm(brainstormId: number) {\n    return this.http.get<Brainstorm>(environment.apiUrl + '/brainstorms/' + brainstormId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'brainstorm')\n    });\n  }\n\n  getApiBrainstormUsers(path: string, brainstorm: Brainstorm): Observable<UserResponse> {\n    this.users = [];\n\n    if (!path) {\n      path = '/brainstorm_users';\n    }\n\n    let filter = [];\n\n    let brainstormFilter = {\n      name: 'brainstorm_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: brainstorm.id\n      }\n    };\n\n    filter.push(brainstormFilter);\n\n    path = path + '?filter=' + JSON.stringify(filter);\n\n    return this.http.get<UserResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'item_user')\n    });\n  }\n\n  createApiBrainstorm(brainstorm: Brainstorm): Observable<any> {\n    this.brainstormPost = new BrainstormPost();\n    this.brainstormPost.mapToPost(brainstorm, false);\n\n    return this.http.post(environment.apiUrl + '/brainstorms', this.brainstormPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiBrainstormTopic(brainstorm: Brainstorm, topic: BrainstormTopic): Observable<any> {\n    this.topicPost = new BrainstormTopicPost();\n    this.topicPost.mapToPost(brainstorm, topic, false);\n\n    return this.http.post(environment.apiUrl + '/brainstorm_topics', this.topicPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiBrainstormTopicThought(thought: BrainstormThought): Observable<any> {\n    this.topicThoughtPost = new BrainstormTopicThoughtPost();\n    this.topicThoughtPost.mapToPost(thought, false);\n\n    return this.http.post(environment.apiUrl + '/brainstorm_topic_thoughts', this.topicThoughtPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiBrainstormThought(thought: BrainstormThought): Observable<any> {\n    this.brainstormThoughtPost = new BrainstormThoughtPost();\n    this.brainstormThoughtPost.mapToPost(thought, false);\n\n    return this.http.post(environment.apiUrl + '/brainstorm_thoughts', this.brainstormThoughtPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addUserToBrainstorm(brainstorm: Brainstorm, userId: string): Observable<any> {\n    this.brainstormUserPost = new BrainstormUserPost();\n    this.brainstormUserPost.mapToPost(brainstorm, userId);\n\n    return this.http.post(environment.apiUrl + '/brainstorm_users', this.brainstormUserPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiTopic(topic: BrainstormTopic): Observable<any> {\n    this.topicPost = new BrainstormTopicPost();\n    this.topicPost.mapToPost(null, topic, true);\n\n    return this.http.patch(environment.apiUrl + '/brainstorm_topics/' + topic.id, this.topicPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiBrainstormThought(thought: BrainstormThought): Observable<any> {\n    this.brainstormThoughtPost = new BrainstormThoughtPost();\n    this.brainstormThoughtPost.mapToPost(thought, true);\n\n    return this.http.patch(environment.apiUrl + '/brainstorm_thoughts/' + thought.id, this.brainstormThoughtPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiTopicThought(thought: BrainstormThought): Observable<any> {\n    this.topicThoughtPost = new BrainstormTopicThoughtPost();\n    this.topicThoughtPost.mapToPost(thought, true);\n\n    return this.http.patch(environment.apiUrl + '/brainstorm_topic_thoughts/' + thought.id, this.topicThoughtPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  deleteApiBrainstormThought(thought: BrainstormThought): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/brainstorm_thoughts/' + thought.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  deleteApiBrainstormTopicThought(thought: BrainstormThought): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/brainstorm_topic_thoughts/' + thought.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  setBrainstorm(brainstorm: Brainstorm) {\n    this.brainstorms.push(brainstorm);\n  }\n\n  getBrainstorms() {\n    return this.brainstorms;\n  }\n\n  removeBrainstormThought(brainstorm: Brainstorm, thought: BrainstormThought) {\n    for (let i = 0; i < brainstorm.thoughts.length; i++) {\n      if (brainstorm.thoughts[i].id === thought.id) {\n        brainstorm.thoughts.splice(i, 1);\n\n        break;\n      }\n    }\n  }\n\n  removeTopicThought(topic: BrainstormTopic, thought: BrainstormThought) {\n    for (let i = 0; i < topic.thoughts.length; i++) {\n      if (topic.thoughts[i].id === thought.id) {\n        topic.thoughts.splice(i, 1);\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ChartConfigService",
            "id": "injectable-ChartConfigService-f23f87fc356eccd7915b5773e536d79f",
            "file": "src/app/services/chart-config.service.ts",
            "properties": [
                {
                    "name": "chartConfig",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getChartConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "setChartConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartConfigService {\n  public chartConfig: any;\n\n  constructor() { }\n\n  getChartConfig() {\n    return this.chartConfig;\n  }\n\n  setChartConfig(config) {\n    this.chartConfig = config;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "ChartService",
            "id": "injectable-ChartService-a51a5cbceb4a682d1aad7769408d2ce4",
            "file": "src/app/services/chart.service.ts",
            "properties": [
                {
                    "name": "chart",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartDatasetDataPost",
                    "type": "ChartDatasetDataPost",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartDatasetPost",
                    "type": "ChartDatasetPost",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartLabelPost",
                    "type": "ChartLabelPost",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartLegendLabelOptionsPost",
                    "type": "ChartLegendLabelOptionsPost",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartLegendOptionsPost",
                    "type": "ChartLegendOptionsPost",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartOptionsPost",
                    "type": "ChartOptionsPost",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartPost",
                    "type": "ChartPost",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "charts",
                    "type": "Chart[]",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartTitleOptionsPost",
                    "type": "ChartTitleOptionsPost",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartTooltipOptionsPost",
                    "type": "ChartTooltipOptionsPost",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createApiChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartDataset",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartDatasetData",
                    "args": [
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset"
                        },
                        {
                            "name": "datasetData",
                            "type": "ChartDatasetData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datasetData",
                            "type": "ChartDatasetData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartLabel",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartLabel",
                            "type": "ChartLabel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLabel",
                            "type": "ChartLabel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartLegendLabelOptions",
                    "args": [
                        {
                            "name": "legendOptions",
                            "type": "LegendOptions"
                        },
                        {
                            "name": "chartLegendLabelOptions",
                            "type": "LegendLabelOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "legendOptions",
                            "type": "LegendOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLegendLabelOptions",
                            "type": "LegendLabelOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartLegendOptions",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "chartLegendOptions",
                            "type": "LegendOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 130,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLegendOptions",
                            "type": "LegendOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartOptions",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartTitleOptions",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "chartTitleOptions",
                            "type": "TitleOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartTitleOptions",
                            "type": "TitleOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiChartTooltipOptions",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "chartTooltipOptions",
                            "type": "TooltipOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartTooltipOptions",
                            "type": "TooltipOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteApiChart",
                    "args": [
                        {
                            "name": "chartId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 253,
                    "jsdoctags": [
                        {
                            "name": "chartId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiChart",
                    "args": [
                        {
                            "name": "chartId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Chart>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "chartId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiCharts",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ChartResponse>",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChart",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 268
                },
                {
                    "name": "getCharts",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 264
                },
                {
                    "name": "patchApiChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiChartDataset",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 185,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiChartDatasetData",
                    "args": [
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset"
                        },
                        {
                            "name": "datasetData",
                            "type": "ChartDatasetData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 196,
                    "jsdoctags": [
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datasetData",
                            "type": "ChartDatasetData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiChartLabel",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartLabel",
                            "type": "ChartLabel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 174,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLabel",
                            "type": "ChartLabel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiChartLegendLabelOptions",
                    "args": [
                        {
                            "name": "legendOptions",
                            "type": "LegendOptions"
                        },
                        {
                            "name": "chartLegendLabelOptions",
                            "type": "LegendLabelOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 240,
                    "jsdoctags": [
                        {
                            "name": "legendOptions",
                            "type": "LegendOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLegendLabelOptions",
                            "type": "LegendLabelOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiChartLegendOptions",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "chartLegendOptions",
                            "type": "LegendOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 229,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLegendOptions",
                            "type": "LegendOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiChartTitleOptions",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "chartTitleOptions",
                            "type": "TitleOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 207,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartTitleOptions",
                            "type": "TitleOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiChartTooltipOptions",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "chartTooltipOptions",
                            "type": "TooltipOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 218,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartTooltipOptions",
                            "type": "TooltipOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\n\nimport {environment} from '../../environments/environment';\n\nimport {Chart} from '../models/chart';\nimport {ChartPost} from '../models/posts/chart-post';\nimport {ChartResponse} from '../models/responses/chart-response';\nimport {ChartLabel} from '../models/chart-label';\nimport {ChartLabelPost} from '../models/posts/chart-label-post';\nimport {ChartDataset} from '../models/chart-dataset';\nimport {ChartDatasetPost} from '../models/posts/chart-dataset-post';\nimport {ChartDatasetData} from '../models/chart-dataset-data';\nimport {ChartDatasetDataPost} from '../models/posts/chart-dataset-data-post';\nimport {ChartOptions, LegendLabelOptions, LegendOptions, TitleOptions, TooltipOptions} from '../models/chart-options';\nimport {ChartTitleOptionsPost} from '../models/posts/chart-title-options-post';\nimport {ChartOptionsPost} from '../models/posts/chart-options-post';\nimport {ChartLegendOptionsPost} from '../models/posts/chart-legend-options-post';\nimport {ChartLegendLabelOptionsPost} from '../models/posts/chart-legend-label-options-post';\nimport {ChartTooltipOptionsPost} from '../models/posts/chart-tooltip-options-post';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartService {\n  public chartPost: ChartPost;\n  public chartLabelPost: ChartLabelPost;\n  public chartDatasetPost: ChartDatasetPost;\n  public chartDatasetDataPost: ChartDatasetDataPost;\n  public chartOptionsPost: ChartOptionsPost;\n  public chartTitleOptionsPost: ChartTitleOptionsPost;\n  public chartLegendOptionsPost: ChartLegendOptionsPost;\n  public chartLegendLabelOptionsPost: ChartLegendLabelOptionsPost;\n  public chartTooltipOptionsPost: ChartTooltipOptionsPost;\n\n  public charts: Chart[];\n  public chart: Chart;\n\n  constructor(private http: HttpClient) {\n    this.charts = [];\n  }\n\n  getApiCharts(path): Observable<ChartResponse> {\n    this.charts = [];\n\n    return this.http.get<ChartResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'charts')\n    });\n  }\n\n  getApiChart(chartId): Observable<Chart> {\n    return this.http.get<Chart>(environment.apiUrl + '/charts/' + chartId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'chart')\n    });\n  }\n\n  createApiChart(chart: Chart): Observable<any> {\n    this.chartPost = new ChartPost();\n    this.chartPost.mapToPost(chart, false);\n\n    return this.http.post(environment.apiUrl + '/charts', this.chartPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartLabel(chart: Chart, chartLabel: ChartLabel): Observable<any> {\n    this.chartLabelPost = new ChartLabelPost();\n    this.chartLabelPost.mapToPost(chart, chartLabel, false);\n\n    return this.http.post(environment.apiUrl + '/chart_labels', this.chartLabelPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartDataset(chart: Chart, chartDataset: ChartDataset): Observable<any> {\n    this.chartDatasetPost = new ChartDatasetPost();\n    this.chartDatasetPost.mapToPost(chart, chartDataset, false);\n\n    return this.http.post(environment.apiUrl + '/chart_datasets', this.chartDatasetPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartDatasetData(chartDataset: ChartDataset, datasetData: ChartDatasetData): Observable<any> {\n    this.chartDatasetDataPost = new ChartDatasetDataPost();\n    this.chartDatasetDataPost.mapToPost(chartDataset, datasetData, false);\n\n    return this.http.post(environment.apiUrl + '/chart_dataset_data', this.chartDatasetDataPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartOptions(chart: Chart, chartOptions: ChartOptions): Observable<any> {\n    this.chartOptionsPost = new ChartOptionsPost();\n    this.chartOptionsPost.mapToPost(chart, chartOptions, false);\n\n    return this.http.post(environment.apiUrl + '/chart_options', this.chartOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartTitleOptions(chartOptions: ChartOptions, chartTitleOptions: TitleOptions): Observable<any> {\n    this.chartTitleOptionsPost = new ChartTitleOptionsPost();\n    this.chartTitleOptionsPost.mapToPost(chartOptions, chartTitleOptions, false);\n\n    return this.http.post(environment.apiUrl + '/chart_title_options', this.chartTitleOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartLegendOptions(chartOptions: ChartOptions, chartLegendOptions: LegendOptions): Observable<any> {\n    this.chartLegendOptionsPost = new ChartLegendOptionsPost();\n    this.chartLegendOptionsPost.mapToPost(chartOptions, chartLegendOptions, false);\n\n    return this.http.post(environment.apiUrl + '/chart_legend_options', this.chartLegendOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartLegendLabelOptions(legendOptions: LegendOptions, chartLegendLabelOptions: LegendLabelOptions): Observable<any> {\n    this.chartLegendLabelOptionsPost = new ChartLegendLabelOptionsPost();\n    this.chartLegendLabelOptionsPost.mapToPost(legendOptions, chartLegendLabelOptions, false);\n\n    return this.http.post(environment.apiUrl + '/chart_legend_label_options', this.chartLegendLabelOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiChartTooltipOptions(chartOptions: ChartOptions, chartTooltipOptions: TooltipOptions): Observable<any> {\n    this.chartTooltipOptionsPost = new ChartTooltipOptionsPost();\n    this.chartTooltipOptionsPost.mapToPost(chartOptions, chartTooltipOptions, false);\n\n    return this.http.post(environment.apiUrl + '/chart_tooltip_options', this.chartTooltipOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChart(chart: Chart): Observable<any> {\n    this.chartPost = new ChartPost();\n    this.chartPost.mapToPost(chart, true);\n\n    return this.http.patch(environment.apiUrl + '/charts/' + chart.id, this.chartPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChartLabel(chart: Chart, chartLabel: ChartLabel): Observable<any> {\n    this.chartLabelPost = new ChartLabelPost();\n    this.chartLabelPost.mapToPost(chart, chartLabel, true);\n\n    return this.http.patch(environment.apiUrl + '/chart_labels/' + chartLabel.id, this.chartLabelPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChartDataset(chart: Chart, chartDataset: ChartDataset): Observable<any> {\n    this.chartDatasetPost = new ChartDatasetPost();\n    this.chartDatasetPost.mapToPost(chart, chartDataset, true);\n\n    return this.http.patch(environment.apiUrl + '/chart_datasets/' + chartDataset.id, this.chartDatasetPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChartDatasetData(chartDataset: ChartDataset, datasetData: ChartDatasetData): Observable<any> {\n    this.chartDatasetDataPost = new ChartDatasetDataPost();\n    this.chartDatasetDataPost.mapToPost(chartDataset, datasetData, true);\n\n    return this.http.patch(environment.apiUrl + '/chart_dataset_data/' + datasetData.id, this.chartDatasetDataPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChartTitleOptions(chartOptions: ChartOptions, chartTitleOptions: TitleOptions): Observable<any> {\n    this.chartTitleOptionsPost = new ChartTitleOptionsPost();\n    this.chartTitleOptionsPost.mapToPost(chartOptions, chartTitleOptions, true);\n\n    return this.http.patch(environment.apiUrl + '/chart_title_options/' + chartTitleOptions.id, this.chartTitleOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChartTooltipOptions(chartOptions: ChartOptions, chartTooltipOptions: TooltipOptions): Observable<any> {\n    this.chartTooltipOptionsPost = new ChartTooltipOptionsPost();\n    this.chartTooltipOptionsPost.mapToPost(chartOptions, chartTooltipOptions, true);\n\n    return this.http.patch(environment.apiUrl + '/chart_tooltip_options/' + chartTooltipOptions.id, this.chartTooltipOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChartLegendOptions(chartOptions: ChartOptions, chartLegendOptions: LegendOptions): Observable<any> {\n    this.chartLegendOptionsPost = new ChartLegendOptionsPost();\n    this.chartLegendOptionsPost.mapToPost(chartOptions, chartLegendOptions, true);\n\n    return this.http.patch(environment.apiUrl + '/chart_legend_options/' + chartLegendOptions.id, this.chartLegendOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiChartLegendLabelOptions(legendOptions: LegendOptions, chartLegendLabelOptions: LegendLabelOptions): Observable<any> {\n    this.chartLegendLabelOptionsPost = new ChartLegendLabelOptionsPost();\n    this.chartLegendLabelOptionsPost.mapToPost(legendOptions, chartLegendLabelOptions, true);\n\n    return this.http.patch(\n      environment.apiUrl + '/chart_legend_label_options/' + chartLegendLabelOptions.id,\n      this.chartLegendLabelOptionsPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  deleteApiChart(chartId: number): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/charts/' + chartId, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  setChart(chart: Chart) {\n    this.charts.push(chart);\n    this.chart = chart;\n  }\n\n  getCharts() {\n    return this.charts;\n  }\n\n  getChart() {\n    return this.chart;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EraService",
            "id": "injectable-EraService-a4633372d10bfe815dd543fc3a1ff5e7",
            "file": "src/app/services/era.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEras",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EraService {\n  constructor(private http: HttpClient) { }\n  getEras(): Observable<any> {\n    return this.http.get<any>(environment.apiUrl + '/eras', {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EssayService",
            "id": "injectable-EssayService-c9cbead078d20ebb0791cb830858858b",
            "file": "src/app/services/essay.service.ts",
            "properties": [
                {
                    "name": "essayEventPost",
                    "type": "EssayEventPost",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayNotePost",
                    "type": "EssayNotePost",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayPersonPost",
                    "type": "EssayPersonPost",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayPost",
                    "type": "EssayPost",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayReferencePost",
                    "type": "EssayReferencePost",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essays",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTimelinePost",
                    "type": "EssayTimelinePost",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTypes",
                    "type": "EssayType[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayUserPost",
                    "type": "EssayUserPost",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addApiUserToEssay",
                    "args": [
                        {
                            "name": "essayUser",
                            "type": "EssayUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 246,
                    "jsdoctags": [
                        {
                            "name": "essayUser",
                            "type": "EssayUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEssay",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEssayBanner",
                    "args": [
                        {
                            "name": "imageForm",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 242,
                    "jsdoctags": [
                        {
                            "name": "imageForm",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEssayEvent",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayEvent",
                            "type": "EssayEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 279,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayEvent",
                            "type": "EssayEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEssayNote",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 257,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEssayPerson",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayPerson",
                            "type": "EssayPerson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 290,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayPerson",
                            "type": "EssayPerson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEssayReference",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayReference",
                            "type": "EssayReference"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 268,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayReference",
                            "type": "EssayReference",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEssayTimeline",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayTimeline",
                            "type": "EssayTimeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 301,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayTimeline",
                            "type": "EssayTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiEssay",
                    "args": [
                        {
                            "name": "essayId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 193,
                    "jsdoctags": [
                        {
                            "name": "essayId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiEssays",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        },
                        {
                            "name": "pageSize",
                            "type": "string"
                        },
                        {
                            "name": "fields",
                            "type": "Array<string>"
                        },
                        {
                            "name": "sort",
                            "type": "Array<string>"
                        },
                        {
                            "name": "sortDescending",
                            "type": "boolean"
                        },
                        {
                            "name": "additionalFilters",
                            "type": "Array<Object>"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EssayResponse>",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fields",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortDescending",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "additionalFilters",
                            "type": "Array<Object>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiEssayTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "getApiEssayUsers",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserResponse>",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBiographyByUserFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "{ name: string; op: string; val: { name: string; op: string; val: { name: string; op: string; val...",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getBiographyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "{ name: string; op: string; val: { name: string; op: string; val: string; }; }",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "getEssay",
                    "args": [
                        {
                            "name": "essayId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 344,
                    "jsdoctags": [
                        {
                            "name": "essayId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEssays",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 360
                },
                {
                    "name": "getEssayTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 368
                },
                {
                    "name": "patchApiEssay",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 312,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiEssayNote",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 323,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiNote",
                    "args": [
                        {
                            "name": "essayNote",
                            "type": "EssayNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 334,
                    "jsdoctags": [
                        {
                            "name": "essayNote",
                            "type": "EssayNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEssay",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 352,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeNote",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEssay",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEssayType",
                    "args": [
                        {
                            "name": "essayType",
                            "type": "EssayType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 364,
                    "jsdoctags": [
                        {
                            "name": "essayType",
                            "type": "EssayType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\n\nimport {Essay} from '../models/essays/essay';\nimport {EssayPost} from '../models/essays/posts/essay-post';\nimport {EssayNote} from '../models/essays/essay-note';\nimport {EssayNotePost} from '../models/essays/posts/essay-note-post';\nimport {EssayReference} from '../models/essays/essay-reference';\nimport {EssayReferencePost} from '../models/essays/posts/essay-reference-post';\nimport {EssayEvent} from '../models/essays/essay-event';\nimport {EssayEventPost} from '../models/essays/posts/essay-event-post';\nimport {EssayPerson} from '../models/essays/essay-person';\nimport {EssayPersonPost} from '../models/essays/posts/essay-person-post';\nimport {EssayTimelinePost} from '../models/essays/posts/essay-timeline-post';\nimport {EssayTimeline} from '../models/essays/essay-timeline';\nimport {EssayResponse} from '../models/essays/responses/essay-response';\nimport {EssayType} from '../models/essays/essay-type';\nimport {EssayUser} from '../models/essays/essay-user';\nimport {EssayUserPost} from '../models/essays/posts/essay-user-post';\nimport {UserResponse} from '../models/users/responses/user-response';\nimport {User} from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EssayService {\n  public essays: Essay[];\n  public essayTypes: EssayType[];\n\n  public users: User[];\n\n  public essayPost: EssayPost;\n  public essayNotePost: EssayNotePost;\n  public essayReferencePost: EssayReferencePost;\n  public essayEventPost: EssayEventPost;\n  public essayPersonPost: EssayPersonPost;\n  public essayTimelinePost: EssayTimelinePost;\n  public essayUserPost: EssayUserPost;\n\n  constructor(private http: HttpClient) {\n    this.essays = [];\n    this.users = [];\n  }\n\n  static removeNote(essay: Essay, essayNote: EssayNote) {\n    for (let i = 0; i < essay.essayNotes.length; i++) {\n      if (essay.essayNotes[i].id === essayNote.id) {\n        essay.essayNotes.splice(i, 1);\n      }\n    }\n  }\n\n  static getBiographyFilter() {\n    return {\n      name: 'type_rel',\n      op: 'has',\n      val: {\n        name: 'label',\n        op: 'eq',\n        val: 'Biography'\n      }\n    }\n  }\n\n  static getBiographyByUserFilter() {\n    return {\n      name: 'essay_rel',\n      op: 'has',\n      val: {\n        name: 'type_rel',\n        op: 'has',\n        val: {\n          name: 'label',\n          op: 'eq',\n          val: 'Biography'\n        }\n      }\n    }\n  }\n\n  getApiEssayTypes(): Observable<any> {\n    this.essayTypes = [];\n\n    return this.http.get<any>(environment.apiUrl + '/essay_types?page[size]=0', {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  getApiEssays(path: string,\n               userId: string,\n               pageSize: string,\n               fields: Array<string>,\n               sort: Array<string>,\n               sortDescending: boolean,\n               additionalFilters: Array<Object>,\n               isAnotherPage: boolean): Observable<EssayResponse> {\n    let type = 'essays';\n\n    // only add params if it's not a link to another page\n    if (!isAnotherPage) {\n      // default page size is 20 records per page\n      if (!pageSize) {\n        pageSize = '20';\n      }\n\n      this.essays = [];\n\n      if (!path) {\n        path = '/essays';\n      }\n\n      let filter = [];\n\n      if (userId) {\n        let userFilter = {\n          name: 'user_rel',\n          op: 'has',\n          val: {\n            name: 'id',\n            op: 'eq',\n            val: userId\n          }\n        };\n\n        filter.push(userFilter);\n\n        path = '/essay_users';\n\n        type = 'user_essays';\n      }\n\n      path = path + '?page[size]=' + pageSize;\n\n      // add any fields filter to the path\n      if (fields && fields.length) {\n        path = path + '&fields[essay]=';\n\n        for (let i = 0; i < fields.length; i++) {\n          path = path + fields[i];\n\n          if (i < fields.length -1) {\n            path = path + ',';\n          }\n        }\n      }\n\n      // add any sorting if requested\n      if (sort && sort.length) {\n        path = path + '&sort=';\n\n        if (sortDescending) {\n          path = path + '-';\n        }\n\n        for (let i = 0; i < sort.length; i++) {\n          path = path + sort[i];\n\n          if (i < sort.length - 1) {\n            path = path + ',';\n          }\n        }\n      }\n\n      // lastly tack on any additional filters passed\n      if (additionalFilters && additionalFilters.length) {\n        for (const additionalFilter of additionalFilters) {\n          filter.push(additionalFilter);\n        }\n      }\n\n      if (filter.length) {\n        path = path + '&filter=' + JSON.stringify(filter);\n      }\n\n    } else {\n      if (path.includes('/essay_users')) {\n        type = 'user_essays';\n      }\n    }\n\n    return this.http.get<EssayResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', type)\n    });\n  }\n\n  getApiEssay(essayId) {\n    return this.http.get<Essay>(environment.apiUrl + '/essays/' + essayId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'essay')\n    });\n  }\n\n  getApiEssayUsers(path: string, essay: Essay): Observable<UserResponse> {\n    this.users = [];\n\n    if (!path) {\n      path = '/essay_users';\n    }\n\n    let filter = [];\n\n    let essayFilter = {\n      name: 'essay_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: essay.id\n      }\n    };\n\n    filter.push(essayFilter);\n\n    path = path + '?filter=' + JSON.stringify(filter);\n\n    return this.http.get<UserResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'item_user')\n    });\n  }\n\n  createApiEssay(essay: Essay): Observable<any> {\n    this.essayPost = new EssayPost();\n    this.essayPost.mapToPost(essay, true);\n\n    return this.http.post(environment.apiUrl + '/essays', this.essayPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEssayBanner(imageForm: FormData): Observable<any> {\n    return this.http.post(environment.apiUrl + '/upload_essay_banner', imageForm, {responseType: 'text'});\n  }\n\n  addApiUserToEssay(essayUser: EssayUser): Observable<any> {\n    this.essayUserPost = new EssayUserPost();\n    this.essayUserPost.mapToPost(essayUser, false);\n\n    return this.http.post(environment.apiUrl + '/essay_users', this.essayUserPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEssayNote(essay: Essay, essayNote: EssayNote): Observable<any> {\n    this.essayNotePost = new EssayNotePost();\n    this.essayNotePost.mapToPost(essay, essayNote, false);\n\n    return this.http.post(environment.apiUrl + '/essay_notes', this.essayNotePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEssayReference(essay: Essay, essayReference: EssayReference): Observable<any> {\n    this.essayReferencePost = new EssayReferencePost();\n    this.essayReferencePost.mapToPost(essay, essayReference, false);\n\n    return this.http.post(environment.apiUrl + '/essay_references', this.essayReferencePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEssayEvent(essay: Essay, essayEvent: EssayEvent): Observable<any> {\n    this.essayEventPost = new EssayEventPost();\n    this.essayEventPost.mapToPost(essay, essayEvent);\n\n    return this.http.post(environment.apiUrl + '/essay_events', this.essayEventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEssayPerson(essay: Essay, essayPerson: EssayPerson): Observable<any> {\n    this.essayPersonPost = new EssayPersonPost();\n    this.essayPersonPost.mapToPost(essay, essayPerson);\n\n    return this.http.post(environment.apiUrl + '/essay_persons', this.essayPersonPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEssayTimeline(essay: Essay, essayTimeline: EssayTimeline): Observable<any> {\n    this.essayTimelinePost = new EssayTimelinePost();\n    this.essayTimelinePost.mapToPost(essay, essayTimeline);\n\n    return this.http.post(environment.apiUrl + '/essay_timelines', this.essayTimelinePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiEssay(essay: Essay): Observable<any> {\n    this.essayPost = new EssayPost();\n    this.essayPost.mapToPost(essay, true);\n\n    return this.http.patch(environment.apiUrl + '/essays/' + essay.id, this.essayPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiEssayNote(essay: Essay, essayNote: EssayNote): Observable<any> {\n    this.essayNotePost = new EssayNotePost();\n    this.essayNotePost.mapToPost(essay, essayNote, true);\n\n    return this.http.patch(environment.apiUrl + '/essay_notes/' + essayNote.id, this.essayNotePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiNote(essayNote: EssayNote): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/essay_notes/' + essayNote.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  setEssay(essay: Essay) {\n    this.essays.push(essay);\n  }\n\n  getEssay(essayId: number) {\n    for (const essay of this.essays) {\n      if (essay.id === essayId) {\n        return essay;\n      }\n    }\n  }\n\n  removeEssay(essay: Essay) {\n    for (let i = 0; i < this.essays.length; i++) {\n      if (this.essays[i].id === essay.id) {\n        this.essays.splice(i, 1);\n      }\n    }\n  }\n\n  getEssays() {\n    return this.essays;\n  }\n\n  setEssayType(essayType: EssayType) {\n    this.essayTypes.push(essayType);\n  }\n\n  getEssayTypes() {\n    return this.essayTypes;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EventService",
            "id": "injectable-EventService-75214419ab1fc29b6db7204e27ffbe4c",
            "file": "src/app/services/event.service.ts",
            "properties": [
                {
                    "name": "eventNotePost",
                    "type": "EventNotePost",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "eventPost",
                    "type": "EventPost",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "events",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "eventTimelines",
                    "type": "TimelineEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "filterObject",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelineEventPost",
                    "type": "TimelineEventPost",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createApiEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 234,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEventImage",
                    "args": [
                        {
                            "name": "imageForm",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 290,
                    "jsdoctags": [
                        {
                            "name": "imageForm",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiEventNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "EventNote"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 279,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "EventNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTimelineApiEvent",
                    "args": [
                        {
                            "name": "eventTimeline",
                            "type": "EventTimeline"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 245,
                    "jsdoctags": [
                        {
                            "name": "eventTimeline",
                            "type": "EventTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiEvent",
                    "args": [
                        {
                            "name": "eventId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Event>",
                    "typeParameters": [],
                    "line": 162,
                    "jsdoctags": [
                        {
                            "name": "eventId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiEvents",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "filterTerm",
                            "type": ""
                        },
                        {
                            "name": "dateFilter",
                            "type": ""
                        },
                        {
                            "name": "isPageLink",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EventResponse>",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterTerm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dateFilter",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPageLink",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiEventTimelines",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EventTimelinesResponse>",
                    "typeParameters": [],
                    "line": 170,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiTimelineEvents",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TimelineEventsResponse>",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 323
                },
                {
                    "name": "patchApiEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiEventNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "EventNote"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 294,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "EventNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 267,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "EventNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 305,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "EventNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEventNote",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        },
                        {
                            "name": "note",
                            "type": "EventNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "note",
                            "type": "EventNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTimelineApiEvent",
                    "args": [
                        {
                            "name": "eventTimeline",
                            "type": "EventTimeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 273,
                    "jsdoctags": [
                        {
                            "name": "eventTimeline",
                            "type": "EventTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\n\nimport { Event } from '../models/events/event';\nimport { EventNote } from '../models/events/event-note';\nimport { EventNotePost } from '../models/events/posts/event-note-post';\nimport { EventPost } from '../models/events/posts/event-post';\nimport {EventResponse, EventTimelinesResponse, TimelineEventsResponse} from '../models/responses/event-response';\nimport {TimelineEvent} from '../models/timelines/timeline-event';\nimport {EventTimeline} from '../models/events/event-timeline';\nimport {TimelineEventPost} from '../models/posts/timeline-event-post';\nimport {Timeline} from '../models/timelines/timeline';\nimport {PersonTimelinesResponse} from '../models/responses/person-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n  private events: Event[];\n\n  private eventNotePost: EventNotePost;\n  private eventPost: EventPost;\n  private timelineEventPost: TimelineEventPost;\n\n  private filterObject: Array<any>;\n\n  private eventTimelines: TimelineEvent[];\n\n  constructor(private http: HttpClient) {\n    this.events = [];\n    this.eventTimelines = [];\n    this.filterObject = [];\n  }\n\n  static removeEventNote(event: Event, note: EventNote) {\n    for (let i = 0; i < event.notes.length; i++) {\n      if (event.notes[i].id === note.id) {\n        event.notes.splice(i, 1);\n      }\n    }\n  }\n\n  getApiEvents(path, filterTerm, dateFilter, isPageLink): Observable<EventResponse> {\n    this.filterObject = [];\n\n    this.events = [];\n\n    // if this is a page link the path is already fully formed. as such skip.\n    if (!isPageLink) {\n      if (!path) {\n        path = '/events';\n\n        if ((filterTerm) || (!filterTerm && dateFilter)) {\n          path = path + '?';\n        }\n      } else {\n        if (filterTerm || dateFilter) {\n          path = path + '&';\n        }\n      }\n\n      if (filterTerm) {\n        const searchFilter = {\n          or: [\n            {\n              name: 'description',\n              op: 'ilike',\n              val: '%' + filterTerm + '%'\n            },\n            {\n              name: 'label',\n              op: 'ilike',\n              val: '%' + filterTerm + '%'\n            }\n          ]\n        };\n\n        this.filterObject.push(searchFilter);\n      }\n\n      if (dateFilter) {\n        if (dateFilter.length === 2) {\n          let addEraFilter = true;\n\n          let startDateOperator = 'gt';\n\n          if (dateFilter[0][1].toUpperCase() === 'BC') {\n            startDateOperator = 'lt';\n          }\n\n          let endDateOperator = 'lt';\n\n          if (dateFilter[1][1].toUpperCase() === 'BC') {\n            endDateOperator = 'gt';\n          }\n\n          // In the case that the search is between BC and AD\n          if (dateFilter[0][1].toUpperCase() === 'BC' && dateFilter[1][1].toUpperCase() === 'AD') {\n            addEraFilter = false;\n          }\n\n          const startDateFilter = {\n            name: 'event_start_year',\n            op: startDateOperator,\n            val: dateFilter[0][0]\n          };\n\n          const endDateFilter = {\n            name: 'event_end_year',\n            op: endDateOperator,\n            val: dateFilter[1][0]\n          };\n\n          const startDateEraFilter = {\n            name: 'event_start_era_rel',\n            op: 'has',\n            val: {\n              name: 'label',\n              op: 'eq',\n              val: dateFilter[0][1]\n            }\n          };\n\n          const endDateEraFilter = {\n            name: 'event_end_era_rel',\n            op: 'has',\n            val: {\n              name: 'label',\n              op: 'eq',\n              val: dateFilter[1][1]\n            }\n          };\n\n          this.filterObject.push(startDateFilter);\n          this.filterObject.push(endDateFilter);\n\n          if (addEraFilter) {\n            this.filterObject.push(startDateEraFilter);\n            this.filterObject.push(endDateEraFilter);\n          }\n        }\n      }\n\n      if (this.filterObject.length) {\n        const filterQuery = JSON.stringify(this.filterObject);\n\n        path = path + 'filter=' + filterQuery;\n      }\n    }\n\n    return this.http.get<EventResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'events')\n    });\n  }\n\n  getApiEvent(eventId): Observable<Event> {\n    return this.http.get<Event>(environment.apiUrl + '/events/' + eventId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'event')\n    });\n  }\n\n  getApiEventTimelines(event: Event): Observable<EventTimelinesResponse> {\n    this.filterObject = [];\n\n    this.eventTimelines = [];\n\n    let path = '/timeline_events';\n\n    const eventFilter = {\n      name: 'event_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: event.id.toString()\n      }\n    };\n\n    this.filterObject.push(eventFilter);\n\n    const filterQuery = JSON.stringify(this.filterObject);\n\n    path = path + '?filter=' + filterQuery;\n\n    path = path + '&page[size]=0';\n\n    return this.http.get<EventTimelinesResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'event_timelines')\n    });\n  }\n\n  getApiTimelineEvents(timeline: Timeline): Observable<TimelineEventsResponse> {\n    this.filterObject = [];\n\n    this.eventTimelines = [];\n\n    let path = '/timeline_events';\n\n    const timelineFilter = {\n      name: 'timeline_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: timeline.id.toString()\n      }\n    };\n\n    this.filterObject.push(timelineFilter);\n\n    const filterQuery = JSON.stringify(this.filterObject);\n\n    path = path + '?filter=' + filterQuery;\n\n    path = path + '&page[size]=0';\n\n    return this.http.get<TimelineEventsResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'timeline_events')\n    });\n  }\n\n  createApiEvent(event: Event): Observable<any> {\n    this.eventPost = new EventPost();\n    this.eventPost.mapToPost(event, false);\n\n    return this.http.post(environment.apiUrl + '/events', this.eventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createTimelineApiEvent(eventTimeline: EventTimeline, event: Event): Observable<any> {\n    this.timelineEventPost = new TimelineEventPost();\n    this.timelineEventPost.mapToPost(event, eventTimeline.timeline, false, 0, false, null);\n\n    return this.http.post(environment.apiUrl + '/timeline_events', this.timelineEventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiEvent(event: Event): Observable<any> {\n    this.eventPost = new EventPost();\n    this.eventPost.mapToPost(event, true);\n\n    return this.http.patch(environment.apiUrl + '/events/' + event.id, this.eventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiEvent(event: Event): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/events/' + event.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeTimelineApiEvent(eventTimeline: EventTimeline): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/timeline_events/' + eventTimeline.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEventNote(note: EventNote, event: Event): Observable<any> {\n    this.eventNotePost = new EventNotePost();\n    this.eventNotePost.mapToPost(note, event, false);\n\n    return this.http.post(environment.apiUrl + '/event_notes', this.eventNotePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiEventImage(imageForm: FormData): Observable<any> {\n    return this.http.post(environment.apiUrl + '/upload_event_image', imageForm, {responseType: 'text'});\n  }\n\n  patchApiEventNote(note: EventNote, event: Event): Observable<any> {\n    this.eventNotePost = new EventNotePost();\n    this.eventNotePost.mapToPost(note, event, true);\n\n    return this.http.patch(environment.apiUrl + '/event_notes/' + note.id, this.eventNotePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiNote(note: EventNote): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/event_notes/' + note.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeEvent(event: Event) {\n    for (let i = 0; i < this.events.length; i++) {\n      if (this.events[i].id === event.id) {\n        this.events.splice(i, 1);\n      }\n    }\n  }\n\n  setEvent(event: Event) {\n    this.events.push(event);\n  }\n\n  getEvents() {\n    return this.events;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ImageService",
            "id": "injectable-ImageService-6e30bcbace5c62e1bf206d1b81b514d0",
            "file": "src/app/services/image-service.service.ts",
            "properties": [
                {
                    "name": "defaultImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDefaultImage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n  private defaultImage: string;\n\n  constructor() {\n    this.defaultImage = 'https://s3.us-east-2.amazonaws.com/dev.history/history_default.png';\n  }\n\n  getDefaultImage(): string {\n    return this.defaultImage;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "MonthService",
            "id": "injectable-MonthService-d0dd94b3e3f7a5b81c562fc1e35e1278",
            "file": "src/app/services/month.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MonthService {\n  constructor(private http: HttpClient) { }\n  getMonths(): Observable<any> {\n    return this.http.get<any>(environment.apiUrl + '/months', {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PersonService",
            "id": "injectable-PersonService-865a1a74fa51c4f2e5299b1f019a5cea",
            "file": "src/app/services/person.service.ts",
            "properties": [
                {
                    "name": "filterObject",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "personBiographies",
                    "type": "PersonBiography[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "personBiographyPost",
                    "type": "PersonBiographyPost",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "personNotePost",
                    "type": "PersonNotePost",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "personPost",
                    "type": "PersonPost",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "persons",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "personTimelines",
                    "type": "PersonTimeline[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createApiPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiPersonImage",
                    "args": [
                        {
                            "name": "imageForm",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 270,
                    "jsdoctags": [
                        {
                            "name": "imageForm",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiPersonNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "PersonNote"
                        },
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 274,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "PersonNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPersonBiography",
                    "args": [
                        {
                            "name": "personBiography",
                            "type": "PersonBiography"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 285,
                    "jsdoctags": [
                        {
                            "name": "personBiography",
                            "type": "PersonBiography",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiPerson",
                    "args": [
                        {
                            "name": "personId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Person>",
                    "typeParameters": [],
                    "line": 166,
                    "jsdoctags": [
                        {
                            "name": "personId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiPersonBiographies",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PersonBiographiesResponse>",
                    "typeParameters": [],
                    "line": 238,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiPersons",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "filterTerm",
                            "type": ""
                        },
                        {
                            "name": "dateFilter",
                            "type": ""
                        },
                        {
                            "name": "isPageLink",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PersonResponse>",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterTerm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dateFilter",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPageLink",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiPersonTimelines",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PersonTimelinesResponse>",
                    "typeParameters": [],
                    "line": 174,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiTimelinePersons",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PersonTimelinesResponse>",
                    "typeParameters": [],
                    "line": 206,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPersons",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 320
                },
                {
                    "name": "patchApiPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiPersonNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "PersonNote"
                        },
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "PersonNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "PersonNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 296,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "PersonNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiPersonBiography",
                    "args": [
                        {
                            "name": "biography",
                            "type": "PersonBiography"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "biography",
                            "type": "PersonBiography",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiPersonTimeline",
                    "args": [
                        {
                            "name": "personTimeline",
                            "type": "PersonTimeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 310,
                    "jsdoctags": [
                        {
                            "name": "personTimeline",
                            "type": "PersonTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePersonNote",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        },
                        {
                            "name": "note",
                            "type": "PersonNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "note",
                            "type": "PersonNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\n\nimport { PersonPost } from '../models/posts/person-post';\nimport { Person } from '../models/persons/person';\nimport { PersonNote } from '../models/persons/person-note';\nimport { PersonNotePost } from '../models/posts/person-note-post';\nimport {PersonBiographiesResponse, PersonResponse, PersonTimelinesResponse} from '../models/responses/person-response';\nimport {PersonBiography} from '../models/persons/person-biography';\nimport {PersonBiographyPost} from '../models/posts/person-biography-post';\nimport {PersonTimeline} from '../models/persons/person-timeline';\nimport {Timeline} from '../models/timelines/timeline';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PersonService {\n  private personPost: PersonPost;\n  private personNotePost: PersonNotePost;\n  private personBiographyPost: PersonBiographyPost;\n\n  private persons: Person[];\n  private personTimelines: PersonTimeline[];\n  private personBiographies: PersonBiography[];\n\n  private filterObject: Array<any>;\n\n  constructor(private http: HttpClient) {\n    this.persons = [];\n  }\n\n  static removePersonNote(person: Person, note: PersonNote) {\n    for (let i = 0; i < person.notes.length; i++) {\n      if (person.notes[i].id === note.id) {\n        person.notes.splice(i, 1);\n      }\n    }\n  }\n\n  createApiPerson(person: Person): Observable<any> {\n    this.personPost = new PersonPost();\n    this.personPost.mapToPost(person, false);\n\n    return this.http.post(environment.apiUrl + '/persons', this.personPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiPerson(person: Person): Observable<any> {\n    this.personPost = new PersonPost();\n    this.personPost.mapToPost(person, true);\n\n    return this.http.patch(environment.apiUrl + '/persons/' + person.id, this.personPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiPersonNote(note: PersonNote, person: Person) {\n    this.personNotePost = new PersonNotePost();\n    this.personNotePost.mapToNotePost(note, person, true);\n\n    return this.http.patch(environment.apiUrl + '/person_notes/' + note.id, this.personNotePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiPerson(person: Person): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/persons/' + person.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiPersonBiography(biography: PersonBiography): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/person_biographies/' + biography.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  getApiPersons(path, filterTerm, dateFilter, isPageLink): Observable<PersonResponse> {\n    this.filterObject = [];\n\n    this.persons = [];\n\n    // if this is a page link the path is already fully formed. as such skip.\n    if (!isPageLink) {\n      if (!path) {\n        path = '/persons';\n\n        if ((filterTerm) || (!filterTerm && dateFilter)) {\n          path = path + '?';\n        }\n      } else {\n        if (filterTerm || dateFilter) {\n          path = path + '&';\n        }\n      }\n\n      if (filterTerm) {\n        const searchFilter = {\n          or: [\n            {\n              name: 'description',\n              op: 'ilike',\n              val: '%' + filterTerm + '%'\n            },\n            {\n              name: 'first_name',\n              op: 'ilike',\n              val: '%' + filterTerm + '%'\n            },\n            {\n              name: 'last_name',\n              op: 'ilike',\n              val: '%' + filterTerm + '%'\n            }\n          ]\n        };\n\n        this.filterObject.push(searchFilter);\n      }\n\n      if (dateFilter) {\n        if (dateFilter.length === 2) {\n          const startDateFilter = {\n            name: 'birth_year',\n            op: 'gt',\n            val: dateFilter[0]\n          };\n\n          const endDateFilter = {\n            name: 'birth_year',\n            op: 'lt',\n            val: dateFilter[1]\n          };\n\n          this.filterObject.push(startDateFilter);\n          this.filterObject.push(endDateFilter);\n        }\n      }\n\n      if (this.filterObject.length) {\n        const filterQuery = JSON.stringify(this.filterObject);\n\n        path = path + 'filter=' + filterQuery;\n      }\n    }\n\n    return this.http.get<PersonResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'persons')\n    });\n  }\n\n  getApiPerson(personId): Observable<Person> {\n    return this.http.get<Person>(environment.apiUrl + '/persons/' + personId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'person')\n    });\n  }\n\n  getApiPersonTimelines(person: Person): Observable<PersonTimelinesResponse> {\n    this.filterObject = [];\n\n    this.personTimelines = [];\n\n    let path = '/timeline_persons';\n\n    const personFilter = {\n      name: 'person_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: person.id.toString()\n      }\n    };\n\n    this.filterObject.push(personFilter);\n\n    const filterQuery = JSON.stringify(this.filterObject);\n\n    path = path + '?filter=' + filterQuery;\n\n    path = path + '&page[size]=0';\n\n    return this.http.get<PersonTimelinesResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'person_timelines')\n    });\n  }\n\n  getApiTimelinePersons(timeline: Timeline): Observable<PersonTimelinesResponse> {\n    this.filterObject = [];\n\n    this.personTimelines = [];\n\n    let path = '/timeline_persons';\n\n    const personFilter = {\n      name: 'timeline_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: timeline.id.toString()\n      }\n    };\n\n    this.filterObject.push(personFilter);\n\n    const filterQuery = JSON.stringify(this.filterObject);\n\n    path = path + '?filter=' + filterQuery;\n\n    path = path + '&page[size]=0';\n\n    return this.http.get<PersonTimelinesResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'person_timelines')\n    });\n  }\n\n  getApiPersonBiographies(person: Person): Observable<PersonBiographiesResponse> {\n    this.filterObject = [];\n\n    this.personBiographies = [];\n\n    let path = '/person_biographies';\n\n    const personFilter = {\n      name: 'person_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: person.id.toString()\n      }\n    };\n\n    this.filterObject.push(personFilter);\n\n    const filterQuery = JSON.stringify(this.filterObject);\n\n    path = path + '?filter=' + filterQuery;\n\n    path = path + '&page[size]=0';\n\n    return this.http.get<PersonBiographiesResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'person_biographies')\n    });\n  }\n\n  createApiPersonImage(imageForm: FormData): Observable<any> {\n    return this.http.post(environment.apiUrl + '/upload_person_image', imageForm, {responseType: 'text'});\n  }\n\n  createApiPersonNote(note: PersonNote, person: Person): Observable<any> {\n    this.personNotePost = new PersonNotePost();\n    this.personNotePost.mapToNotePost(note, person, false);\n\n    return this.http.post(environment.apiUrl + '/person_notes', this.personNotePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createPersonBiography(personBiography: PersonBiography): Observable<any> {\n    this.personBiographyPost = new PersonBiographyPost();\n    this.personBiographyPost.mapToPersonBiographyPost(personBiography);\n\n    return this.http.post(environment.apiUrl + '/person_biographies', this.personBiographyPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiNote(note: PersonNote): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/person_notes/' + note.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removePerson(person: Person) {\n    for (let i = 0; i < this.persons.length; i++) {\n      if (this.persons[i].id === person.id) {\n        this.persons.splice(i, 1);\n      }\n    }\n  }\n\n  removeApiPersonTimeline(personTimeline: PersonTimeline): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/timeline_persons/' + personTimeline.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  setPerson(person: Person) {\n    this.persons.push(person);\n  }\n\n  getPersons() {\n    return this.persons;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-2d791731b7b614c12f71c0bc91b9b352",
            "file": "src/app/services/project.service.ts",
            "properties": [
                {
                    "name": "project",
                    "type": "Project",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectBrainstormPost",
                    "type": "ProjectBrainstormPost",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectChartPost",
                    "type": "ProjectChartPost",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectEssayPost",
                    "type": "ProjectEssayPost",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectEventPost",
                    "type": "ProjectEventPost",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectPersonPost",
                    "type": "ProjectPersonPost",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectPost",
                    "type": "ProjectPost",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projects",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectTimelinePost",
                    "type": "ProjectTimelinePost",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "projectUserPost",
                    "type": "ProjectUserPost",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addApiBrainstormToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 215,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addApiChartToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "chart",
                            "type": "Chart"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 204,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addApiEssayToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addApiEventToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 193,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addApiPersonToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addApiTimelineToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUserToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteApiProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiProject",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Project>",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiProjects",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "userId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectResponse>",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiProjectUsers",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "project",
                            "type": "Project"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserResponse>",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Project[]",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "removeApiBrainstormFromProject",
                    "args": [
                        {
                            "name": "projectBrainstorm",
                            "type": "ProjectBrainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "projectBrainstorm",
                            "type": "ProjectBrainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiChartFromProject",
                    "args": [
                        {
                            "name": "projectChart",
                            "type": "ProjectChart"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 250,
                    "jsdoctags": [
                        {
                            "name": "projectChart",
                            "type": "ProjectChart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiEssayFromProject",
                    "args": [
                        {
                            "name": "projectEssay",
                            "type": "ProjectEssay"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 226,
                    "jsdoctags": [
                        {
                            "name": "projectEssay",
                            "type": "ProjectEssay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiEventFromProject",
                    "args": [
                        {
                            "name": "projectEvent",
                            "type": "ProjectEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 244,
                    "jsdoctags": [
                        {
                            "name": "projectEvent",
                            "type": "ProjectEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiPersonFromProject",
                    "args": [
                        {
                            "name": "projectPerson",
                            "type": "ProjectPerson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 238,
                    "jsdoctags": [
                        {
                            "name": "projectPerson",
                            "type": "ProjectPerson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiTimelineFromProject",
                    "args": [
                        {
                            "name": "projectTimeline",
                            "type": "ProjectTimeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 232,
                    "jsdoctags": [
                        {
                            "name": "projectTimeline",
                            "type": "ProjectTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Project} from '../models/projects/project';\nimport {ProjectResponse} from '../models/projects/responses/project-response';\n\nimport { environment } from '../../environments/environment';\nimport {Observable} from 'rxjs';\nimport {Person} from '../models/persons/person';\nimport {ProjectPersonPost} from '../models/projects/posts/project-person-post';\nimport {Essay} from '../models/essays/essay';\nimport {ProjectEssayPost} from '../models/projects/posts/project-essay-post';\nimport {ProjectEssay} from '../models/projects/project-essay';\nimport {Timeline} from '../models/timelines/timeline';\nimport {ProjectTimelinePost} from '../models/projects/posts/project-timeline-post';\nimport {ProjectTimeline} from '../models/projects/project-timeline';\nimport {ProjectPerson} from '../models/projects/project-person';\nimport {ProjectEvent} from '../models/projects/project-event';\nimport {ProjectChart} from '../models/projects/project-chart';\nimport {ProjectBrainstorm} from '../models/projects/project-brainstorm';\nimport {Chart} from '../models/chart';\nimport {Brainstorm} from '../models/brainstorm';\nimport {ProjectEventPost} from '../models/projects/posts/project-event-post';\nimport {ProjectChartPost} from '../models/projects/posts/project-chart-post';\nimport {ProjectBrainstormPost} from '../models/projects/posts/project-brainstorm-post';\nimport {Event} from '../models/events/event';\nimport {ProjectPost} from '../models/projects/posts/project-post';\nimport {User} from '../models/user';\nimport {ProjectUserPost} from '../models/projects/posts/project-user-post';\nimport {UserResponse} from '../models/users/responses/user-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  private projects: Project[];\n  private project: Project;\n\n  private users: User[];\n\n  private projectPost: ProjectPost;\n  private projectPersonPost: ProjectPersonPost;\n  private projectEssayPost: ProjectEssayPost;\n  private projectTimelinePost: ProjectTimelinePost;\n  private projectBrainstormPost: ProjectBrainstormPost;\n  private projectEventPost: ProjectEventPost;\n  private projectChartPost: ProjectChartPost;\n  private projectUserPost: ProjectUserPost;\n\n  constructor(private http: HttpClient) {\n    this.projects = [];\n  }\n\n  setProject(project: Project) {\n    this.projects.push(project);\n  }\n\n  getProjects(): Project[] {\n    return this.projects;\n  }\n\n  createApiProject(project: Project): Observable<any> {\n    this.projectPost = new ProjectPost();\n    this.projectPost.mapToPost(project, false);\n\n    return this.http.post(environment.apiUrl + '/projects', this.projectPost, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json').set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  deleteApiProject(project: Project): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/projects/' + project.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  getApiProjects(path, userId): Observable<ProjectResponse> {\n    this.projects = [];\n\n    if (!path) {\n      path = '/projects';\n    }\n\n    let type = 'projects';\n    let filter = [];\n\n    if (userId) {\n      let userFilter = {\n        name: 'user_rel',\n        op: 'has',\n        val: {\n          name: 'id',\n          op: 'eq',\n          val: userId\n        }\n      };\n\n      filter.push(userFilter);\n\n      path = '/project_users?filter=' + JSON.stringify(filter);\n\n      type = 'user_projects';\n    }\n\n    return this.http.get<ProjectResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', type)\n    });\n  }\n\n  getApiProjectUsers(path, project: Project): Observable<UserResponse> {\n    this.users = [];\n\n    if (!path) {\n      path = '/project_users';\n    }\n\n    let filter = [];\n\n    let projectFilter = {\n      name: 'project_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: project.id\n      }\n    };\n\n    filter.push(projectFilter);\n\n    path = path + '?filter=' + JSON.stringify(filter);\n\n    return this.http.get<UserResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'item_user')\n    });\n  }\n\n  getApiProject(projectId: string): Observable<Project> {\n    return this.http.get<Project>(environment.apiUrl + '/projects/' + projectId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'project')\n    });\n  }\n\n  addUserToProject(project: Project, userId: string): Observable<any> {\n    this.projectUserPost = new ProjectUserPost();\n    this.projectUserPost.mapToPost(project, userId);\n\n    return this.http.post(environment.apiUrl + '/project_users', this.projectUserPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addApiPersonToProject(project: Project, person: Person): Observable<any> {\n    this.projectPersonPost = new ProjectPersonPost();\n    this.projectPersonPost.mapToPost(project, person);\n\n    return this.http.post(environment.apiUrl + '/project_persons', this.projectPersonPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addApiEssayToProject(project: Project, essay: Essay): Observable<any> {\n    this.projectEssayPost = new ProjectEssayPost();\n    this.projectEssayPost.mapToPost(project, essay);\n\n    return this.http.post(environment.apiUrl + '/project_essays', this.projectEssayPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addApiTimelineToProject(project: Project, timeline: Timeline): Observable<any> {\n    this.projectTimelinePost = new ProjectTimelinePost();\n    this.projectTimelinePost.mapToPost(project, timeline);\n\n    return this.http.post(environment.apiUrl + '/project_timelines', this.projectTimelinePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addApiEventToProject(project: Project, event: Event): Observable<any> {\n    this.projectEventPost = new ProjectEventPost();\n    this.projectEventPost.mapToPost(project, event);\n\n    return this.http.post(environment.apiUrl + '/project_events', this.projectEventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addApiChartToProject(project: Project, chart: Chart): Observable<any> {\n    this.projectChartPost = new ProjectChartPost();\n    this.projectChartPost.mapToPost(project, chart);\n\n    return this.http.post(environment.apiUrl + '/project_charts', this.projectChartPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addApiBrainstormToProject(project: Project, brainstorm: Brainstorm): Observable<any> {\n    this.projectBrainstormPost = new ProjectBrainstormPost();\n    this.projectBrainstormPost.mapToPost(project, brainstorm);\n\n    return this.http.post(environment.apiUrl + '/project_brainstorms', this.projectBrainstormPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiEssayFromProject(projectEssay: ProjectEssay): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/project_essays/' + projectEssay.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiTimelineFromProject(projectTimeline: ProjectTimeline): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/project_timelines/' + projectTimeline.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiPersonFromProject(projectPerson: ProjectPerson): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/project_persons/' + projectPerson.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiEventFromProject(projectEvent: ProjectEvent): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/project_events/' + projectEvent.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiChartFromProject(projectChart: ProjectChart): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/project_charts/' + projectChart.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiBrainstormFromProject(projectBrainstorm: ProjectBrainstorm): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/project_brainstorms/' + projectBrainstorm.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SourceService",
            "id": "injectable-SourceService-9eb97d0a846c86ca15de93b0da977793",
            "file": "src/app/services/source.service.ts",
            "properties": [
                {
                    "name": "noteBrainstormPost",
                    "type": "SourceNoteBrainstormPost",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "notePost",
                    "type": "SourceNotePost",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sourceAuthorPost",
                    "type": "SourceAuthorPost",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sourcePost",
                    "type": "SourcePost",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sources",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createApiSource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiSourceAuthor",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        },
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiSourceNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "SourceNote"
                        },
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiSourceNoteBrainstorm",
                    "args": [
                        {
                            "name": "note",
                            "type": "SourceNote"
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiSource",
                    "args": [
                        {
                            "name": "sourceId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Source>",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "sourceId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiSources",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SourceResponse>",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSources",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "patchApiSource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchApiSourceNote",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        },
                        {
                            "name": "note",
                            "type": "SourceNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 148,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "note",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "SourceNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiSource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeApiSourceAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAuthor",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        },
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeNote",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        },
                        {
                            "name": "note",
                            "type": "SourceNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "note",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeSource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\n\nimport { Source } from '../models/source';\nimport { Author } from '../models/author';\nimport { SourcePost } from '../models/posts/source-post';\nimport { SourceAuthorPost } from '../models/posts/source-author-post';\nimport {SourceNote} from '../models/source-note';\nimport {SourceNotePost} from '../models/posts/source-note-post';\nimport {SourceResponse} from '../models/responses/source-response';\nimport {SourceNoteBrainstormPost} from '../models/posts/source-note-brainstorm-post';\nimport {Brainstorm} from '../models/brainstorm';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SourceService {\n  private sourcePost: SourcePost;\n  private sourceAuthorPost: SourceAuthorPost;\n  private notePost: SourceNotePost;\n  private noteBrainstormPost: SourceNoteBrainstormPost;\n\n  private sources: Source[];\n  private source: Source;\n\n  constructor(private http: HttpClient) {\n    this.sources = [];\n  }\n\n  static removeNote(source: Source, note: SourceNote) {\n    for (let i = 0; i < source.notes.length; i++) {\n      if (source.notes[i].id === note.id) {\n        source.notes.splice(i, 1);\n      }\n    }\n  }\n\n  getSources() {\n    return this.sources;\n  }\n\n  setSource(source: Source) {\n    this.sources.push(source);\n  }\n\n  removeSource(source: Source) {\n    for (let i = 0; i < this.sources.length; i++) {\n      if (this.sources[i].id === source.id) {\n        this.sources.splice(i, 1);\n      }\n    }\n  }\n\n  removeAuthor(source: Source, author: Author) {\n    for (const loopedSource of this.sources) {\n      if (loopedSource.id === source.id) {\n        for (let j = 0; j < loopedSource.authors.length; j++) {\n          if (loopedSource.authors[j].id === author.id) {\n            loopedSource.authors.splice(j, 1);\n          }\n        }\n      }\n    }\n  }\n\n  getApiSources(path): Observable<SourceResponse> {\n    this.sources = [];\n\n    if (!path) {\n      path = '/references';\n    }\n\n    return this.http.get<SourceResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'sources')\n    });\n  }\n\n  getApiSource(sourceId): Observable<Source> {\n    return this.http.get<Source>(environment.apiUrl + '/references/' + sourceId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'source')\n    });\n  }\n\n  createApiSource(source: Source): Observable<any> {\n    this.sourcePost = new SourcePost();\n    this.sourcePost.mapToPost(source, false);\n\n    return this.http.post(environment.apiUrl + '/references', this.sourcePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiSource(source: Source): Observable<any> {\n    this.sourcePost = new SourcePost();\n    this.sourcePost.mapToPost(source, true);\n\n    return this.http.patch(environment.apiUrl + '/references/' + source.id, this.sourcePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiSourceAuthor(source: Source, author: Author): Observable<any> {\n    this.sourceAuthorPost = new SourceAuthorPost();\n    this.sourceAuthorPost.mapToPost(source, author);\n\n    return this.http.post(environment.apiUrl + '/reference_authors', this.sourceAuthorPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiSource(source: Source): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/references/' + source.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeApiSourceAuthor(author: Author): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/reference_authors/' + author.relationshipId, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  createApiSourceNote(note: SourceNote, source: Source): Observable<any> {\n    this.notePost = new SourceNotePost();\n    this.notePost.mapToPost(note, source, false);\n\n    return this.http.post(environment.apiUrl + '/reference_notes', this.notePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiSourceNote(source: Source, note: SourceNote): Observable<any> {\n    this.notePost = new SourceNotePost();\n    this.notePost.mapToPost(note, source, true);\n\n    return this.http.patch(environment.apiUrl + '/reference_notes/' + note.id, this.notePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createApiSourceNoteBrainstorm(note: SourceNote, brainstorm: Brainstorm): Observable<any> {\n    this.noteBrainstormPost = new SourceNoteBrainstormPost();\n    this.noteBrainstormPost.mapToPost(note, brainstorm, false);\n\n    return this.http.post(environment.apiUrl + '/reference_note_export_brainstorm_destinations', this.noteBrainstormPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n\n  removeApiNote(note: SourceNote): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/reference_notes/' + note.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TimelineService",
            "id": "injectable-TimelineService-2d88a2f3194f9fa86252ceaec3aad6d5",
            "file": "src/app/services/timeline.service.ts",
            "properties": [
                {
                    "name": "timelineCategoryEventPost",
                    "type": "TimelineCategoryEventPost",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelineCategoryPost",
                    "type": "TimelineCategoryPost",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelineEventPost",
                    "type": "TimelineEventPost",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelinePersonPost",
                    "type": "TimelinePersonPost",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelinePost",
                    "type": "TimelinePost",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelineUserPost",
                    "type": "TimelineUserPost",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUserToTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 257,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createApiTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 191,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCategoryApiTimeline",
                    "args": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 235,
                    "jsdoctags": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCategoryEventApiTimeline",
                    "args": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 246,
                    "jsdoctags": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEventApiTimeline",
                    "args": [
                        {
                            "name": "timelineEvent",
                            "type": "TimelineEvent"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 213,
                    "jsdoctags": [
                        {
                            "name": "timelineEvent",
                            "type": "TimelineEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPersonApiTimeline",
                    "args": [
                        {
                            "name": "personTimeline",
                            "type": "PersonTimeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 224,
                    "jsdoctags": [
                        {
                            "name": "personTimeline",
                            "type": "PersonTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiTimeline",
                    "args": [
                        {
                            "name": "timelineId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Timeline>",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "timelineId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiTimelines",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "userId",
                            "type": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "string"
                        },
                        {
                            "name": "pageNumber",
                            "type": "string"
                        },
                        {
                            "name": "fields",
                            "type": "Array<string>"
                        },
                        {
                            "name": "sort",
                            "type": "Array<string>"
                        },
                        {
                            "name": "sortDescending",
                            "type": "boolean"
                        },
                        {
                            "name": "additionalFilters",
                            "type": "Array<Object>"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TimelineResponse>",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fields",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Array<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortDescending",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "additionalFilters",
                            "type": "Array<Object>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiTimelineUsers",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserResponse>",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimelines",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 307
                },
                {
                    "name": "patchApiTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchEventApiTimeline",
                    "args": [
                        {
                            "name": "timelineEvent",
                            "type": "TimelineEvent"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 268,
                    "jsdoctags": [
                        {
                            "name": "timelineEvent",
                            "type": "TimelineEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCategoryApiTimeline",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 279,
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCategoryEventApiTimeline",
                    "args": [
                        {
                            "name": "categoryEventId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 297,
                    "jsdoctags": [
                        {
                            "name": "categoryEventId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEventApiTimeline",
                    "args": [
                        {
                            "name": "timelineEvent",
                            "type": "TimelineEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 285,
                    "jsdoctags": [
                        {
                            "name": "timelineEvent",
                            "type": "TimelineEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePersonApiTimeline",
                    "args": [
                        {
                            "name": "timelinePerson",
                            "type": "TimelinePerson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 291,
                    "jsdoctags": [
                        {
                            "name": "timelinePerson",
                            "type": "TimelinePerson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\n\nimport { Timeline } from '../models/timelines/timeline';\nimport { Event } from '../models/events/event';\nimport { TimelineEvent } from '../models/timelines/timeline-event';\nimport { TimelinePerson } from '../models/timelines/timeline-person';\n\nimport { TimelinePost } from '../models/posts/timeline-post';\nimport { TimelineEventPost } from '../models/posts/timeline-event-post';\nimport { TimelinePersonPost } from '../models/posts/timeline-person-post';\nimport { TimelineCategoryPost } from '../models/posts/timeline-category-post';\n\nimport {TimelineResponse} from '../models/responses/timeline-response';\n\nimport {TimelineCategory} from '../models/timelines/timeline-category';\nimport {TimelineCategoryEventPost} from '../models/posts/timeline-category-event-post';\nimport {PersonTimeline} from '../models/persons/person-timeline';\nimport {TimelineUserPost} from '../models/timelines/posts/timeline-user-post';\nimport {UserResponse} from '../models/users/responses/user-response';\nimport {User} from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TimelineService {\n  private timelines: Timeline[];\n  private users: User[];\n  private timelinePost: TimelinePost;\n  private timelineEventPost: TimelineEventPost;\n  private timelinePersonPost: TimelinePersonPost;\n  private timelineCategoryPost: TimelineCategoryPost;\n  private timelineCategoryEventPost: TimelineCategoryEventPost;\n  private timelineUserPost: TimelineUserPost;\n\n  constructor(private http: HttpClient) {\n    this.users = [];\n  }\n\n  getApiTimelines(path,\n                  userId,\n                  pageSize: string,\n                  pageNumber: string,\n                  fields: Array<string>,\n                  sort: Array<string>,\n                  sortDescending: boolean,\n                  additionalFilters: Array<Object>,\n                  isAnotherPage: boolean): Observable<TimelineResponse> {\n\n    this.timelines = [];\n\n    let type = 'timelines';\n\n    // if a next of previous page is being retrieved just all the path as is\n    if (!isAnotherPage) {\n      if (!path) {\n        path = '/timelines';\n      }\n\n      // default page size is 20 records per page\n      if (!pageSize) {\n        pageSize = '20';\n      }\n\n      // default page number to 1\n      if (!pageNumber) {\n        pageNumber = '1';\n      }\n\n      let filter = [];\n\n      if (userId) {\n        let userFilter = {\n          name: 'user_rel',\n          op: 'has',\n          val: {\n            name: 'id',\n            op: 'eq',\n            val: userId\n          }\n        };\n\n        filter.push(userFilter);\n\n        path = '/timeline_users';\n\n        type = 'user_timelines';\n      }\n\n      path = path + '?page[size]=' + pageSize;\n\n      path = path + '&page[number]=' + pageNumber;\n\n      // add any fields filter to the path\n      if (fields && fields.length) {\n        path = path + '&fields[timeline]=';\n\n        for (let i = 0; i < fields.length; i++) {\n          path = path + fields[i];\n\n          if (i < fields.length -1) {\n            path = path + ',';\n          }\n        }\n      }\n\n      // add any sorting if requested\n      if (sort && sort.length) {\n        path = path + '&sort=';\n\n        if (sortDescending) {\n          path = path + '-';\n        }\n\n        for (let i = 0; i < sort.length; i++) {\n          path = path + sort[i];\n\n          if (i < sort.length - 1) {\n            path = path + ',';\n          }\n        }\n      }\n\n      // lastly tack on any additional filters passed\n      if (additionalFilters && additionalFilters.length) {\n        for (const additionalFilter of additionalFilters) {\n          filter.push(additionalFilter);\n        }\n      }\n\n      if (filter.length) {\n        path = path + '&filter=' + JSON.stringify(filter);\n      }\n    } else {\n      // set the type to user if the next page are user timelines\n      if (path.includes('/timeline_users')) {\n        type = 'user_timelines';\n      }\n    }\n\n    return this.http.get<TimelineResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', type)\n    });\n  }\n\n  getApiTimeline(timelineId): Observable<Timeline> {\n    return this.http.get<Timeline>(environment.apiUrl + '/timelines/' + timelineId, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'timeline')\n    });\n  }\n\n  getApiTimelineUsers(path: string, timeline: Timeline): Observable<UserResponse> {\n    this.users = [];\n\n    if (!path) {\n      path = '/timeline_users';\n    }\n\n    let filter = [];\n\n    let timelineFilter = {\n      name: 'timeline_rel',\n      op: 'has',\n      val: {\n        name: 'id',\n        op: 'eq',\n        val: timeline.id\n      }\n    };\n\n    filter.push(timelineFilter);\n\n    path = path + '?filter=' + JSON.stringify(filter);\n\n    return this.http.get<UserResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'item_user')\n    });\n  }\n\n  createApiTimeline(timeline: Timeline): Observable<any> {\n    this.timelinePost = new TimelinePost();\n    this.timelinePost.mapToPost(timeline, false);\n\n    return this.http.post(environment.apiUrl + '/timelines', this.timelinePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchApiTimeline(timeline: Timeline): Observable<any> {\n    this.timelinePost = new TimelinePost();\n    this.timelinePost.mapToPost(timeline, true);\n\n    return this.http.patch(environment.apiUrl + '/timelines/' + timeline.id, this.timelinePost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createEventApiTimeline(timelineEvent: TimelineEvent, timeline: Timeline): Observable<any> {\n    this.timelineEventPost = new TimelineEventPost();\n    this.timelineEventPost.mapToPost(timelineEvent.event, timeline, timelineEvent.isShadow, timelineEvent.priority, false, null);\n\n    return this.http.post(environment.apiUrl + '/timeline_events', this.timelineEventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createPersonApiTimeline(personTimeline: PersonTimeline): Observable<any> {\n    this.timelinePersonPost = new TimelinePersonPost();\n    this.timelinePersonPost.mapToPost(personTimeline, false);\n\n    return this.http.post(environment.apiUrl + '/timeline_persons', this.timelinePersonPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createCategoryApiTimeline(timelineCategory: TimelineCategory, timeline: Timeline): Observable<any> {\n    this.timelineCategoryPost = new TimelineCategoryPost();\n    this.timelineCategoryPost.mapToPost(timelineCategory, timeline);\n\n    return this.http.post(environment.apiUrl + '/timeline_categories', this.timelineCategoryPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  createCategoryEventApiTimeline(timelineCategory: TimelineCategory, event: Event): Observable<any> {\n    this.timelineCategoryEventPost = new TimelineCategoryEventPost();\n    this.timelineCategoryEventPost.mapToPost(timelineCategory, event);\n\n    return this.http.post(environment.apiUrl + '/timeline_category_events', this.timelineCategoryEventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  addUserToTimeline(timeline: Timeline, userId: string): Observable<any> {\n    this.timelineUserPost = new TimelineUserPost();\n    this.timelineUserPost.mapToPost(timeline, userId);\n\n    return this.http.post(environment.apiUrl + '/timeline_users', this.timelineUserPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  patchEventApiTimeline(timelineEvent: TimelineEvent, timeline: Timeline): Observable<any> {\n    this.timelineEventPost = new TimelineEventPost();\n    this.timelineEventPost.mapToPost(timelineEvent.event, timeline, timelineEvent.isShadow, timelineEvent.priority, true, timelineEvent.id);\n\n    return this.http.patch(environment.apiUrl + '/timeline_events/' + timelineEvent.id, this.timelineEventPost, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Content-Type', 'application/vnd.api+json')\n    });\n  }\n\n  removeCategoryApiTimeline(categoryId: number): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/timeline_categories/' + categoryId, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeEventApiTimeline(timelineEvent: TimelineEvent): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/timeline_events/' + timelineEvent.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removePersonApiTimeline(timelinePerson: TimelinePerson): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/timeline_persons/' + timelinePerson.id, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  removeCategoryEventApiTimeline(categoryEventId: number): Observable<any> {\n    return this.http.delete(environment.apiUrl + '/timeline_category_events/' + categoryEventId, {\n      headers: new HttpHeaders().set('Accept', 'application/vnd.api+json')\n    });\n  }\n\n  setTimeline(timeline: Timeline) {\n    this.timelines.push(timeline);\n  }\n\n  getTimelines() {\n    return this.timelines;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-b521503a3c0a55ad1800fbd9b266ab67",
            "file": "src/app/services/user.service.ts",
            "properties": [
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getApiUsers",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserResponse>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoggedInUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "setSingleUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { environment } from '../../environments/environment';\nimport {User} from '../models/user';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {UserResponse} from '../models/users/responses/user-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  public users: User[];\n  public user: User;\n\n  constructor(private http: HttpClient) {\n    this.users = [];\n  }\n\n  getApiUsers(path): Observable<UserResponse> {\n    this.users = [];\n\n    if (!path) {\n      path = '/users';\n    }\n\n    return this.http.get<UserResponse>(environment.apiUrl + path, {\n      headers: new HttpHeaders()\n        .set('Accept', 'application/vnd.api+json')\n        .set('Type', 'users')\n    });\n  }\n\n  setUser(user: User) {\n    this.users.push(user);\n  }\n\n  setSingleUser(user: User) {\n    this.user = user;\n  }\n\n  getUsers() {\n    return this.users;\n  }\n\n  getUser() {\n    return this.user;\n  }\n\n  getLoggedInUser() {\n    let loggedInUser = new User();\n    loggedInUser.initializeNewUser();\n\n    loggedInUser.id = localStorage.getItem('user.id');\n    loggedInUser.firstName = localStorage.getItem('user.firstName');\n    loggedInUser.lastName = localStorage.getItem('user.lastName');\n\n    return loggedInUser;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-4ee91dad524760153d3c0f6f0014153c",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get(browser.baseUrl) as Promise<any>;\n  }\n\n  getTitleText() {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Auth",
            "id": "class-Auth-2c99dc2539be4d6c4f31e8e2431e3bd0",
            "file": "src/app/models/auth.ts",
            "type": "class",
            "sourceCode": "export class Auth {\n  id: number;\n  user: string;\n  password: string;\n  token: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Author",
            "id": "class-Author-801f0faba8f94a52a3a38ee05dee73d8",
            "file": "src/app/models/author.ts",
            "type": "class",
            "sourceCode": "export class Author {\n  id: number;\n  relationshipId: number;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n\n  // author: the response author data object\n  // relationshipId: the author/reference relationship id that IDs the author to a specific relationship\n\n  mapAuthor(author, relationshipId) {\n    // relationship ID will only be passed if author object is being looked up on a specific reference. Check if unidentified.\n    if (!relationshipId) {\n      relationshipId = 0;\n    }\n\n    this.id = author.id;\n    this.relationshipId = relationshipId;\n    this.firstName = author.attributes.first_name;\n    this.middleName = author.attributes.middle_name;\n    this.lastName = author.attributes.last_name;\n  }\n\n  initializeAuthor() {\n    this.firstName = '';\n    this.middleName = '';\n    this.lastName = '';\n  }\n}\n",
            "properties": [
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "middleName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "relationshipId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeAuthor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "mapAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": ""
                        },
                        {
                            "name": "relationshipId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relationshipId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthorPost",
            "id": "class-AuthorPost-6295ca2ec7301f8bef7a28ff28868741",
            "file": "src/app/models/posts/author-post.ts",
            "type": "class",
            "sourceCode": "import { Author } from '../author';\n\nexport class AuthorPost {\n  data;\n\n  mapToPost(author: Author, isPatch: boolean) {\n    this.data = {\n      type: 'author',\n      attributes: {\n        first_name: author.firstName,\n        middle_name: author.middleName,\n        last_name: author.lastName\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = author.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthorResponse",
            "id": "class-AuthorResponse-6b0604c9b87e5a034f3fb018304b3ad1",
            "file": "src/app/models/responses/author-response.ts",
            "type": "class",
            "sourceCode": "import {Author} from '../author';\n\nexport class AuthorResponse {\n  authors: Author[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AxesOptions",
            "id": "class-AxesOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "display",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 371
                },
                {
                    "name": "ticks",
                    "type": "TickOptions",
                    "optional": false,
                    "description": "",
                    "line": 372
                }
            ],
            "methods": [
                {
                    "name": "initializeNewAxesOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Brainstorm",
            "id": "class-Brainstorm-26727aa37f144f7b8f50beaa58d900f8",
            "file": "src/app/models/brainstorm.ts",
            "type": "class",
            "sourceCode": "import { environment } from '../../environments/environment';\n\nimport {BrainstormTopic} from './brainstorm-topic';\nimport {BrainstormThought} from './brainstorm-thought';\n\nexport class Brainstorm {\n  id: number;\n  title: string;\n  description: string;\n  image: string;\n\n  topics: BrainstormTopic[];\n  thoughts: BrainstormThought[];\n\n  initializeNewBrainstorm() {\n    this.title = '';\n    this.description = '';\n    this.image = 'https://s3.us-east-2.amazonaws.com/' + environment.s3Bucket + '/brainstorm-default.png';\n    this.topics = [];\n    this.thoughts = [];\n  }\n\n  mapBrainstorm(brainstorm) {\n    this.id = brainstorm.id;\n\n    this.title = brainstorm.attributes.title;\n    this.description = brainstorm.attributes.description;\n\n    if (brainstorm.attributes.brainstorm_thought && brainstorm.attributes.brainstorm_thought.data.length) {\n      for (const thought of brainstorm.attributes.brainstorm_thought.data) {\n        const newThought = new BrainstormThought();\n        newThought.initializeNewThought();\n        newThought.mapThought(thought);\n\n        this.thoughts.push(newThought);\n      }\n    }\n\n    if (brainstorm.attributes.brainstorm_topic && brainstorm.attributes.brainstorm_topic.data.length) {\n      for (const topic of brainstorm.attributes.brainstorm_topic.data) {\n        const newTopic = new BrainstormTopic();\n        newTopic.initializeNewTopic();\n        newTopic.mapTopic(topic);\n\n        this.topics.push(newTopic);\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "thoughts",
                    "type": "BrainstormThought[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "topics",
                    "type": "BrainstormTopic[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "initializeNewBrainstorm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "mapBrainstorm",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormPost",
            "id": "class-BrainstormPost-b99126597e8d48cc20cc27317aba57df",
            "file": "src/app/models/posts/brainstorm-post.ts",
            "type": "class",
            "sourceCode": "import {Brainstorm} from '../brainstorm';\nexport class BrainstormPost {\n  data: any;\n\n  mapToPost(brainstorm: Brainstorm, isPatch: boolean) {\n    this.data = {\n      type: 'brainstorm',\n      attributes: {\n        title: brainstorm.title\n      }\n    };\n\n    if (brainstorm.description) {\n      this.data.attributes.description = brainstorm.description;\n    }\n\n    if (isPatch) {\n      this.data.id = brainstorm.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormResponse",
            "id": "class-BrainstormResponse-60015e585037ab88d112b79bd88e3f98",
            "file": "src/app/models/responses/brainstorm-response.ts",
            "type": "class",
            "sourceCode": "import {Brainstorm} from '../brainstorm';\n\nexport class BrainstormResponse {\n  brainstorms: Brainstorm[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "brainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormThought",
            "id": "class-BrainstormThought-08a34d8e95356bab4f78ecfc05b18a36",
            "file": "src/app/models/brainstorm-thought.ts",
            "type": "class",
            "sourceCode": "import {Source} from './source';\n\nexport class BrainstormThought {\n  id: number;\n  thought: string;\n  position: number;\n\n  source: Source;\n  page: number;\n  chapter: string;\n\n  topicId: number;\n  brainstormId: number;\n\n  initializeNewThought() {\n    this.thought = '';\n    this.position = null;\n\n    this.source = new Source();\n    this.source.initializeSource();\n\n    this.page = null;\n    this.chapter = null;\n\n    this.topicId = null;\n    this.brainstormId = null;\n  }\n\n  mapThought(thought) {\n    this.id = thought.id;\n\n    this.thought = thought.attributes.thought;\n    this.position = thought.attributes.position;\n\n    if (thought.attributes.reference) {\n      this.source = this.source.mapSource(thought.attributes.reference.data);\n    } else {\n      this.source = null;\n    }\n\n    if (thought.attributes.page) {\n      this.page = thought.attributes.page;\n    }\n\n    if (thought.attributes.chapter) {\n      this.chapter = thought.attributes.chapter;\n    }\n\n    if (thought.attributes.brainstorm_topic_fk) {\n      this.topicId = thought.attributes.brainstorm_topic_fk;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "brainstormId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "chapter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "position",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "thought",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "topicId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "initializeNewThought",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "mapThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormThoughtPost",
            "id": "class-BrainstormThoughtPost-618f9fe9272b247f828be9f8aa55639b",
            "file": "src/app/models/posts/brainstorm-thought-post.ts",
            "type": "class",
            "sourceCode": "import {BrainstormThought} from '../brainstorm-thought';\n\nexport class BrainstormThoughtPost {\n  data: any;\n\n  mapToPost(brainstormThought: BrainstormThought, isPatch: boolean) {\n    this.data = {\n      type: 'brainstorm_thought',\n      attributes: {\n        thought: brainstormThought.thought,\n        position: brainstormThought.position\n      }\n    };\n\n    if (brainstormThought.brainstormId) {\n      this.data.attributes.brainstorm_rel = {\n        data: {\n          type: 'brainstorm',\n          id: brainstormThought.brainstormId\n        }\n      };\n    }\n\n    if (isPatch) {\n      this.data.id = brainstormThought.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "brainstormThought",
                            "type": "BrainstormThought"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "brainstormThought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormTopic",
            "id": "class-BrainstormTopic-cd9bf43d6c9612f8c1c9d69d3f17fa92",
            "file": "src/app/models/brainstorm-topic.ts",
            "type": "class",
            "sourceCode": "import {BrainstormThought} from './brainstorm-thought';\n\nexport class BrainstormTopic {\n  id: number;\n  label: string;\n  position: number;\n\n  thoughts: BrainstormThought[];\n\n  initializeNewTopic() {\n    this.label = '';\n    this.position = null;\n    this.thoughts = [];\n  }\n\n  mapTopic(topic) {\n    this.id = parseInt(topic.id, 10);\n    this.label = topic.attributes.label;\n    this.position = topic.attributes.position;\n\n    if (topic.attributes.brainstorm_topic_thought.data.length) {\n      for (const thought of topic.attributes.brainstorm_topic_thought.data) {\n        const newThought = new BrainstormThought();\n        newThought.initializeNewThought();\n        newThought.mapThought(thought);\n\n        this.thoughts.push(newThought);\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "position",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "thoughts",
                    "type": "BrainstormThought[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTopic",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                },
                {
                    "name": "mapTopic",
                    "args": [
                        {
                            "name": "topic",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "topic",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormTopicPost",
            "id": "class-BrainstormTopicPost-eb56a837ee4af9f84dfff9c61ef8a943",
            "file": "src/app/models/posts/brainstorm-topic-post.ts",
            "type": "class",
            "sourceCode": "import {BrainstormTopic} from '../brainstorm-topic';\nimport {Brainstorm} from '../brainstorm';\n\nexport class BrainstormTopicPost {\n  data;\n\n  mapToPost(brainstorm: Brainstorm, brainstormTopic: BrainstormTopic, isPatch: boolean) {\n    this.data = {\n      type: 'brainstorm_topic',\n      attributes: {\n        label: brainstormTopic.label,\n        position: brainstormTopic.position\n      }\n    };\n\n    if (brainstorm) {\n      this.data.attributes.brainstorm_rel = {\n        data: {\n          type: 'brainstorm',\n          id: brainstorm.id\n        }\n      };\n    }\n\n    if (isPatch) {\n      this.data.id = brainstormTopic.id.toString();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        },
                        {
                            "name": "brainstormTopic",
                            "type": "BrainstormTopic"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "brainstormTopic",
                            "type": "BrainstormTopic",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormTopicThoughtPost",
            "id": "class-BrainstormTopicThoughtPost-2cb4a5de4e6269c56ce2afcbb3531df8",
            "file": "src/app/models/posts/brainstorm-topic-thought-post.ts",
            "type": "class",
            "sourceCode": "import {BrainstormThought} from '../brainstorm-thought';\n\nexport class BrainstormTopicThoughtPost {\n  data;\n\n  mapToPost(brainstormThought: BrainstormThought, isPatch: boolean) {\n    this.data = {\n      type: 'brainstorm_topic_thought',\n      attributes: {\n        thought: brainstormThought.thought,\n        position: brainstormThought.position,\n      }\n    };\n\n    if (brainstormThought.topicId) {\n      this.data.attributes.brainstorm_topic_rel = {\n        data: {\n          type: 'brainstorm_topic',\n          id: brainstormThought.topicId\n        }\n      };\n    }\n\n    if (isPatch) {\n      this.data.id = brainstormThought.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "brainstormThought",
                            "type": "BrainstormThought"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "brainstormThought",
                            "type": "BrainstormThought",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BrainstormUserPost",
            "id": "class-BrainstormUserPost-da3fc999d7c7fc679155113467eba22d",
            "file": "src/app/models/brainstorms/posts/brainstorm-user-post.ts",
            "type": "class",
            "sourceCode": "import {Brainstorm} from '../../brainstorm';\n\nexport class BrainstormUserPost {\n  data: any;\n\n  mapToPost(brainstorm: Brainstorm, userId: string) {\n    this.data = {\n      type: 'brainstorm_user',\n      attributes: {\n        brainstorm_rel: {\n          data: {\n            type: 'brainstorm',\n            id: brainstorm.id\n          }\n        },\n\n        user_rel: {\n          data: {\n            type: 'user',\n            id: userId\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Category",
            "id": "class-Category-aede993fc5a7110b0145f66784628852",
            "file": "src/app/models/category.ts",
            "type": "class",
            "sourceCode": "import {Person} from './persons/person';\nimport {Event} from './events/event';\n\nexport class Category {\n  id: number;\n  label: string;\n  singlePointEvents: Event[] = [];\n  multiPointEvents: Event[] = [];\n  people: Person[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "multiPointEvents",
                    "defaultValue": "[]",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "people",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "singlePointEvents",
                    "defaultValue": "[]",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Chart",
            "id": "class-Chart-80d3fa9160394bcaa2020bd5dade6c08",
            "file": "src/app/models/chart.ts",
            "type": "class",
            "sourceCode": "import {ChartType} from '../enums/chart-types';\nimport {ChartLabel} from './chart-label';\nimport {ChartDataset} from './chart-dataset';\nimport {ChartOptions} from './chart-options';\n\nexport class Chart {\n  id: number;\n\n  title: string;\n  type: ChartType;\n\n  labels: ChartLabel[];\n  datasets: ChartDataset[];\n\n  options: ChartOptions;\n\n  initializeNewChart() {\n    this.title = 'New Chart';\n    this.type = ChartType.LINE;\n\n    this.labels = [];\n    this.datasets = [];\n\n    const initialLabel = new ChartLabel();\n    initialLabel.initializeNewChartLabel();\n\n    this.labels.push(initialLabel);\n    this.labels.push(initialLabel);\n\n    const initialDataset = new ChartDataset();\n    initialDataset.initializeNewDataset();\n\n    this.datasets.push(initialDataset);\n\n    this.options = new ChartOptions();\n    this.options.initializeNewOptions();\n  }\n\n  mapChart(chart: any) {\n    this.id = chart.id;\n\n    this.title = chart.attributes.title;\n\n    if (chart.attributes.type === ChartType.LINE) {\n      this.type = ChartType.LINE;\n    } else if (chart.attributes.type === ChartType.BAR) {\n      this.type = ChartType.BAR;\n    } else if (chart.attributes.type === ChartType.HORIZONTAL_BAR) {\n      this.type = ChartType.HORIZONTAL_BAR;\n    } else if (chart.attributes.type === ChartType.PIE) {\n      this.type = ChartType.PIE;\n    } else if (chart.attributes.type === ChartType.DOUGHNUT) {\n      this.type = ChartType.DOUGHNUT;\n    } else if (chart.attributes.type === ChartType.POLAR_AREA) {\n      this.type = ChartType.POLAR_AREA;\n    } else if (chart.attributes.type === ChartType.RADAR) {\n      this.type = ChartType.RADAR;\n    }\n\n    if (chart.attributes.chart_label && chart.attributes.chart_label.data.length) {\n      this.labels = [];\n\n      for (const chartLabel of chart.attributes.chart_label.data) {\n        const newChartLabel = new ChartLabel();\n        newChartLabel.initializeNewChartLabel();\n        newChartLabel.mapChartLabel(chartLabel);\n\n        newChartLabel.label = chartLabel.attributes.label;\n\n        this.labels.push(newChartLabel);\n      }\n    }\n\n    if (chart.attributes.chart_dataset && chart.attributes.chart_dataset.data.length) {\n      this.datasets = [];\n\n      for (const dataset of chart.attributes.chart_dataset.data) {\n        const newDataset = new ChartDataset();\n        newDataset.initializeNewDataset();\n        newDataset.mapDataSet(dataset);\n\n        this.datasets.push(newDataset);\n      }\n    }\n\n    if (chart.attributes.chart_options && chart.attributes.chart_options.data.length) {\n      const options = new ChartOptions();\n      options.initializeNewOptions();\n\n      options.mapOptions(chart.attributes.chart_options.data[0]);\n\n      this.options = options;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "datasets",
                    "type": "ChartDataset[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "labels",
                    "type": "ChartLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "options",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "initializeNewChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "mapChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartDataset",
            "id": "class-ChartDataset-34d044b725218af72d6b7830c53af7fb",
            "file": "src/app/models/chart-dataset.ts",
            "type": "class",
            "sourceCode": "import {ChartDatasetData} from './chart-dataset-data';\n\nexport class ChartDataset {\n  id: number;\n  label: string;\n  data: ChartDatasetData[];\n  backgroundColor: string;\n  fill: boolean;\n  borderColor: string;\n  pointRadius: number;\n  pointBackgroundColor: string;\n\n  initializeNewDataset() {\n    this.label = 'Auto Generated Dataset';\n    this.data = [];\n    this.backgroundColor = '#d56767';\n    this.borderColor = '#6666ff';\n    this.fill = false;\n    this.pointRadius = 3;\n    this.pointBackgroundColor = '#51ff86';\n\n    const initialData = new ChartDatasetData();\n    initialData.initializeNewDatasetData();\n\n    this.data.push(initialData);\n    this.data.push(initialData);\n  }\n\n  mapDataSet(dataset) {\n    this.id = dataset.id;\n    this.label = dataset.attributes.label;\n\n    if (dataset.attributes.background_color) {\n      this.backgroundColor = dataset.attributes.background_color;\n    }\n\n    if (dataset.attributes.border_color) {\n      this.borderColor = dataset.attributes.border_color;\n    }\n\n    this.fill = dataset.attributes.fill;\n\n    if (dataset.attributes.point_radius) {\n      this.pointRadius = dataset.attributes.point_radius;\n    }\n\n    if (dataset.attributes.point_background_color) {\n      this.pointBackgroundColor = dataset.attributes.point_background_color;\n    }\n\n    if (dataset.attributes.chart_dataset_data && dataset.attributes.chart_dataset_data.data.length) {\n      this.data = [];\n\n      for (const datasetData of dataset.attributes.chart_dataset_data.data) {\n        const newDatasetData = new ChartDatasetData();\n        newDatasetData.initializeNewDatasetData();\n        newDatasetData.mapDatasetData(datasetData);\n\n        this.data.push(newDatasetData);\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "borderColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "data",
                    "type": "ChartDatasetData[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fill",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pointBackgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "pointRadius",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "initializeNewDataset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "mapDataSet",
                    "args": [
                        {
                            "name": "dataset",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartDatasetData",
            "id": "class-ChartDatasetData-2a7193051f28879eec91022dadabd7af",
            "file": "src/app/models/chart-dataset-data.ts",
            "type": "class",
            "sourceCode": "export class ChartDatasetData {\n  id: number;\n\n  xData: number;\n  yData: number;\n  rData: number;\n\n  color: string;\n  label: string;\n\n  initializeNewDatasetData() {\n    this.xData = 1;\n    this.yData = 1;\n    this.rData = 1;\n\n    this.color = '#232bc4';\n    this.label = 'Temp Label';\n  }\n\n  mapDatasetData(datasetData) {\n    this.id = datasetData.id;\n\n    if (datasetData.attributes.x_data) {\n      this.xData = datasetData.attributes.x_data;\n    }\n\n    if (datasetData.attributes.y_data) {\n      this.yData = datasetData.attributes.y_data;\n    }\n\n    if (datasetData.attributes.r_data) {\n      this.rData = datasetData.attributes.r_data;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rData",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "xData",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "yData",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeNewDatasetData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "mapDatasetData",
                    "args": [
                        {
                            "name": "datasetData",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "datasetData",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartDatasetDataPost",
            "id": "class-ChartDatasetDataPost-d04c4dba667d07d17e1c0bc125383c32",
            "file": "src/app/models/posts/chart-dataset-data-post.ts",
            "type": "class",
            "sourceCode": "import {ChartDataset} from '../chart-dataset';\nimport {ChartDatasetData} from '../chart-dataset-data';\nexport class ChartDatasetDataPost {\n  data: any;\n\n  mapToPost(chartDataset: ChartDataset, datasetData: ChartDatasetData, isPatch: boolean) {\n    this.data = {\n      type: 'chart_dataset_data',\n      attributes: {\n        x_data: datasetData.xData,\n\n        chart_dataset_rel: {\n          data: {\n            type: 'chart_dataset',\n            id: chartDataset.id\n          }\n        }\n      }\n    };\n\n    if (datasetData.yData) {\n      this.data.attributes.y_data = datasetData.yData;\n    }\n\n    if (datasetData.rData) {\n      this.data.attributes.r_data = datasetData.rData;\n    }\n\n    if (isPatch) {\n      this.data.id = datasetData.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset"
                        },
                        {
                            "name": "datasetData",
                            "type": "ChartDatasetData"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datasetData",
                            "type": "ChartDatasetData",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartDatasetPost",
            "id": "class-ChartDatasetPost-d252838712603e57d713a3ed47a114ed",
            "file": "src/app/models/posts/chart-dataset-post.ts",
            "type": "class",
            "sourceCode": "import {ChartDataset} from '../chart-dataset';\nimport {Chart} from '../chart';\nexport class ChartDatasetPost {\n  data: any;\n\n  mapToPost(chart: Chart, chartDataset: ChartDataset, isPatch: boolean) {\n    this.data = {\n      type: 'chart_dataset',\n      attributes: {\n        label: chartDataset.label,\n        fill: chartDataset.fill,\n        background_color: chartDataset.backgroundColor,\n        border_color: chartDataset.borderColor,\n        point_radius: chartDataset.pointRadius,\n        point_background_color: chartDataset.pointBackgroundColor,\n\n        chart_rel: {\n          data: {\n            type: 'chart',\n            id: chart.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = chartDataset.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartDataset",
                            "type": "ChartDataset",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartLabel",
            "id": "class-ChartLabel-ab5a24e305356de8b18914725ba8f9e2",
            "file": "src/app/models/chart-label.ts",
            "type": "class",
            "sourceCode": "export class ChartLabel {\n  id: number;\n  label: string;\n\n  initializeNewChartLabel() {\n    this.label = 'Auto Generated Label';\n  }\n\n  mapChartLabel(label) {\n    this.id = label.id;\n    this.label = label.attributes.label;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeNewChartLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "mapChartLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartLabelPost",
            "id": "class-ChartLabelPost-4276b2b17bda60ba7268f8126e386e01",
            "file": "src/app/models/posts/chart-label-post.ts",
            "type": "class",
            "sourceCode": "import {ChartLabel} from '../chart-label';\nimport {Chart} from '../chart';\n\nexport class ChartLabelPost {\n  data: any;\n\n  mapToPost(chart: Chart, chartLabel: ChartLabel, isPatch: boolean) {\n    this.data = {\n      type: 'chart_label',\n      attributes: {\n        label: chartLabel.label,\n\n        chart_rel: {\n          data: {\n            type: 'chart',\n            id: chart.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = chartLabel.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartLabel",
                            "type": "ChartLabel"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLabel",
                            "type": "ChartLabel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartLegendLabelOptionsPost",
            "id": "class-ChartLegendLabelOptionsPost-4da5b2f348d16a48e52516cb87347a6e",
            "file": "src/app/models/posts/chart-legend-label-options-post.ts",
            "type": "class",
            "sourceCode": "import {LegendLabelOptions, LegendOptions} from '../chart-options';\nexport class ChartLegendLabelOptionsPost {\n  data: any;\n\n  mapToPost(chartLegendOptions: LegendOptions, chartLegendLabelOptions: LegendLabelOptions, isPatch: boolean) {\n    this.data = {\n      type: 'chart_legend_label_options',\n      attributes: {\n        box_width: chartLegendLabelOptions.boxWidth,\n        padding: chartLegendLabelOptions.padding,\n        use_point_style: chartLegendLabelOptions.usePointStyle,\n        font_size: chartLegendLabelOptions.fontSize,\n        font_family: chartLegendLabelOptions.fontFamily,\n        font_style: chartLegendLabelOptions.fontStyle,\n        font_color: chartLegendLabelOptions.fontColor,\n\n        chart_legend_options_rel: {\n          data: {\n            type: 'chart_legend_options',\n            id: chartLegendOptions.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = chartLegendLabelOptions.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chartLegendOptions",
                            "type": "LegendOptions"
                        },
                        {
                            "name": "chartLegendLabelOptions",
                            "type": "LegendLabelOptions"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "chartLegendOptions",
                            "type": "LegendOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartLegendLabelOptions",
                            "type": "LegendLabelOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartLegendOptionsPost",
            "id": "class-ChartLegendOptionsPost-b4199131a61a1ad5436e755c3d36e2f2",
            "file": "src/app/models/posts/chart-legend-options-post.ts",
            "type": "class",
            "sourceCode": "import {ChartOptions, LegendOptions} from '../chart-options';\n\nexport class ChartLegendOptionsPost {\n  data: any;\n\n  mapToPost(chartOptions: ChartOptions, legendOptions: LegendOptions, isPatch: boolean) {\n    this.data = {\n      type: 'chart_legend_options',\n      attributes: {\n        display: legendOptions.display,\n        position: legendOptions.position,\n        align: legendOptions.align,\n        full_width: legendOptions.fullWidth,\n        reverse: legendOptions.reverse,\n\n        chart_options_rel: {\n          data: {\n            type: 'chart_options',\n            id: chartOptions.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = legendOptions.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "legendOptions",
                            "type": "LegendOptions"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "legendOptions",
                            "type": "LegendOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartOptions",
            "id": "class-ChartOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 403
                },
                {
                    "name": "legend",
                    "type": "LegendOptions",
                    "optional": false,
                    "description": "",
                    "line": 408
                },
                {
                    "name": "maintainAspectRatio",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 405
                },
                {
                    "name": "responsive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 404
                },
                {
                    "name": "scales",
                    "type": "ScalesOptions",
                    "optional": false,
                    "description": "",
                    "line": 411
                },
                {
                    "name": "title",
                    "type": "TitleOptions",
                    "optional": false,
                    "description": "",
                    "line": 407
                },
                {
                    "name": "tooltips",
                    "type": "TooltipOptions",
                    "optional": false,
                    "description": "",
                    "line": 409
                }
            ],
            "methods": [
                {
                    "name": "initializeNewOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413
                },
                {
                    "name": "mapOptions",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 430,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartOptionsPost",
            "id": "class-ChartOptionsPost-5c92d25b7eeb454d8903ea6982064fb5",
            "file": "src/app/models/posts/chart-options-post.ts",
            "type": "class",
            "sourceCode": "import {ChartOptions} from '../chart-options';\nimport {Chart} from '../chart';\n\nexport class ChartOptionsPost {\n  data: any;\n\n  mapToPost(chart: Chart, chartOptions: ChartOptions, isPatch: boolean) {\n    this.data = {\n      type: 'chart_options',\n      attributes: {\n        responsive: chartOptions.responsive,\n        maintain_aspect_ratio: chartOptions.maintainAspectRatio,\n\n        chart_rel: {\n          data: {\n            type: 'chart',\n            id: chart.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = chartOptions.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartPost",
            "id": "class-ChartPost-e7cfcb6de26acb689d4d45c2c81885e4",
            "file": "src/app/models/posts/chart-post.ts",
            "type": "class",
            "sourceCode": "import {Chart} from '../chart';\n\nexport class ChartPost {\n  data: any;\n\n  mapToPost(chart: Chart, isPatch: boolean) {\n    this.data = {\n      type: 'chart',\n      attributes: {\n        title: chart.title,\n        type: chart.type\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = chart.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartResponse",
            "id": "class-ChartResponse-b4e433e26382eb6fabbe46e02f0f7fa0",
            "file": "src/app/models/responses/chart-response.ts",
            "type": "class",
            "sourceCode": "import {Chart} from '../chart';\n\nexport class ChartResponse {\n  charts: Chart[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "charts",
                    "type": "Chart[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartTitleOptionsPost",
            "id": "class-ChartTitleOptionsPost-408c2c02d5a28443d985ef035ed361cc",
            "file": "src/app/models/posts/chart-title-options-post.ts",
            "type": "class",
            "sourceCode": "import {ChartOptions, TitleOptions} from '../chart-options';\nexport class ChartTitleOptionsPost {\n  data: any;\n\n  mapToPost(chartOptions: ChartOptions, titleOptions: TitleOptions, isPatch: boolean) {\n    this.data = {\n      type: 'chart_title_options',\n      attributes: {\n        display: titleOptions.display,\n        text: titleOptions.text,\n        position: titleOptions.position,\n        padding: titleOptions.padding,\n        line_height: titleOptions.lineHeight,\n        font_size: titleOptions.fontSize,\n        font_family: titleOptions.fontFamily,\n        font_style: titleOptions.fontStyle,\n        font_color: titleOptions.fontColor,\n\n        chart_options_rel: {\n          data: {\n            type: 'chart_options',\n            id: chartOptions.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = titleOptions.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "titleOptions",
                            "type": "TitleOptions"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "titleOptions",
                            "type": "TitleOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartTooltipOptionsPost",
            "id": "class-ChartTooltipOptionsPost-ab90863d02da061dece2b6626a2b4110",
            "file": "src/app/models/posts/chart-tooltip-options-post.ts",
            "type": "class",
            "sourceCode": "import {ChartOptions, TooltipOptions} from '../chart-options';\n\nexport class ChartTooltipOptionsPost {\n  data: any;\n\n  mapToPost(chartOptions: ChartOptions, tooltipOptions: TooltipOptions, isPatch: boolean) {\n    this.data = {\n      type: 'chart_tooltip_options',\n      attributes: {\n        enabled: tooltipOptions.enabled,\n        background_color: tooltipOptions.backgroundColor,\n        title_font_family: tooltipOptions.titleFontFamily,\n        title_font_size: tooltipOptions.titleFontSize,\n        title_font_style: tooltipOptions.titleFontStyle,\n        title_font_color: tooltipOptions.titleFontColor,\n        title_align: tooltipOptions.titleAlign,\n        title_spacing: tooltipOptions.titleSpacing,\n        title_margin_bottom: tooltipOptions.titleMarginBottom,\n        body_font_family: tooltipOptions.bodyFontFamily,\n        body_font_size: tooltipOptions.bodyFontSize,\n        body_font_style: tooltipOptions.bodyFontStyle,\n        body_font_color: tooltipOptions.bodyFontColor,\n        body_align: tooltipOptions.bodyAlign,\n        body_spacing: tooltipOptions.bodySpacing,\n        footer_font_family: tooltipOptions.footerFontFamily,\n        footer_font_size: tooltipOptions.footerFontSize,\n        footer_font_style: tooltipOptions.footerFontStyle,\n        footer_font_color: tooltipOptions.footerFontColor,\n        footer_align: tooltipOptions.footerAlign,\n        footer_spacing: tooltipOptions.footerSpacing,\n        footer_margin_top: tooltipOptions.footerMarginTop,\n        x_padding: tooltipOptions.xPadding,\n        y_padding: tooltipOptions.yPadding,\n        caret_padding: tooltipOptions.caretPadding,\n        caret_size: tooltipOptions.caretSize,\n        corner_radius: tooltipOptions.cornerRadius,\n        display_colors: tooltipOptions.displayColors,\n        border_color: tooltipOptions.borderColor,\n        border_width: tooltipOptions.borderWidth,\n\n        chart_options_rel: {\n          data: {\n            type: 'chart_options',\n            id: chartOptions.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = tooltipOptions.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions"
                        },
                        {
                            "name": "tooltipOptions",
                            "type": "TooltipOptions"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "chartOptions",
                            "type": "ChartOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "type": "TooltipOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Era",
            "id": "class-Era-af83ab7ba71b8e5990252e52fc209da0",
            "file": "src/app/models/era.ts",
            "type": "class",
            "sourceCode": "export class Era {\n  id: number;\n  label: string;\n\n  mapEra(eraData) {\n    this.id = eraData.id;\n    this.label = eraData.attributes.label;\n\n    return this;\n  }\n\n  initializeNewEra() {\n    this.id = 0;\n    this.label = 'AD';\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEra",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "mapEra",
                    "args": [
                        {
                            "name": "eraData",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "eraData",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Essay",
            "id": "class-Essay-bf93407c89c5993d07436663ca8f04ee",
            "file": "src/app/models/essays/essay.ts",
            "type": "class",
            "sourceCode": "import { environment } from '../../../environments/environment';\n\nimport {EssayNote} from './essay-note';\nimport {EssayReference} from './essay-reference';\nimport {EssayEvent} from './essay-event';\nimport {EssayPerson} from './essay-person';\nimport {EssayTimeline} from './essay-timeline';\nimport {EssayType} from './essay-type';\nimport {EssayUser} from './essay-user';\n\nexport class Essay {\n  id: number;\n\n  title: string;\n  banner: string;\n  abstract: string;\n  essay: string;\n  type: EssayType;\n\n  essayNotes: EssayNote[];\n  essayReferences: EssayReference[];\n  essayEvents: EssayEvent[];\n  essayPeople: EssayPerson[];\n  essayTimelines: EssayTimeline[];\n  essayUsers: EssayUser[];\n\n  defaultImage: string;\n\n  initializeNewEssay() {\n    this.defaultImage = 'https://s3.us-east-2.amazonaws.com/' + environment.s3Bucket + '/essay-banner-default.png';\n\n    this.title = '';\n    this.banner = this.defaultImage;\n    this.abstract = '';\n    this.essay = '';\n\n    this.essayNotes = [];\n    this.essayReferences = [];\n    this.essayEvents = [];\n    this.essayPeople = [];\n    this.essayTimelines = [];\n    this.essayUsers = [];\n\n    this.type = new EssayType();\n    this.type.initializeNewEssayType();\n  }\n\n  mapEssay(essay) {\n    this.id = essay.id;\n\n    this.title = essay.attributes.title;\n\n    if (essay.attributes.banner) {\n      this.banner = essay.attributes.banner;\n    }\n\n    if (essay.attributes.abstract) {\n      this.abstract = essay.attributes.abstract;\n    }\n\n    if (essay.attributes.essay) {\n      this.essay = essay.attributes.essay;\n    }\n\n    if (essay.attributes.type && essay.attributes.type.data) {\n      this.type.mapEssayType(essay.attributes.type.data);\n    }\n\n    // map essay notes\n    if (essay.attributes.essay_note && essay.attributes.essay_note.data.length) {\n      for (const note of essay.attributes.essay_note.data) {\n        const newNote = new EssayNote();\n        newNote.mapNote(note);\n\n        this.essayNotes.push(newNote);\n      }\n    }\n\n    // map essay sources\n    if (essay.attributes.essay_reference && essay.attributes.essay_reference.data.length) {\n      for (const reference of essay.attributes.essay_reference.data) {\n        const newReference = new EssayReference();\n        newReference.mapEssayReference(reference);\n\n        this.essayReferences.push(newReference);\n      }\n    }\n\n    // map essay events\n    if (essay.attributes.essay_event && essay.attributes.essay_event.data.length) {\n      for (const event of essay.attributes.essay_event.data) {\n        const newEvent = new EssayEvent();\n        newEvent.mapEssayEvent(event);\n\n        this.essayEvents.push(newEvent);\n      }\n    }\n\n    // map essay people\n    if (essay.attributes.essay_person && essay.attributes.essay_person.data.length) {\n      for (const person of essay.attributes.essay_person.data) {\n        const newPerson = new EssayPerson();\n        newPerson.mapEssayPerson(person);\n\n        this.essayPeople.push(newPerson);\n      }\n    }\n\n    // map essay timelines\n    if (essay.attributes.essay_timeline && essay.attributes.essay_timeline.data.length) {\n      for (const timeline of essay.attributes.essay_timeline.data) {\n        const newTimeline = new EssayTimeline();\n        newTimeline.mapEssayTimeline(timeline);\n\n        this.essayTimelines.push(newTimeline);\n      }\n    }\n\n    return this;\n  }\n}\n",
            "properties": [
                {
                    "name": "abstract",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "banner",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "defaultImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "essay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "essayEvents",
                    "type": "EssayEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "essayNotes",
                    "type": "EssayNote[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "essayPeople",
                    "type": "EssayPerson[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "essayReferences",
                    "type": "EssayReference[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "essayTimelines",
                    "type": "EssayTimeline[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "essayUsers",
                    "type": "EssayUser[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "type": "EssayType",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "mapEssay",
                    "args": [
                        {
                            "name": "essay",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayEvent",
            "id": "class-EssayEvent-fab70224f3189ac2b67c9050e9ae4d8a",
            "file": "src/app/models/essays/essay-event.ts",
            "type": "class",
            "sourceCode": "import {Event} from '../events/event';\n\nexport class EssayEvent {\n  id: number;\n  event: Event;\n\n  initializeNewEssayEvent() {\n    this.id = null;\n    this.event = new Event();\n  }\n\n  mapEssayEvent(essayEvent) {\n    this.id = essayEvent.id;\n\n    this.event = new Event();\n    this.event.mapEvent(essayEvent.attributes.event.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssayEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7
                },
                {
                    "name": "mapEssayEvent",
                    "args": [
                        {
                            "name": "essayEvent",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "essayEvent",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayEventPost",
            "id": "class-EssayEventPost-e7b579108b7dd9993edf2a09d4918b7f",
            "file": "src/app/models/essays/posts/essay-event-post.ts",
            "type": "class",
            "sourceCode": "import {Essay} from '../essay';\nimport {EssayEvent} from '../essay-event';\n\nexport class EssayEventPost {\n  data;\n\n  mapToPost(essay: Essay, essayEvent: EssayEvent) {\n    this.data = {\n      type: 'essay_event',\n      attributes: {\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: essay.id\n          }\n        },\n\n        event_rel: {\n          data: {\n            type: 'event',\n            id: essayEvent.event.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayEvent",
                            "type": "EssayEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayEvent",
                            "type": "EssayEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayNote",
            "id": "class-EssayNote-3baf1160ba70caf25fbf3571e72238e6",
            "file": "src/app/models/essays/essay-note.ts",
            "type": "class",
            "sourceCode": "import {Source} from '../source';\n\nexport class EssayNote {\n  id: number;\n  note: string;\n  source: Source;\n  chapter: string;\n  page: number;\n\n  initializeNewEssayNote() {\n    this.id = null;\n    this.note = '';\n    this.source = new Source();\n    this.source.initializeSource();\n    this.chapter = '';\n    this.page = null;\n  }\n\n  mapNote(note) {\n    this.id = note.id;\n    this.note = note.attributes.note;\n\n    if (note.attributes.reference) {\n      const source = new Source();\n      source.initializeSource();\n\n      source.mapSource(note.attributes.reference.data);\n\n      this.source = source;\n    }\n\n    if (note.attributes.reference_chapter) {\n      this.chapter = note.attributes.reference_chapter;\n    }\n\n    if (note.attributes.reference_page) {\n      this.page = note.attributes.reference_page;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "chapter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "note",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssayNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                },
                {
                    "name": "mapNote",
                    "args": [
                        {
                            "name": "note",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayNotePost",
            "id": "class-EssayNotePost-7a65193dbbffff5e87a4a4083b9c890d",
            "file": "src/app/models/essays/posts/essay-note-post.ts",
            "type": "class",
            "sourceCode": "import {Essay} from '../essay';\nimport {EssayNote} from '../essay-note';\n\nexport class EssayNotePost {\n  data;\n\n  mapToPost(essay: Essay, essayNote: EssayNote, isPatch: boolean) {\n    this.data = {\n      type: 'essay_note',\n      attributes: {\n        note: essayNote.note,\n\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: essay.id\n          }\n        }\n      }\n    };\n\n    if (essayNote.source && essayNote.source.id) {\n      this.data.attributes.reference_rel = {\n        data: {\n          type: 'reference',\n          id: essayNote.source.id\n        }\n      };\n    }\n\n    if (essayNote.chapter) {\n      this.data.attributes.reference_chapter = essayNote.chapter;\n    }\n\n    if (essayNote.page) {\n      this.data.attributes.reference_page = essayNote.page;\n    }\n\n    if (isPatch) {\n      this.data.id = essayNote.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayNote",
                            "type": "EssayNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayPerson",
            "id": "class-EssayPerson-320372f22c5611a5e577d534a5cd1bc3",
            "file": "src/app/models/essays/essay-person.ts",
            "type": "class",
            "sourceCode": "import {Person} from '../persons/person';\n\nexport class EssayPerson {\n  id: number;\n  person: Person;\n\n  initializeNewEssayPerson() {\n    this.id = null;\n    this.person = new Person();\n  }\n\n  mapEssayPerson(essayPerson) {\n    this.id = essayPerson.id;\n\n    this.person = new Person();\n    this.person.mapPerson(essayPerson.attributes.person.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssayPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7
                },
                {
                    "name": "mapEssayPerson",
                    "args": [
                        {
                            "name": "essayPerson",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "essayPerson",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayPersonPost",
            "id": "class-EssayPersonPost-43cdba2d5182fa9cde4b5fdc0b083937",
            "file": "src/app/models/essays/posts/essay-person-post.ts",
            "type": "class",
            "sourceCode": "import {EssayPerson} from '../essay-person';\nimport {Essay} from '../essay';\n\nexport class EssayPersonPost {\n  data;\n\n  mapToPost(essay: Essay, essayPerson: EssayPerson) {\n    this.data = {\n      type: 'essay_person',\n      attributes: {\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: essay.id\n          }\n        },\n\n        person_rel: {\n          data: {\n            type: 'person',\n            id: essayPerson.person.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayPerson",
                            "type": "EssayPerson"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayPerson",
                            "type": "EssayPerson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayPost",
            "id": "class-EssayPost-20b15b75bb5c655fb0c58eb833896faf",
            "file": "src/app/models/essays/posts/essay-post.ts",
            "type": "class",
            "sourceCode": "import {Essay} from '../essay';\n\nexport class EssayPost {\n  data;\n\n  mapToPost(essay: Essay, isPatch: boolean) {\n    this.data = {\n      type: 'essay',\n      attributes: {\n        title: essay.title,\n        banner: essay.banner,\n        abstract: essay.abstract,\n        essay: essay.essay\n      }\n    };\n\n    if (essay.type && essay.type.id) {\n      this.data.attributes.type_rel = {\n        data: {\n          type: 'essay_type',\n          id: essay.type.id\n        }\n      };\n    }\n\n    if (isPatch) {\n      this.data.id = essay.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayReference",
            "id": "class-EssayReference-bbca18c4a274a48685b46a04d2daecb5",
            "file": "src/app/models/essays/essay-reference.ts",
            "type": "class",
            "sourceCode": "import {Source} from '../source';\nexport class EssayReference {\n  id: number;\n  source: Source;\n  sourcePage: number;\n  sourceChapter: string;\n\n  initializeNewEssayReference() {\n    this.id = null;\n    this.source = new Source();\n    this.sourcePage = 0;\n    this.sourceChapter = '';\n  }\n\n  mapEssayReference(essayReference) {\n    this.id = essayReference.id;\n\n    this.source = new Source();\n    this.source.mapSource(essayReference.attributes.reference.data);\n\n    if (essayReference.attributes.page) {\n      this.sourcePage = essayReference.attributes.page;\n    }\n\n    if (essayReference.attributes.chapter) {\n      this.sourceChapter = essayReference.attributes.chapter;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sourceChapter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sourcePage",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssayReference",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "mapEssayReference",
                    "args": [
                        {
                            "name": "essayReference",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "essayReference",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayReferencePost",
            "id": "class-EssayReferencePost-b4dd84856e6edf75c834ccaaec3618a5",
            "file": "src/app/models/essays/posts/essay-reference-post.ts",
            "type": "class",
            "sourceCode": "import {EssayReference} from '../essay-reference';\nimport {Essay} from '../essay';\n\nexport class EssayReferencePost {\n  data;\n\n  mapToPost(essay: Essay, essayReference: EssayReference, isPatch: boolean) {\n    this.data = {\n      type: 'essay_reference',\n      attributes: {\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: essay.id\n          }\n        },\n        reference_rel: {\n          data: {\n            type: 'reference',\n            id: essayReference.source.id\n          }\n        }\n      }\n    };\n\n    if (essayReference.sourceChapter) {\n      this.data.attributes.chapter = essayReference.sourceChapter;\n    }\n\n    if (essayReference.sourcePage) {\n      this.data.attributes.page = essayReference.sourcePage;\n    }\n\n    if (isPatch) {\n      this.data.id = essayReference.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayReference",
                            "type": "EssayReference"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayReference",
                            "type": "EssayReference",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayResponse",
            "id": "class-EssayResponse-a2664714b8db72def293c3d50e576ce0",
            "file": "src/app/models/essays/responses/essay-response.ts",
            "type": "class",
            "sourceCode": "import {Essay} from '../essay';\n\nexport class EssayResponse {\n  essays: Essay[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "essays",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayTimeline",
            "id": "class-EssayTimeline-9a404de58c230e1da9938a40ffbf1873",
            "file": "src/app/models/essays/essay-timeline.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../timelines/timeline';\n\nexport class EssayTimeline {\n  id: number;\n  timeline: Timeline;\n\n  initializeNewEssayTimeline() {\n    this.id = null;\n    this.timeline = new Timeline();\n  }\n\n  mapEssayTimeline(essayTimeline) {\n    this.id = essayTimeline.id;\n\n    this.timeline = new Timeline();\n    this.timeline.mapTimeline(essayTimeline.attributes.timeline.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssayTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7
                },
                {
                    "name": "mapEssayTimeline",
                    "args": [
                        {
                            "name": "essayTimeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "essayTimeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayTimelinePost",
            "id": "class-EssayTimelinePost-447acebbc4b84cc3120c6752858f5ad9",
            "file": "src/app/models/essays/posts/essay-timeline-post.ts",
            "type": "class",
            "sourceCode": "import {EssayTimeline} from '../essay-timeline';\nimport {Essay} from '../essay';\n\nexport class EssayTimelinePost {\n  data;\n\n  mapToPost(essay: Essay, essayTimeline: EssayTimeline) {\n    this.data = {\n      type: 'essay_timeline',\n      attributes: {\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: essay.id\n          }\n        },\n\n        timeline_rel: {\n          data: {\n            type: 'timeline',\n            id: essayTimeline.timeline.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        },
                        {
                            "name": "essayTimeline",
                            "type": "EssayTimeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essayTimeline",
                            "type": "EssayTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayType",
            "id": "class-EssayType-a56ca612e1c94e93dfc063b80abab4b7",
            "file": "src/app/models/essays/essay-type.ts",
            "type": "class",
            "sourceCode": "export class EssayType {\n  id: number;\n  label: string;\n\n  initializeNewEssayType() {\n    this.label = '';\n  }\n\n  mapEssayType(essayType) {\n    this.id = essayType.id;\n\n    this.label = essayType.attributes.label;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssayType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "mapEssayType",
                    "args": [
                        {
                            "name": "essayType",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "essayType",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayUser",
            "id": "class-EssayUser-4629f3133986ca9709626fa65f9b2246",
            "file": "src/app/models/essays/essay-user.ts",
            "type": "class",
            "sourceCode": "import {User} from '../user';\nimport {Essay} from './essay';\n\nexport class EssayUser {\n  id: number;\n\n  user: User;\n  essay: Essay;\n\n  initializeNewEssayUser() {\n    this.id = null;\n\n    this.user = new User();\n    this.essay = new Essay();\n  }\n\n  mapEssayUser(essayUser) {\n    this.id = essayUser.id;\n\n    this.user = new User();\n    this.user.mapUser(essayUser.attributes.user.data);\n\n    this.essay = new Essay();\n    this.essay.mapEssay(essayUser.attributes.essay.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "essay",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEssayUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                },
                {
                    "name": "mapEssayUser",
                    "args": [
                        {
                            "name": "essayUser",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "essayUser",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EssayUserPost",
            "id": "class-EssayUserPost-8f7556cd996fc7ea55773c7826520a4f",
            "file": "src/app/models/essays/posts/essay-user-post.ts",
            "type": "class",
            "sourceCode": "import {EssayUser} from '../essay-user';\n\nexport class EssayUserPost {\n  data;\n\n  mapToPost(essayUser: EssayUser, isPatch: boolean) {\n    this.data = {\n      type: 'essay_user',\n      attributes: {\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: essayUser.essay.id\n          }\n        },\n\n        user_rel: {\n          data: {\n            type: 'user',\n            id: essayUser.user.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = essayUser.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "essayUser",
                            "type": "EssayUser"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "essayUser",
                            "type": "EssayUser",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Event",
            "id": "class-Event-482f0ce8f46f18134566bc44ce4ee917",
            "file": "src/app/models/events/event.ts",
            "type": "class",
            "sourceCode": "import { environment } from '../../../environments/environment';\n\nimport { Source } from '../source';\nimport { Month } from '../month';\nimport { Era } from '../era';\nimport { EventNote } from './event-note';\nimport { Timeline } from '../timelines/timeline';\n\nexport class Event {\n  id: number;\n  label: string;\n  image: string;\n  description: string;\n  startDay: number;\n  startMonth: Month;\n  startYear: number;\n  formattedStartYear: string;\n  formattedStartDate: string;\n  startEra: Era;\n  endDay: number;\n  endMonth: Month;\n  endYear: number;\n  formattedEndYear: string;\n  formattedEndDate: string;\n  endEra: Era;\n  source: Source;\n  notes: EventNote[];\n  colorClass: string;\n\n  timelineStartLocation: number;\n  timelineEndLocation: number;\n  listEventIsHighlighted: boolean;\n  timelineEventIsHighlighted: boolean;\n  isSinglePointEvent: boolean;\n\n  eventLength: number;\n\n  defaultImage: string;\n\n  initializeNewEvent() {\n    this.defaultImage = 'https://s3.us-east-2.amazonaws.com/' + environment.s3Bucket + '/history_default.png';\n\n    this.label = '';\n    this.image = this.defaultImage;\n    this.description = '';\n    this.startDay = null;\n    this.startMonth = new Month();\n    this.startYear = null;\n    this.startEra = new Era();\n    this.endDay = null;\n    this.endMonth = new Month();\n    this.endYear = null;\n    this.endEra = new Era();\n    this.notes = [];\n    this.source = new Source();\n\n    this.timelineStartLocation = null;\n    this.listEventIsHighlighted = false;\n    this.timelineEventIsHighlighted = false;\n    this.isSinglePointEvent = false;\n\n    this.eventLength = 1;\n  }\n\n  mapEvent(event) {\n    const self = this;\n\n    const startMonth = new Month();\n    const startEra = new Era();\n\n    const endMonth = new Month();\n    const endEra = new Era();\n\n    const newSource = new Source();\n\n    self.id = event.id;\n    self.label = event.attributes.label;\n\n    if (event.attributes.image) {\n      self.image = event.attributes.image;\n    }\n\n    if (event.attributes.event_start_year) {\n      self.startYear = event.attributes.event_start_year;\n    }\n\n    if (event.attributes.event_start_era) {\n      self.startEra = startEra.mapEra(event.attributes.event_start_era.data);\n    }\n\n    // optional fields\n    if (event.attributes.description) {\n      self.description = event.attributes.description;\n    }\n\n    if (event.attributes.event_start_day) {\n      self.startDay = event.attributes.event_start_day;\n    }\n\n    if (event.attributes.event_start_month) {\n      self.startMonth = startMonth.mapMonth(event.attributes.event_start_month.data);\n    }\n\n    if (event.attributes.event_end_day) {\n      self.endDay = event.attributes.event_end_day;\n    }\n\n    if (event.attributes.event_end_month) {\n      self.endMonth = endMonth.mapMonth(event.attributes.event_end_month.data);\n    }\n\n    if (event.attributes.event_end_year) {\n      self.endYear = event.attributes.event_end_year;\n    }\n\n    if (event.attributes.event_end_era) {\n      self.endEra = endEra.mapEra(event.attributes.event_end_era.data);\n    }\n\n    if (event.attributes.reference) {\n      self.source = newSource.mapSource(event.attributes.reference.data);\n    }\n\n    if (event.attributes.event_note && event.attributes.event_note.data.length) {\n      self.notes = [];\n\n      for (const returnedNote of event.attributes.event_note.data) {\n        const note: EventNote = new EventNote();\n        note.initializeNote();\n        note.mapNote(returnedNote);\n\n        self.notes.push(note);\n      }\n    }\n\n    if (self.endYear === self.startYear) {\n      self.isSinglePointEvent = true;\n    }\n\n    this.setEventLength();\n    this.formatYears();\n    this.formatDates();\n  }\n\n  // in the case that an event has no month and the year is greater than 999,999 the formatter will shorten with 'MYA' or 'BYA'\n  public formatYears() {\n    // START DATE FORMATTED YEAR\n    let formattedNumber: number = this.startYear;\n    let postfix = '';\n\n    let addBC = this.startEra.label === 'BC';\n\n    if (formattedNumber < 0) {\n      formattedNumber = formattedNumber * -1;\n    }\n\n    if (addBC && (!this.startMonth || !this.startMonth.label)) {\n      if (formattedNumber > 999999 && formattedNumber < 1000000000) {\n        formattedNumber = Math.sign(formattedNumber) * ((Math.abs(formattedNumber) / 1000000));\n        formattedNumber = Math.round(100 * formattedNumber) / 100;\n        postfix = 'MYA';\n\n      } else if (formattedNumber > 999999999 && formattedNumber < 1000000000000) {\n        formattedNumber = Math.sign(formattedNumber) * ((Math.abs(formattedNumber) / 1000000000));\n        formattedNumber = Math.round(100 * formattedNumber) / 100;\n        postfix = 'BYA';\n\n      } else {\n        if (addBC) {\n          postfix = 'BC';\n        }\n      }\n    }\n\n    if (formattedNumber) {\n      this.formattedStartYear = formattedNumber.toString() + ' ' + postfix;\n    }\n\n    // END DATE FORMATTED YEAR\n    if (this.endYear) {\n      formattedNumber = this.endYear;\n\n      addBC = this.endEra.label === 'BC';\n\n      if (formattedNumber < 0) {\n        formattedNumber = formattedNumber * -1;\n      }\n\n      if (addBC && (!this.startMonth || !this.startMonth.label)) {\n        if (formattedNumber > 999999 && formattedNumber < 1000000000) {\n          formattedNumber = Math.sign(formattedNumber) * ((Math.abs(formattedNumber) / 1000000));\n          formattedNumber = Math.round(100 * formattedNumber) / 100;\n          postfix = 'MYA';\n\n        } else if (formattedNumber > 999999999 && formattedNumber < 1000000000000) {\n          formattedNumber = Math.sign(formattedNumber) * ((Math.abs(formattedNumber) / 1000000000));\n          formattedNumber = Math.round(100 * formattedNumber) / 100;\n          postfix = 'BYA';\n\n        } else {\n          if (addBC) {\n            postfix = 'BC';\n          }\n        }\n      }\n\n      if (formattedNumber) {\n        this.formattedEndYear = formattedNumber.toString() + ' ' + postfix;\n      }\n\n    } else {\n      this.formattedEndYear = 'present';\n    }\n  }\n\n  public formatDates() {\n    // in the case of BC dates format to year only\n    if (this.startEra.label === 'BC') {\n      this.formattedStartDate = this.formattedStartYear;\n    }\n\n    if (this.endEra && this.endEra.label === 'BC') {\n      this.formattedEndDate = this.formattedEndYear;\n    }\n\n    // in the case of AD dates format to normal date string if it exists\n    if (this.startEra.label === 'AD') {\n      let startDate = '';\n\n      if (this.startMonth && this.startMonth.label) {\n        startDate = startDate + this.startMonth.label + ' ';\n      }\n\n      if (this.startDay) {\n        startDate = startDate + this.startDay.toString() + ', ';\n      }\n\n      this.formattedStartDate = startDate + this.formattedStartYear;\n    }\n\n    if (this.endEra && this.endEra.label === 'AD') {\n      let endDate = '';\n\n      if (this.endMonth && this.endMonth.label) {\n        endDate = endDate + this.endMonth.label + ' ';\n      }\n\n      if (this.endDay) {\n        endDate = endDate + this.endDay.toString() + ', ';\n      }\n\n      this.formattedEndDate = endDate + this.formattedEndYear;\n    }\n\n    if (!this.endEra) {\n      this.formattedEndDate = 'present';\n    }\n  }\n\n  setEventLength() {\n    if (this.endYear) {\n      this.eventLength = (this.endYear - this.startYear);\n    } else {\n      const dateObj = new Date();\n      this.eventLength = (dateObj.getFullYear() - this.startYear);\n    }\n\n    if (this.eventLength < 0) {\n      this.eventLength = this.eventLength * -1;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "colorClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "defaultImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "endDay",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "endEra",
                    "type": "Era",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "endMonth",
                    "type": "Month",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "endYear",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "eventLength",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "formattedEndDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "formattedEndYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "formattedStartDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "formattedStartYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isSinglePointEvent",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "listEventIsHighlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "notes",
                    "type": "EventNote[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "startDay",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "startEra",
                    "type": "Era",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "startMonth",
                    "type": "Month",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "startYear",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "timelineEndLocation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "timelineEventIsHighlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "timelineStartLocation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "formatDates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formatYears",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initializeNewEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "mapEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEventLength",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventNote",
            "id": "class-EventNote-5af88410ee7badcf7c0da7735493d92c",
            "file": "src/app/models/events/event-note.ts",
            "type": "class",
            "sourceCode": "export class EventNote {\n  id: number;\n  note: string;\n\n  initializeNote() {\n    this.note = '';\n  }\n\n  mapNote(note) {\n    this.id = note.id;\n    this.note = note.attributes.note;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "note",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "mapNote",
                    "args": [
                        {
                            "name": "note",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventNotePost",
            "id": "class-EventNotePost-6037dac98470548c1776b3d9d94bae85",
            "file": "src/app/models/events/posts/event-note-post.ts",
            "type": "class",
            "sourceCode": "import { EventNote } from '../event-note';\nimport { Event } from '../event';\n\nexport class EventNotePost {\n  data;\n\n  mapToPost(eventNote: EventNote, event: Event, isPatch: boolean) {\n    this.data = {\n      type: 'event_note',\n      attributes: {\n        note: eventNote.note,\n        event_rel: {\n          data: {\n            type: 'event',\n            id: event.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = eventNote.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "eventNote",
                            "type": "EventNote"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "eventNote",
                            "type": "EventNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventPost",
            "id": "class-EventPost-422b96e0b65ae1e1c15a6c14578c763e",
            "file": "src/app/models/events/posts/event-post.ts",
            "type": "class",
            "sourceCode": "import { Event } from '../event';\n\nexport class EventPost {\n  data;\n\n  mapToPost(event: Event, isPatch: boolean) {\n    this.data = {\n      type: 'event',\n      attributes: {\n        label: event.label,\n\n        image: event.image,\n\n        event_start_year: event.startYear,\n        event_start_era_rel: {\n          data: {\n            type: 'era',\n            id: event.startEra.id\n          }\n        }\n      }\n    };\n\n    // optional fields\n    if (event.description) {\n      this.data.attributes.description = event.description;\n    }\n\n    if (event.startDay) {\n      this.data.attributes.event_start_day = event.startDay;\n    }\n\n    if (event.startMonth && event.startMonth.id) {\n      this.data.attributes.event_start_month_rel = {\n        data: {\n          type: 'month',\n          id: event.startMonth.id\n        }\n      };\n    }\n\n    if (event.endDay) {\n      this.data.attributes.event_end_day = event.endDay;\n    }\n\n    if (event.endMonth && event.endMonth.id) {\n      this.data.attributes.event_end_month_rel = {\n        data: {\n          type: 'month',\n          id: event.endMonth.id\n        }\n      };\n    }\n\n    if (event.endYear) {\n      this.data.attributes.event_end_year = event.endYear;\n    }\n\n    if (event.endEra.id) {\n      this.data.attributes.event_end_era_rel = {\n        data: {\n          type: 'era',\n          id: event.endEra.id\n        }\n      };\n    }\n\n    if (event.source) {\n      this.data.attributes.reference_rel = {\n        data: {\n          type: 'reference',\n          id: event.source.id\n        }\n      };\n    }\n\n    if (isPatch) {\n      this.data.id = event.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventResponse",
            "id": "class-EventResponse-d1d156f430832f0338f58c731c905982",
            "file": "src/app/models/responses/event-response.ts",
            "type": "class",
            "sourceCode": "import {Event} from '../events/event';\nimport {EventTimeline} from '../events/event-timeline';\nimport {TimelineEvent} from '../timelines/timeline-event';\n\nexport class EventResponse {\n  events: Event[];\n  links: any;\n  total: number;\n}\n\nexport class EventTimelinesResponse {\n  eventTimelines: EventTimeline[];\n  links: any;\n  total: number;\n}\n\nexport class TimelineEventsResponse {\n  timelineEvents: TimelineEvent[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "events",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventTimeline",
            "id": "class-EventTimeline-47017c92cb39b745984d9aa6624bb984",
            "file": "src/app/models/events/event-timeline.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../timelines/timeline';\n\nexport class EventTimeline {\n  id: number;\n  timeline: Timeline;\n\n  initializeNewEventTimeline() {\n    this.timeline = new Timeline();\n    this.timeline.initializeNewTimeline();\n  }\n\n  mapEventTimeline(eventTimeline) {\n    this.id = eventTimeline.id;\n    this.timeline.mapTimeline(eventTimeline.attributes.timeline.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeNewEventTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7
                },
                {
                    "name": "mapEventTimeline",
                    "args": [
                        {
                            "name": "eventTimeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "eventTimeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventTimelinesResponse",
            "id": "class-EventTimelinesResponse-d1d156f430832f0338f58c731c905982",
            "file": "src/app/models/responses/event-response.ts",
            "type": "class",
            "sourceCode": "import {Event} from '../events/event';\nimport {EventTimeline} from '../events/event-timeline';\nimport {TimelineEvent} from '../timelines/timeline-event';\n\nexport class EventResponse {\n  events: Event[];\n  links: any;\n  total: number;\n}\n\nexport class EventTimelinesResponse {\n  eventTimelines: EventTimeline[];\n  links: any;\n  total: number;\n}\n\nexport class TimelineEventsResponse {\n  timelineEvents: TimelineEvent[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "eventTimelines",
                    "type": "EventTimeline[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LegendLabelOptions",
            "id": "class-LegendLabelOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "boxWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fontColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fontFamily",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fontSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "fontStyle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "padding",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "usePointStyle",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "initializeNewLegendLabelOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "mapLegendLabelOptions",
                    "args": [
                        {
                            "name": "legendLabelOptions",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "legendLabelOptions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LegendOptions",
            "id": "class-LegendOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "align",
                    "type": "ChartLegendAlignments",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "display",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "fullWidth",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "labels",
                    "type": "LegendLabelOptions",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "position",
                    "type": "ChartTitlePositions",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "reverse",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methods": [
                {
                    "name": "initializeNewLegendOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "mapLegendOptions",
                    "args": [
                        {
                            "name": "legendOptions",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "legendOptions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Month",
            "id": "class-Month-5a03fa3bdd7d3548a2d4add64c28ba88",
            "file": "src/app/models/month.ts",
            "type": "class",
            "sourceCode": "export class Month {\n  id: number;\n  label: string;\n\n  mapMonth(monthData) {\n    this.id = monthData.id;\n    this.label = monthData.attributes.label;\n\n    return this;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "mapMonth",
                    "args": [
                        {
                            "name": "monthData",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "monthData",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Person",
            "id": "class-Person-dd0f2aa2a47a71e0b5d1ff0ff485caf2",
            "file": "src/app/models/persons/person.ts",
            "type": "class",
            "sourceCode": "import { environment } from '../../../environments/environment';\n\nimport { Source } from '../source';\nimport { Month } from '../month';\nimport { Era } from '../era';\nimport { PersonNote } from './person-note';\nimport { PersonBiography } from './person-biography';\n\nexport class Person {\n  id: number;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  image: string;\n  description: string;\n  birthDay: number;\n  birthMonth: Month;\n  birthYear: number;\n  birthEra: Era;\n  deathDay: number;\n  deathMonth: Month;\n  deathYear: number;\n  deathEra: Era;\n  source: Source;\n  notes: PersonNote[];\n\n  timelinePersonId: number;\n\n  timelineStartLocation: number;\n  timelineEndLocation: number;\n  listEventIsHighlighted: boolean;\n\n  formattedBirthYear: string;\n  formattedDeathYear: string;\n  formattedBirth: string;\n  formattedDeath: string;\n\n  age: number;\n\n  colorClass: string;\n\n  defaultImage: string;\n\n  initializeNewPerson() {\n    this.defaultImage = 'https://s3.us-east-2.amazonaws.com/' + environment.s3Bucket + '/history_default.png';\n\n    this.firstName = '';\n    this.middleName = '';\n    this.lastName = '';\n    this.image = this.defaultImage;\n    this.description = '';\n    this.birthDay = null;\n    this.birthMonth = new Month();\n    this.birthYear = null;\n    this.birthEra = new Era();\n    this.deathDay = null;\n    this.deathMonth = new Month();\n    this.deathYear = null;\n    this.deathEra = new Era();\n    this.source = new Source();\n    this.notes = [];\n\n    this.timelineStartLocation = null;\n    this.listEventIsHighlighted = false;\n\n    this.formattedBirthYear = '';\n    this.formattedDeathYear = '';\n    this.formattedBirth = '';\n    this.formattedDeath = '';\n\n    this.age = null;\n  }\n\n  mapPerson(person) {\n    const self = this;\n\n    const birthMonth = new Month();\n    const birthEra = new Era();\n\n    const deathMonth = new Month();\n    const deathEra = new Era();\n\n    const source = new Source();\n\n    self.id = person.id;\n    self.firstName = person.attributes.first_name;\n\n    // optional fields\n    if (person.attributes.birth_year) {\n      self.birthYear = person.attributes.birth_year;\n    }\n\n    if (person.attributes.birth_era) {\n      self.birthEra = birthEra.mapEra(person.attributes.birth_era.data);\n    }\n\n    if (person.attributes.description) {\n      self.description = person.attributes.description;\n    }\n\n    if (person.attributes.middle_name) {\n      self.middleName = person.attributes.middle_name;\n    }\n\n    if (person.attributes.last_name) {\n      self.lastName = person.attributes.last_name;\n    }\n\n    if (person.attributes.image) {\n      self.image = person.attributes.image;\n    }\n\n    if (person.attributes.birth_day) {\n      self.birthDay = person.attributes.birth_day;\n    }\n\n    if (person.attributes.birth_month) {\n      self.birthMonth = birthMonth.mapMonth(person.attributes.birth_month.data);\n    }\n\n    if (person.attributes.death_day) {\n      self.deathDay = person.attributes.death_day;\n    }\n\n    if (person.attributes.death_month) {\n      self.deathMonth = deathMonth.mapMonth(person.attributes.death_month.data);\n    }\n\n    if (person.attributes.death_year) {\n      self.deathYear = person.attributes.death_year;\n    }\n\n    if (person.attributes.death_era) {\n      self.deathEra = deathEra.mapEra(person.attributes.death_era.data);\n    }\n\n    if (person.attributes.reference) {\n      self.source = source.mapSource(person.attributes.reference.data);\n    }\n\n    if (person.attributes.person_note && person.attributes.person_note.data.length) {\n      self.notes = [];\n\n      for (const returnedNote of person.attributes.person_note.data) {\n        const note: PersonNote = new PersonNote();\n\n        self.notes.push(note.mapNote(returnedNote));\n      }\n    }\n\n    if (person.attributes.birth_era) {\n      this.formatYears();\n      this.formatBirthAndDeath();\n      this.setAge();\n    }\n\n    if (!this.image || !this.image.length) {\n      this.image = this.defaultImage;\n    }\n  }\n\n  formatYears() {\n    if (this.birthEra.label === 'BC') {\n      this.formattedBirthYear = this.birthYear.toString() + ' BC';\n    } else {\n      this.formattedBirthYear = this.birthYear.toString();\n    }\n\n    if (this.deathYear) {\n      if (this.deathEra && this.deathEra.label === 'BC') {\n        this.formattedDeathYear = this.deathYear.toString() + ' BC';\n      } else {\n        this.formattedDeathYear = this.deathYear.toString();\n      }\n\n    } else {\n      this.formattedDeathYear = 'present';\n    }\n  }\n\n  formatBirthAndDeath() {\n    // BIRTH\n    this.formattedBirth = '';\n\n    if (this.birthMonth && this.birthMonth.label) {\n      this.formattedBirth = this.birthMonth.label;\n    }\n\n    if (this.birthDay) {\n      this.formattedBirth = this.formattedBirth + ', ' + this.birthDay.toString();\n    }\n\n    this.formattedBirth = this.formattedBirth + ' ' + this.formattedBirthYear;\n\n    // DEATH\n    this.formattedDeath = '';\n\n    if (this.deathMonth && this.deathMonth.label) {\n      this.formattedDeath = this.deathMonth.label;\n    }\n\n    if (this.deathDay) {\n      this.formattedDeath = this.formattedDeath + ', ' + this.deathDay.toString();\n    }\n\n    this.formattedDeath = this.formattedDeath + ' ' + this.formattedDeathYear;\n  }\n\n  setAge() {\n    if (this.deathYear) {\n      this.age = (this.deathYear - this.birthYear);\n    } else {\n      const dateObj = new Date();\n      this.age = (dateObj.getFullYear() - this.birthYear);\n    }\n\n    if (this.age < 0) {\n      this.age = this.age * -1;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "age",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "birthDay",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "birthEra",
                    "type": "Era",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "birthMonth",
                    "type": "Month",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "birthYear",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "colorClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "deathDay",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "deathEra",
                    "type": "Era",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "deathMonth",
                    "type": "Month",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "deathYear",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "defaultImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "formattedBirth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "formattedBirthYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "formattedDeath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "formattedDeathYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "listEventIsHighlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "middleName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "notes",
                    "type": "PersonNote[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "timelineEndLocation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "timelinePersonId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "timelineStartLocation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [
                {
                    "name": "formatBirthAndDeath",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181
                },
                {
                    "name": "formatYears",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "initializeNewPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "mapPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonBiographiesResponse",
            "id": "class-PersonBiographiesResponse-7f1614b23bf11705792a302be4b11ce3",
            "file": "src/app/models/responses/person-response.ts",
            "type": "class",
            "sourceCode": "import {Person} from '../persons/person';\nimport {PersonTimeline} from '../persons/person-timeline';\nimport {PersonBiography} from '../persons/person-biography';\n\nexport class PersonResponse {\n  persons: Person[];\n  links: any;\n  total: number;\n}\n\nexport class PersonTimelinesResponse {\n  personTimelines: PersonTimeline[];\n  links: any;\n  total: number;\n}\n\nexport class PersonBiographiesResponse {\n  personBiographies: PersonBiography[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "personBiographies",
                    "type": "PersonBiography[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonBiography",
            "id": "class-PersonBiography-2767d3c04319b0ef701ee8b7f709ac0b",
            "file": "src/app/models/persons/person-biography.ts",
            "type": "class",
            "sourceCode": "import {Essay} from '../essays/essay';\nimport {Person} from './person';\n\nexport class PersonBiography {\n  id: number;\n  biography: Essay;\n  person: Person;\n\n  initializeBiography() {\n    this.biography = new Essay();\n    this.biography.initializeNewEssay();\n  }\n\n  mapBiography(biography) {\n    this.id = biography.id;\n\n    const essay: Essay = new Essay();\n    essay.initializeNewEssay();\n\n    this.biography = essay.mapEssay(biography.attributes.essay.data);\n\n    const person: Person = new Person();\n    person.initializeNewPerson();\n    person.mapPerson(biography.attributes.person.data);\n\n    this.person = person;\n\n    return this;\n  }\n}\n",
            "properties": [
                {
                    "name": "biography",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "initializeBiography",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9
                },
                {
                    "name": "mapBiography",
                    "args": [
                        {
                            "name": "biography",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "biography",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonBiographyPost",
            "id": "class-PersonBiographyPost-f87ec4d448d5b3ebf320f5b59e24c813",
            "file": "src/app/models/posts/person-biography-post.ts",
            "type": "class",
            "sourceCode": "import {PersonBiography} from '../persons/person-biography';\n\nexport class PersonBiographyPost {\n  data;\n\n  mapToPersonBiographyPost(personBiography: PersonBiography) {\n    this.data = {\n      type: 'person_biography',\n      attributes: {\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: personBiography.biography.id\n          }\n        },\n        person_rel: {\n          data: {\n            type: 'person',\n            id: personBiography.person.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPersonBiographyPost",
                    "args": [
                        {
                            "name": "personBiography",
                            "type": "PersonBiography"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "personBiography",
                            "type": "PersonBiography",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonNote",
            "id": "class-PersonNote-7dc02e001834b391b6eac1cc0c13d37b",
            "file": "src/app/models/persons/person-note.ts",
            "type": "class",
            "sourceCode": "export class PersonNote {\n  id: number;\n  note: string;\n\n  initializeNote() {\n    this.note = '';\n  }\n\n  mapNote(note) {\n    this.id = note.id;\n    this.note = note.attributes.note;\n\n    return this;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "note",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "mapNote",
                    "args": [
                        {
                            "name": "note",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonNotePost",
            "id": "class-PersonNotePost-963284116d5b8eb069fa8240deeb8f73",
            "file": "src/app/models/posts/person-note-post.ts",
            "type": "class",
            "sourceCode": "import {PersonNote} from '../persons/person-note';\nimport {Person} from '../persons/person';\n\nexport class PersonNotePost {\n  data;\n\n  mapToNotePost(personNote: PersonNote, person: Person, isPatch: boolean) {\n    this.data = {\n      type: 'person_note',\n      attributes: {\n        note: personNote.note,\n        person_rel: {\n          data: {\n            type: 'person',\n            id: person.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = personNote.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToNotePost",
                    "args": [
                        {
                            "name": "personNote",
                            "type": "PersonNote"
                        },
                        {
                            "name": "person",
                            "type": "Person"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "personNote",
                            "type": "PersonNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonPost",
            "id": "class-PersonPost-fb90ba5ec1da9b58561e1b0811cf4d86",
            "file": "src/app/models/posts/person-post.ts",
            "type": "class",
            "sourceCode": "import { Person } from '../persons/person';\n\nexport class PersonPost {\n  data;\n\n  mapToPost(person: Person, isPatch: boolean) {\n    this.data = {\n      type: 'person',\n      attributes: {\n        first_name: person.firstName,\n        birth_year: person.birthYear,\n        image: person.image,\n        birth_era_rel: {\n          data: {\n            type: 'era',\n            id: person.birthEra.id\n          }\n        }\n      }\n    };\n\n    // optional fields\n    if (person.description) {\n      this.data.attributes.description = person.description;\n    }\n\n    if (person.middleName) {\n      this.data.attributes.middle_name = person.middleName;\n    }\n\n    if (person.lastName) {\n      this.data.attributes.last_name = person.lastName;\n    }\n\n    if (person.birthDay > 0) {\n      this.data.attributes.birth_day = person.birthDay;\n    }\n\n    if (person.birthMonth && person.birthMonth.id) {\n      this.data.attributes.birth_month_rel = {\n        data: {\n          type: 'month',\n          id: person.birthMonth.id\n        }\n      };\n    }\n\n    if (person.deathDay > 0) {\n      this.data.attributes.death_day = person.deathDay;\n    }\n\n    if (person.deathMonth && person.deathMonth.id) {\n      this.data.attributes.death_month_rel = {\n        data: {\n          type: 'month',\n          id: person.deathMonth.id\n        }\n      };\n    }\n\n    if (person.deathYear) {\n      this.data.attributes.death_year = person.deathYear;\n    }\n\n    if (person.deathEra && person.deathEra.id) {\n      this.data.attributes.death_era_rel = {\n        data: {\n          type: 'era',\n          id: person.deathEra.id\n        }\n      };\n    }\n\n    if ( person.source && person.source.id) {\n      this.data.attributes.reference_rel = {\n        data: {\n          type: 'reference',\n          id: person.source.id\n        }\n      };\n    }\n\n    if (isPatch) {\n      this.data.id = person.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonResponse",
            "id": "class-PersonResponse-7f1614b23bf11705792a302be4b11ce3",
            "file": "src/app/models/responses/person-response.ts",
            "type": "class",
            "sourceCode": "import {Person} from '../persons/person';\nimport {PersonTimeline} from '../persons/person-timeline';\nimport {PersonBiography} from '../persons/person-biography';\n\nexport class PersonResponse {\n  persons: Person[];\n  links: any;\n  total: number;\n}\n\nexport class PersonTimelinesResponse {\n  personTimelines: PersonTimeline[];\n  links: any;\n  total: number;\n}\n\nexport class PersonBiographiesResponse {\n  personBiographies: PersonBiography[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "persons",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonTimeline",
            "id": "class-PersonTimeline-9bdbfe6319e46cb4e21a676c5f3507b0",
            "file": "src/app/models/persons/person-timeline.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../timelines/timeline';\nimport {Person} from './person';\n\nexport class PersonTimeline {\n  id: number;\n  timeline: Timeline;\n  person: Person;\n\n  initializeNewPersonTimeline() {\n    this.id = null;\n    this.timeline = new Timeline();\n    this.person = new Person();\n  }\n\n  mapPersonTimeline(personTimeline) {\n    this.id = personTimeline.id;\n\n    this.timeline.mapTimeline(personTimeline.attributes.timeline.data);\n    this.person.mapPerson(personTimeline.attributes.person.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "initializeNewPersonTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9
                },
                {
                    "name": "mapPersonTimeline",
                    "args": [
                        {
                            "name": "personTimeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "personTimeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersonTimelinesResponse",
            "id": "class-PersonTimelinesResponse-7f1614b23bf11705792a302be4b11ce3",
            "file": "src/app/models/responses/person-response.ts",
            "type": "class",
            "sourceCode": "import {Person} from '../persons/person';\nimport {PersonTimeline} from '../persons/person-timeline';\nimport {PersonBiography} from '../persons/person-biography';\n\nexport class PersonResponse {\n  persons: Person[];\n  links: any;\n  total: number;\n}\n\nexport class PersonTimelinesResponse {\n  personTimelines: PersonTimeline[];\n  links: any;\n  total: number;\n}\n\nexport class PersonBiographiesResponse {\n  personBiographies: PersonBiography[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "personTimelines",
                    "type": "PersonTimeline[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Project",
            "id": "class-Project-0d3f60ccf38bb3b0e2796fec6f9b23b6",
            "file": "src/app/models/projects/project.ts",
            "type": "class",
            "sourceCode": "import {ProjectEssay} from './project-essay';\nimport {ProjectTimeline} from './project-timeline';\nimport {ProjectBrainstorm} from './project-brainstorm';\nimport {ProjectPerson} from './project-person';\nimport {ProjectEvent} from './project-event';\nimport {ProjectChart} from './project-chart';\n\nexport class Project {\n  id: number;\n  label: string;\n\n  essays: ProjectEssay[];\n  timelines: ProjectTimeline[];\n  brainstorms: ProjectBrainstorm[];\n  persons: ProjectPerson[];\n  events: ProjectEvent[];\n  charts: ProjectChart[];\n\n  mapProject(project) {\n    this.id = project.id;\n    this.label = project.attributes.label;\n\n    // map essays if they exist\n    if (project.attributes.project_essay.data && project.attributes.project_essay.data.length) {\n      for (const projectEssay of project.attributes.project_essay.data) {\n        let essay = new ProjectEssay();\n        essay.initializeNewProjectEssay();\n        essay.mapProjectEssay(projectEssay);\n\n        this.essays.push(essay);\n      }\n    }\n\n    // map timelines if they exist\n    if (project.attributes.project_timeline.data && project.attributes.project_timeline.data.length) {\n      for (const projectTimeline of project.attributes.project_timeline.data) {\n        let timeline = new ProjectTimeline();\n        timeline.initializeNewProjectTimeline();\n        timeline.mapProjectTimeline(projectTimeline);\n\n        this.timelines.push(timeline);\n      }\n    }\n\n    // map brainstorms if they exist\n    if (project.attributes.project_brainstorm.data && project.attributes.project_brainstorm.data.length) {\n      for (const projectBrainstorm of project.attributes.project_brainstorm.data) {\n        let brainstorm = new ProjectBrainstorm();\n        brainstorm.initializeNewProjectBrainstorm();\n        brainstorm.mapProjectBrainstorm(projectBrainstorm);\n\n        this.brainstorms.push(brainstorm);\n      }\n    }\n\n    // map persons if they exist\n    if (project.attributes.project_person.data && project.attributes.project_person.data.length) {\n      for (const projectPerson of project.attributes.project_person.data) {\n        let person = new ProjectPerson();\n        person.initializeNewProjectPerson();\n        person.mapProjectPerson(projectPerson);\n\n        this.persons.push(person);\n      }\n    }\n\n    // map events if they exist\n    if (project.attributes.project_event.data && project.attributes.project_event.data.length) {\n      for (const projectEvent of project.attributes.project_event.data) {\n        let event = new ProjectEvent();\n        event.initializeNewProjectEvent();\n        event.mapProjectEvent(projectEvent);\n\n        this.events.push(event);\n      }\n    }\n\n    // map charts if they exist\n    if (project.attributes.project_chart.data && project.attributes.project_chart.data.length) {\n      for (const projectChart of project.attributes.project_chart.data) {\n        let chart = new ProjectChart();\n        chart.initializeNewProjectChart();\n        chart.mapProjectChart(projectChart);\n\n        this.charts.push(chart);\n      }\n    }\n  }\n\n  initializeNewProject() {\n    this.label = '';\n\n    this.essays = [];\n    this.timelines = [];\n    this.brainstorms = [];\n    this.persons = [];\n    this.events = [];\n    this.charts = [];\n  }\n}\n",
            "properties": [
                {
                    "name": "brainstorms",
                    "type": "ProjectBrainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "charts",
                    "type": "ProjectChart[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "essays",
                    "type": "ProjectEssay[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "events",
                    "type": "ProjectEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "persons",
                    "type": "ProjectPerson[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "timelines",
                    "type": "ProjectTimeline[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "initializeNewProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "mapProject",
                    "args": [
                        {
                            "name": "project",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectBrainstorm",
            "id": "class-ProjectBrainstorm-a092bf633fabceb9e3779b57457a71e4",
            "file": "src/app/models/projects/project-brainstorm.ts",
            "type": "class",
            "sourceCode": "import {Brainstorm} from '../brainstorm';\nexport class ProjectBrainstorm {\n  id: number;\n\n  brainstorm: Brainstorm;\n\n  mapProjectBrainstorm(projectBrainstorm) {\n    this.id = projectBrainstorm.id;\n\n    this.brainstorm = new Brainstorm();\n    this.brainstorm.initializeNewBrainstorm();\n    this.brainstorm.mapBrainstorm(projectBrainstorm.attributes.brainstorm.data);\n  }\n\n  initializeNewProjectBrainstorm() {\n    this.brainstorm = new Brainstorm();\n  }\n}\n",
            "properties": [
                {
                    "name": "brainstorm",
                    "type": "Brainstorm",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeNewProjectBrainstorm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "mapProjectBrainstorm",
                    "args": [
                        {
                            "name": "projectBrainstorm",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "projectBrainstorm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectBrainstormPost",
            "id": "class-ProjectBrainstormPost-8f238c8478d14d95c723e00eb523d30b",
            "file": "src/app/models/projects/posts/project-brainstorm-post.ts",
            "type": "class",
            "sourceCode": "import {Project} from '../project';\nimport {Brainstorm} from '../../brainstorm';\n\nexport class ProjectBrainstormPost {\n  data: any;\n\n  mapToPost(project: Project, brainstorm: Brainstorm) {\n    this.data = {\n      type: 'project_brainstorm',\n      attributes: {\n        project_rel: {\n          data: {\n            type: 'project',\n            id: project.id\n          }\n        },\n\n        brainstorm_rel: {\n          data: {\n            type: 'brainstorm',\n            id: brainstorm.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectChart",
            "id": "class-ProjectChart-78cbce6982b9383d8ef83115b57e366f",
            "file": "src/app/models/projects/project-chart.ts",
            "type": "class",
            "sourceCode": "import {Chart} from '../chart';\nexport class ProjectChart {\n  id: number;\n\n  chart: Chart;\n\n  mapProjectChart(projectChart) {\n    this.id = projectChart.id;\n\n    this.chart = new Chart();\n    this.chart.initializeNewChart();\n    this.chart.mapChart(projectChart.attributes.chart.data);\n  }\n\n  initializeNewProjectChart() {\n    this.chart = new Chart();\n  }\n}\n",
            "properties": [
                {
                    "name": "chart",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "initializeNewProjectChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "mapProjectChart",
                    "args": [
                        {
                            "name": "projectChart",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "projectChart",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectChartPost",
            "id": "class-ProjectChartPost-f5e00777d357e3dea2676c232fd88276",
            "file": "src/app/models/projects/posts/project-chart-post.ts",
            "type": "class",
            "sourceCode": "import {Project} from '../project';\nimport {Chart} from '../../chart';\n\nexport class ProjectChartPost {\n  data: any;\n\n  mapToPost(project: Project, chart: Chart) {\n    this.data = {\n      type: 'project_chart',\n      attributes: {\n        project_rel: {\n          data: {\n            type: 'project',\n            id: project.id\n          }\n        },\n\n        chart_rel: {\n          data: {\n            type: 'chart',\n            id: chart.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "chart",
                            "type": "Chart"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectEssay",
            "id": "class-ProjectEssay-6dc63a8b438163daae43aa6b585cd729",
            "file": "src/app/models/projects/project-essay.ts",
            "type": "class",
            "sourceCode": "import {Essay} from '../essays/essay';\n\nexport class ProjectEssay {\n  id: number;\n\n  essay: Essay;\n\n  mapProjectEssay(projectEssay) {\n    this.id = projectEssay.id;\n\n    this.essay = new Essay();\n    this.essay.initializeNewEssay();\n    this.essay.mapEssay(projectEssay.attributes.essay.data);\n  }\n\n  initializeNewProjectEssay() {\n    this.essay = new Essay();\n  }\n}\n",
            "properties": [
                {
                    "name": "essay",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "initializeNewProjectEssay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "mapProjectEssay",
                    "args": [
                        {
                            "name": "projectEssay",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "projectEssay",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectEssayPost",
            "id": "class-ProjectEssayPost-fb714095ea9ffece50efbfb439d610ea",
            "file": "src/app/models/projects/posts/project-essay-post.ts",
            "type": "class",
            "sourceCode": "import {Essay} from '../../essays/essay';\nimport {Project} from '../project';\n\nexport class ProjectEssayPost {\n  data: any;\n\n  mapToPost(project: Project, essay: Essay) {\n    this.data = {\n      type: 'project_essay',\n      attributes: {\n        project_rel: {\n          data: {\n            type: 'project',\n            id: project.id\n          }\n        },\n\n        essay_rel: {\n          data: {\n            type: 'essay',\n            id: essay.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectEvent",
            "id": "class-ProjectEvent-56c092846e300fb0173f7c8430c38635",
            "file": "src/app/models/projects/project-event.ts",
            "type": "class",
            "sourceCode": "import {Event} from '../events/event';\n\nexport class ProjectEvent {\n  id: number;\n\n  event: Event;\n\n  mapProjectEvent(projectEvent) {\n    this.id = projectEvent.id;\n\n    this.event = new Event();\n    this.event.initializeNewEvent();\n    this.event.mapEvent(projectEvent.attributes.event.data);\n  }\n\n  initializeNewProjectEvent() {\n    this.event = new Event();\n  }\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "initializeNewProjectEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "mapProjectEvent",
                    "args": [
                        {
                            "name": "projectEvent",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "projectEvent",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectEventPost",
            "id": "class-ProjectEventPost-4ab934d191f78eda59f101512b4db8aa",
            "file": "src/app/models/projects/posts/project-event-post.ts",
            "type": "class",
            "sourceCode": "import {Project} from '../project';\nimport {Event} from '../../events/event';\n\nexport class ProjectEventPost {\n  data: any;\n\n  mapToPost(project: Project, event: Event) {\n    this.data = {\n      type: 'project_event',\n      attributes: {\n        project_rel: {\n          data: {\n            type: 'project',\n            id: project.id\n          }\n        },\n\n        event_rel: {\n          data: {\n            type: 'event',\n            id: event.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectPerson",
            "id": "class-ProjectPerson-7e3e8ccd59738ca08c1dff292c6d0206",
            "file": "src/app/models/projects/project-person.ts",
            "type": "class",
            "sourceCode": "import {Person} from '../persons/person';\n\nexport class ProjectPerson {\n  id: number;\n\n  person: Person;\n\n  mapProjectPerson(projectPerson) {\n    this.id = projectPerson.id;\n\n    this.person = new Person();\n    this.person.initializeNewPerson();\n    this.person.mapPerson(projectPerson.attributes.person.data);\n  }\n\n  initializeNewProjectPerson() {\n    this.person = new Person();\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "initializeNewProjectPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "mapProjectPerson",
                    "args": [
                        {
                            "name": "projectPerson",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "projectPerson",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectPersonPost",
            "id": "class-ProjectPersonPost-b6bdf39669eb420695a5c7affcdccc6d",
            "file": "src/app/models/projects/posts/project-person-post.ts",
            "type": "class",
            "sourceCode": "import {Project} from '../project';\nimport {Person} from '../../persons/person';\nexport class ProjectPersonPost {\n  data: any;\n\n  mapToPost(project: Project, person: Person) {\n    this.data = {\n      type: 'project_person',\n      attributes: {\n        project_rel: {\n          data: {\n            type: 'project',\n            id: project.id\n          }\n        },\n\n        person_rel: {\n          data: {\n            type: 'person',\n            id: person.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectPost",
            "id": "class-ProjectPost-0bec1596a2d7ad22284dbc94495fde59",
            "file": "src/app/models/projects/posts/project-post.ts",
            "type": "class",
            "sourceCode": "import {Project} from '../project';\n\nexport class ProjectPost {\n  data;\n\n  mapToPost(project: Project, isPatch: boolean) {\n    this.data = {\n      type: 'project',\n      attributes: {\n        label: project.label\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = project.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectResponse",
            "id": "class-ProjectResponse-a380f4ae8ad984cbe85ab6742ea810ad",
            "file": "src/app/models/projects/responses/project-response.ts",
            "type": "class",
            "sourceCode": "import {Project} from '../project';\n\nexport class ProjectResponse {\n  projects: Project[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projects",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectTimeline",
            "id": "class-ProjectTimeline-834364d0daad9cc22be618d3495e2282",
            "file": "src/app/models/projects/project-timeline.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../timelines/timeline';\n\nexport class ProjectTimeline {\n  id: number;\n\n  timeline: Timeline;\n\n  mapProjectTimeline(projectTimeline) {\n    this.id = projectTimeline.id;\n\n    this.timeline = new Timeline();\n    this.timeline.initializeNewTimeline();\n    this.timeline.mapTimeline(projectTimeline.attributes.timeline.data);\n  }\n\n  initializeNewProjectTimeline() {\n    this.timeline = new Timeline();\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "initializeNewProjectTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "mapProjectTimeline",
                    "args": [
                        {
                            "name": "projectTimeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "projectTimeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectTimelinePost",
            "id": "class-ProjectTimelinePost-006f9c87bd33fdd938490904efb01e27",
            "file": "src/app/models/projects/posts/project-timeline-post.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../../timelines/timeline';\nimport {Project} from '../project';\n\nexport class ProjectTimelinePost {\n  data: any;\n\n  mapToPost(project: Project, timeline: Timeline) {\n    this.data = {\n      type: 'project_timeline',\n      attributes: {\n        project_rel: {\n          data: {\n            type: 'project',\n            id: project.id\n          }\n        },\n\n        timeline_rel: {\n          data: {\n            type: 'timeline',\n            id: timeline.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectUserPost",
            "id": "class-ProjectUserPost-cfae2d8c7c0f9c7bc97fd9a6cf54be5d",
            "file": "src/app/models/projects/posts/project-user-post.ts",
            "type": "class",
            "sourceCode": "import {Project} from '../project';\n\nexport class ProjectUserPost {\n  data: any;\n\n  mapToPost(project: Project, userId: string) {\n    this.data = {\n      type: 'project_user',\n      attributes: {\n        project_rel: {\n          data: {\n            type: 'project',\n            id: project.id\n          }\n        },\n\n        user_rel: {\n          data: {\n            type: 'user',\n            id: userId\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuickBrainstormReturnData",
            "id": "class-QuickBrainstormReturnData-4988f39402eca9da5636e5456b6cb0da",
            "file": "src/app/utilities/add-brainstorm-dialog/add-brainstorm-dialog.component.ts",
            "type": "class",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {BrainstormService} from '../../services/brainstorm.service';\nimport {Brainstorm} from '../../models/brainstorm';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickBrainstormReturnData {\n  brainstorm: Brainstorm;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-brainstorm-dialog',\n  templateUrl: './add-brainstorm-dialog.component.html',\n  styleUrls: ['./add-brainstorm-dialog.component.scss']\n})\nexport class AddBrainstormDialogComponent implements OnInit {\n  public brainstorms: Brainstorm[];\n  public brainstorm: Brainstorm;\n\n  public searchBrainstorms: Brainstorm[] = [];\n\n  public brainstormNameAutocompleteControl = new FormControl();\n  public brainstormNameFilteredOptions: Observable<Brainstorm[]>;\n\n  private returnData: QuickBrainstormReturnData;\n\n  constructor(public dialogRef: MatDialogRef<AddBrainstormDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData,\n              private brainstormService: BrainstormService) {\n    this.returnData = new QuickBrainstormReturnData();\n\n    this.brainstorm = new Brainstorm();\n    this.brainstorm.initializeNewBrainstorm();\n\n    this.brainstormService.getApiBrainstorms(null, null, '0', null, null, null, false, null, false).subscribe(response => {\n\n      this.searchBrainstorms = response.brainstorms;\n\n      this.brainstormNameFilteredOptions = this.brainstormNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(chart => this._filterBrainstormsName(chart))\n      );\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingBrainstorm(brainstorm) {\n    this.returnData.brainstorm = brainstorm;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewBrainstorm() {\n    this.returnData.brainstorm = this.brainstorm;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  private _filterBrainstormsName(filterValue: any): Brainstorm[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchBrainstorms.filter(brainstorm => {\n        if (brainstorm.title) {\n          return brainstorm.title.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_brainstorm_title').focus();\n    } catch(e) {\n      document.getElementById('new_brainstorm_title').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "brainstorm",
                    "type": "Brainstorm",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuickChartReturnData",
            "id": "class-QuickChartReturnData-8927dfb5ca4c673e040077b0fde488ea",
            "file": "src/app/utilities/add-chart-dialog/add-chart-dialog.component.ts",
            "type": "class",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Chart} from '../../models/chart';\nimport {ChartService} from '../../services/chart.service';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickChartReturnData {\n  chart: Chart;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-chart-dialog',\n  templateUrl: './add-chart-dialog.component.html',\n  styleUrls: ['./add-chart-dialog.component.scss']\n})\nexport class AddChartDialogComponent implements OnInit {\n  public charts: Chart[];\n  public chart: Chart;\n\n  public searchCharts: Chart[] = [];\n\n  public chartNameAutocompleteControl = new FormControl();\n  public chartNameFilteredOptions: Observable<Chart[]>;\n\n  private returnData: QuickChartReturnData;\n\n  constructor(private chartService: ChartService,\n              public dialogRef: MatDialogRef<AddChartDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n\n    this.returnData = new QuickChartReturnData();\n\n    this.chart = new Chart();\n    this.chart.initializeNewChart();\n\n    this.chartService.getApiCharts('/charts?page[size]=0').subscribe(response => {\n\n      this.searchCharts = response.charts;\n\n      this.chartNameFilteredOptions = this.chartNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(chart => this._filterChartsName(chart))\n      );\n    });\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveChartTitle(value) {\n    if (value) {\n      this.chart.options.title.text = value;\n    } else {\n      this.chart.options.title.text = this.chartNameAutocompleteControl.value;\n    }\n  }\n\n  saveExistingChart(chart) {\n    this.returnData.chart = chart;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewChart() {\n    this.returnData.chart = this.chart;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  private _filterChartsName(filterValue: any): Chart[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchCharts.filter(chart => {\n        if (chart.options.title.text) {\n          return chart.options.title.text.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_chart_title').focus();\n    } catch(e) {\n      document.getElementById('new_chart_title').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "chart",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuickEssayReturnData",
            "id": "class-QuickEssayReturnData-3f51d7926eb0960c1788d8fb79bc67a5",
            "file": "src/app/essays/quick-essay/quick-essay.component.ts",
            "type": "class",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Essay} from '../../models/essays/essay';\nimport {Sleep} from '../../utilities/sleep';\nimport {EssayType} from '../../models/essays/essay-type';\nimport {EssayService} from '../../services/essay.service';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickEssayReturnData {\n  essay: Essay;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-essay',\n  templateUrl: './quick-essay.component.html',\n  styleUrls: ['./quick-essay.component.scss']\n})\nexport class QuickEssayComponent implements OnInit, AfterViewInit {\n  public essay: Essay;\n\n  public essayTypes: EssayType[];\n\n  public searchEssays: Essay[] = [];\n\n  public essayTitleAutocompleteControl = new FormControl();\n  public essayTitleFilteredOptions: Observable<Essay[]>;\n  public essayTitleFieldDisplayValue: string;\n\n  private userId: string;\n\n  private returnData: QuickEssayReturnData;\n\n  constructor(public dialogRef: MatDialogRef<QuickEssayComponent>,\n              private essayService: EssayService,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    this.userId = localStorage.getItem('user.id');\n\n    this.essayTypes = [];\n\n    this.returnData = new QuickEssayReturnData;\n\n    this.essay = new Essay();\n    this.essay.initializeNewEssay();\n\n    this.essayService.getApiEssayTypes().subscribe((response) => {\n      for (const type of response.data) {\n        const newType = new EssayType();\n        newType.initializeNewEssayType();\n\n        newType.mapEssayType(type);\n\n        this.essayService.setEssayType(newType);\n      }\n\n      this.essayTypes = this.essayService.getEssayTypes();\n    });\n\n    this.essayService.getApiEssays(\n      '/essay_users',\n      this.userId,\n      '0',\n      null,\n      null,\n      false,\n      null,\n      false).subscribe(response => {\n\n      this.searchEssays = response.essays;\n\n      this.essayTitleFilteredOptions = this.essayTitleAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(essay => this._filterEssayTitle(essay))\n      );\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingEssay(essay) {\n    this.returnData.essay = essay;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewEssay() {\n    this.returnData.essay = this.essay;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  displayEssayName(essay: Essay) {\n    if (essay) {\n      this.essayTitleFieldDisplayValue = '';\n\n      if (essay.title) {\n        this.essayTitleFieldDisplayValue = essay.title;\n      }\n    }\n\n    return this.essayTitleFieldDisplayValue;\n  }\n\n  private _filterEssayTitle(filterValue: any): Essay[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchEssays.filter(essay => {\n\n        if (essay.title) {\n          return essay.title.toLowerCase().includes(filterValue);\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n\n  selectEssayType(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_essay_label').focus();\n    } catch(e) {\n      document.getElementById('essay_label').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "essay",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuickEventReturnData",
            "id": "class-QuickEventReturnData-bf5a0608f2d9639bde0b76328cc03fdf",
            "file": "src/app/manager/events/quick-event/quick-event.component.ts",
            "type": "class",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Sleep} from '../../../utilities/sleep';\n\nimport {SourceService} from '../../../services/source.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\n\nimport {Source} from '../../../models/source';\nimport {Event} from '../../../models/events/event';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\nimport {EventService} from '../../../services/event.service';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickEventReturnData {\n  event: Event;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-event',\n  templateUrl: './quick-event.component.html',\n  styleUrls: ['./quick-event.component.scss']\n})\nexport class QuickEventComponent implements OnInit, AfterViewInit {\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  public searchEvents: Event[] = [];\n  public eventTitleAutocompleteControl = new FormControl();\n  public eventTitleFilteredOptions: Observable<Event[]>;\n  public eventTitleFieldDisplayValue: string;\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n  public sources: Source[] = [];\n\n  public event: Event;\n\n  private returnData: QuickEventReturnData;\n\n  constructor(private eventService: EventService,\n              private sourceService: SourceService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData,\n              public dialogRef: MatDialogRef<QuickEventComponent>) {\n\n    this.event = new Event();\n    this.event.initializeNewEvent();\n\n    this.returnData = new QuickEventReturnData();\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        const newEra = new Era().mapEra(era);\n\n        // set to AD so that drop-downs auto populate with the value.\n        if (newEra.label === 'AD') {\n          this.event.startEra = newEra;\n          this.event.endEra = newEra;\n        }\n\n        this.eras.push(newEra);\n      }\n    });\n\n    this.monthService.getMonths().subscribe(months => {\n      for (const month of months.data) {\n        this.months.push(new Month().mapMonth(month));\n      }\n    });\n\n    this.sourceService.getApiSources('/references?page[size]=0&fields[reference]=title,sub_title').subscribe(sources => {\n      for (const source of sources.sources) {\n        this.sourceService.setSource(source);\n      }\n\n      this.sources = this.sourceService.getSources();\n\n      this.sourcesFilteredOptions = this.sourcesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(source => this._filterSources(source))\n      );\n    });\n\n    this.eventService.getApiEvents('/events?page[size]=0&fields[event]=label',\n      null, null, false).subscribe(response => {\n      this.searchEvents = response.events;\n\n      this.eventTitleFilteredOptions = this.eventTitleAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(event => this._filterEventsTitle(event))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveSource() {\n    this.event.source = this.sourcesAutocompleteControl.value;\n  }\n\n  saveEventTitle(value) {\n    if (value) {\n      this.event.label = value;\n    } else {\n      this.event.label = this.eventTitleAutocompleteControl.value;\n    }\n  }\n\n  saveExistingEvent(event: Event) {\n    this.returnData.event = event;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewEvent() {\n    this.returnData.event = this.event;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  displaySource(source: Source) {\n    if (source) {\n      this.sourceFieldDisplayValue = source.title;\n\n      if (source.subTitle) {\n        this.sourceFieldDisplayValue = this.sourceFieldDisplayValue + ': ' + source.subTitle;\n      }\n    }\n\n    return this.sourceFieldDisplayValue;\n  }\n\n  displayEvent(event: Event) {\n    if (event) {\n      this.eventTitleFieldDisplayValue = '';\n\n      if (event.label) {\n        this.eventTitleFieldDisplayValue = event.label;\n      }\n    }\n\n    return this.eventTitleFieldDisplayValue;\n  }\n\n  private _filterSources(filterValue: any): Source[] {\n    // when a source is actually selected the value is changed to the source itself. Do not filter if that is the case.\n    if (!filterValue.id) {\n      filterValue = filterValue.toLowerCase();\n\n      return this.sources.filter(source => {\n        return source.title.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n\n  private _filterEventsTitle(filterValue: any): Event[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchEvents.filter(event => {\n        if (event.label) {\n          return event.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_event_title').focus();\n    } catch(e) {\n      document.getElementById('event_label').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuickPersonReturnData",
            "id": "class-QuickPersonReturnData-c4a9d10c921695665e5d288ebe8ebd19",
            "file": "src/app/manager/persons/quick-person/quick-person.component.ts",
            "type": "class",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Sleep} from '../../../utilities/sleep';\n\nimport {Source} from '../../../models/source';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\nimport {Person} from '../../../models/persons/person';\n\nimport {PersonService} from '../../../services/person.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickPersonReturnData {\n  person: Person;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-person',\n  templateUrl: './quick-person.component.html',\n  styleUrls: ['./quick-person.component.scss']\n})\nexport class QuickPersonComponent implements OnInit, AfterViewInit {\n  public searchPersons: Person[] = [];\n\n  public personNameAutocompleteControl = new FormControl();\n  public personNameFilteredOptions: Observable<Person[]>;\n  public personNameFieldDisplayValue: string;\n\n  public personFirstNameAutocompleteControl = new FormControl();\n  public personFirstNameFilteredOptions: Observable<Person[]>;\n  public personFirstNameFieldDisplayValue: string;\n\n  public personLastNameAutocompleteControl = new FormControl();\n  public personLastNameFilteredOptions: Observable<Person[]>;\n  public personLastNameFieldDisplayValue: string;\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n  public sources: Source[] = [];\n\n  public person: Person;\n\n  private returnData: QuickPersonReturnData;\n\n  constructor(private personService: PersonService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              public dialogRef: MatDialogRef<QuickPersonComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n\n    this.returnData = new QuickPersonReturnData();\n\n    this.person = new Person();\n    this.person.initializeNewPerson();\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        const newEra = new Era().mapEra(era);\n\n        // set to AD so that drop-downs auto populate with the value.\n        if (newEra.label === 'AD') {\n          this.person.birthEra = newEra;\n          this.person.deathEra = newEra;\n        }\n\n        this.eras.push(newEra);\n      }\n    });\n\n    this.monthService.getMonths().subscribe(months => {\n      for (const month of months.data) {\n        this.months.push(new Month().mapMonth(month));\n      }\n    });\n\n    this.personService.getApiPersons(\n      '/persons?page[size]=0&fields[person]=first_name,last_name,birth_year,birth_era,death_year,death_era&sort=last_name',\n      null, null, false)\n      .subscribe(response => {\n\n      this.searchPersons = response.persons;\n\n      this.personNameFilteredOptions = this.personNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsName(person))\n      );\n\n      this.personFirstNameFilteredOptions = this.personFirstNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsFirstName(person))\n      );\n\n      this.personLastNameFilteredOptions = this.personLastNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsLastName(person))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingPerson(person) {\n    this.returnData.person = person;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewPerson() {\n    this.returnData.person = this.person;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  savePersonFirstName(value) {\n    if (value) {\n      this.person.firstName = value;\n    }\n  }\n\n  savePersonLastName(value) {\n    if (value) {\n      this.person.lastName = value;\n    }\n  }\n\n  displayPersonName(person: Person) {\n    if (person) {\n      this.personNameFieldDisplayValue = '';\n\n      if (person.firstName) {\n        this.personNameFieldDisplayValue = person.firstName;\n      }\n\n      if (person.lastName) {\n        this.personNameFieldDisplayValue = this.personNameFieldDisplayValue + ' ' + person.lastName;\n      }\n    }\n\n    return this.personFirstNameFieldDisplayValue;\n  }\n\n  displayPersonFirstName(person: Person) {\n    if (person) {\n      this.personFirstNameFieldDisplayValue = '';\n\n      if (person.firstName) {\n        this.personFirstNameFieldDisplayValue = person.firstName;\n      }\n    }\n\n    return this.personFirstNameFieldDisplayValue;\n  }\n\n  displayPersonLastName(person: Person) {\n    if (person) {\n      this.personLastNameFieldDisplayValue = '';\n\n      if (person.lastName) {\n        this.personLastNameFieldDisplayValue = person.lastName;\n      }\n    }\n\n    return this.personLastNameFieldDisplayValue;\n  }\n\n  private _filterPersonsName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.firstName || person.lastName) {\n          return person.firstName.toLowerCase().includes(filterValue) || person.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterPersonsFirstName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.firstName) {\n          return person.firstName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterPersonsLastName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.lastName) {\n          return person.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('person_name').focus();\n    } catch(e) {\n      document.getElementById('person_first_name').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "isExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuickTimelineReturnData",
            "id": "class-QuickTimelineReturnData-0e0991e36da759b8d3ba9cc807176377",
            "file": "src/app/utilities/add-timeline-dialog/add-timeline-dialog.component.ts",
            "type": "class",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {map, startWith} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\nimport {TimelineService} from '../../services/timeline.service';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickTimelineReturnData {\n  timeline: Timeline;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-timeline-dialog',\n  templateUrl: './add-timeline-dialog.component.html',\n  styleUrls: ['./add-timeline-dialog.component.scss']\n})\nexport class AddTimelineDialogComponent implements OnInit {\n  public timelines: Timeline[];\n  public timeline: Timeline;\n\n  public searchTimelines: Timeline[] = [];\n\n  public timelineNameAutocompleteControl = new FormControl();\n  public timelineNameFilteredOptions: Observable<Timeline[]>;\n\n  private returnData: QuickTimelineReturnData;\n\n  constructor(private timelineService: TimelineService,\n              public dialogRef: MatDialogRef<AddTimelineDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    this.returnData = new QuickTimelineReturnData();\n\n    this.timeline = new Timeline();\n    this.timeline.initializeNewTimeline();\n\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['id', 'label'], null, null, null, false).subscribe(response => {\n      this.searchTimelines = response.timelines;\n\n      this.timelineNameFilteredOptions = this.timelineNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterTimelinesName(timeline))\n      );\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  saveExistingTimeline(timeline) {\n    this.returnData.timeline = timeline;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewTimeline() {\n    this.returnData.timeline = this.timeline;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveTimelineTitle(value) {\n    if (value) {\n      this.timeline.label = value;\n    } else {\n      this.timeline.label = this.timelineNameAutocompleteControl.value;\n    }\n  }\n\n  private _filterTimelinesName(filterValue: any): Timeline[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchTimelines.filter(timeline => {\n        if (timeline.label) {\n          return timeline.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_timeline_title').focus();\n    } catch(e) {\n      document.getElementById('new_timeline_title').focus();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "isExisting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScalesOptions",
            "id": "class-ScalesOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "xAxes",
                    "type": "AxesOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 383
                },
                {
                    "name": "yAxes",
                    "type": "AxesOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 384
                }
            ],
            "methods": [
                {
                    "name": "initializeNewScalesOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 386
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Sleep",
            "id": "class-Sleep-c89e9b284f9d10e6d7318498652838b6",
            "file": "src/app/utilities/sleep.ts",
            "type": "class",
            "sourceCode": "export class Sleep {\n  static wait(ms): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "wait",
                    "args": [
                        {
                            "name": "ms",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 2,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Source",
            "id": "class-Source-f3dc01fe7c8dd5028577db2c634eabb8",
            "file": "src/app/models/source.ts",
            "type": "class",
            "sourceCode": "import { Author } from './author';\nimport { Month } from './month';\nimport { Era } from './era';\nimport { SourceNote } from './source-note';\n\nexport class Source {\n  id: number;\n  title: string;\n  subTitle: string;\n  publishedDay: number;\n  publishedMonth: Month;\n  publishedYear: number;\n  publishedEra: Era;\n  authors: Author[];\n  notes: SourceNote[];\n\n  formattedPublishedDate: string;\n\n  // Api uses JsonAPI protocol. This maps that standard to this Angular Model\n  mapSource(source) {\n    const month = new Month();\n    const era = new Era();\n\n    const self = this;\n\n    self.id = source.id;\n    self.title = source.attributes.title;\n\n    if (source.attributes.published_year) {\n      self.publishedYear = source.attributes.published_year;\n    }\n\n    if (source.attributes.published_era) {\n      self.publishedEra = era.mapEra(source.attributes.published_era.data);\n    }\n\n    // optional fields\n    if (source.attributes.sub_title) {\n      self.subTitle = source.attributes.sub_title;\n    }\n\n    if (source.attributes.published_day) {\n      self.publishedDay = source.attributes.published_day;\n    }\n\n    if (source.attributes.published_month) {\n      self.publishedMonth = month.mapMonth(source.attributes.published_month.data);\n    }\n\n    self.authors = [];\n\n    if (source.attributes.reference_author && source.attributes.reference_author.data.length) {\n      for (const sourceAuthor of source.attributes.reference_author.data) {\n        const author = new Author();\n\n        author.mapAuthor(sourceAuthor.attributes.author.data, sourceAuthor.id);\n\n        this.authors.push(author);\n      }\n    }\n\n    self.notes = [];\n\n    if (source.attributes.reference_note && source.attributes.reference_note.data.length) {\n      for (const sourceNote of source.attributes.reference_note.data) {\n        const note = new SourceNote();\n        note.initializeNote();\n\n        note.mapNote(sourceNote);\n\n        this.notes.push(note);\n      }\n    }\n\n    this.formatPublishedDate();\n\n    return self;\n  }\n\n  initializeSource() {\n    this.title = '';\n    this.subTitle = '';\n    this.publishedDay = null;\n    this.publishedMonth = new Month();\n    this.publishedYear = null;\n    this.publishedEra = new Era();\n    this.authors = [];\n    this.notes = [];\n\n    this.formattedPublishedDate = '';\n  }\n\n  formatPublishedDate() {\n    this.formattedPublishedDate = '';\n\n    if (this.publishedMonth && this.publishedMonth.label) {\n      this.formattedPublishedDate += this.publishedMonth.label;\n\n      if (this.publishedDay) {\n        this.formattedPublishedDate += ' ' + this.publishedDay.toString() + ', ' + this.publishedYear.toString();\n      } else {\n        this.formattedPublishedDate += ' ' + this.publishedYear.toString();\n      }\n    } else {\n      if (this.publishedYear) {\n        this.formattedPublishedDate += this.publishedYear.toString();\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "formattedPublishedDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "notes",
                    "type": "SourceNote[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "publishedDay",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "publishedEra",
                    "type": "Era",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "publishedMonth",
                    "type": "Month",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "publishedYear",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "formatPublishedDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "initializeSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "mapSource",
                    "args": [
                        {
                            "name": "source",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SourceAuthorPost",
            "id": "class-SourceAuthorPost-c0b2f16f75be91b0c3382519f48f8568",
            "file": "src/app/models/posts/source-author-post.ts",
            "type": "class",
            "sourceCode": "import { Source } from '../source';\nimport { Author } from '../author';\n\nexport class SourceAuthorPost {\n  data;\n\n  mapToPost(source: Source, author: Author) {\n    this.data = {\n      type: 'reference_author',\n      attributes: {\n        reference_rel: {\n          data: {\n            type: 'reference',\n            id: source.id\n          }\n        },\n        author_rel: {\n          data: {\n            type: 'author',\n            id: author.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        },
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SourceNote",
            "id": "class-SourceNote-12bd6af274d1dddd98c089efd428a42d",
            "file": "src/app/models/source-note.ts",
            "type": "class",
            "sourceCode": "import {Brainstorm} from './brainstorm';\nexport class SourceNote {\n  id: number;\n  note: string;\n  chapter: string;\n  page: number;\n  exportBrainstorms: Brainstorm[];\n\n  initializeNote() {\n    this.note = '';\n    this.chapter = null;\n    this.page = null;\n\n    this.exportBrainstorms = [];\n  }\n\n  mapNote(note) {\n    this.id = note.id;\n    this.note = note.attributes.note;\n\n    if (note.attributes.chapter) {\n      this.chapter = note.attributes.chapter;\n    }\n\n    if (note.attributes.page) {\n      this.page = note.attributes.page;\n    }\n\n    if (note.attributes.reference_note_export_destination.data && note.attributes.reference_note_export_destination.data.length) {\n      for (const exportBrainstorm of note.attributes.reference_note_export_destination.data) {\n        const brainstorm = new Brainstorm();\n        brainstorm.initializeNewBrainstorm();\n        brainstorm.mapBrainstorm(exportBrainstorm.attributes.brainstorm.data);\n\n        this.exportBrainstorms.push(brainstorm);\n      }\n    }\n\n    return this;\n  }\n}\n",
            "properties": [
                {
                    "name": "chapter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "exportBrainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "note",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "initializeNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9
                },
                {
                    "name": "mapNote",
                    "args": [
                        {
                            "name": "note",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SourceNoteBrainstorm",
            "id": "class-SourceNoteBrainstorm-b2c51bd85ec69398d416c97e67f00249",
            "file": "src/app/models/source-note-brainstorm.ts",
            "type": "class",
            "sourceCode": "import {Brainstorm} from './brainstorm';\nimport {SourceNote} from './source-note';\nexport class SourceNoteBrainstorm {\n  id: number;\n  sourceNote: SourceNote;\n  brainstorm: Brainstorm;\n\n  initializeSourceNoteBrainstorm() {\n    this.sourceNote = new SourceNote();\n    this.brainstorm = new Brainstorm();\n  }\n}\n",
            "properties": [
                {
                    "name": "brainstorm",
                    "type": "Brainstorm",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sourceNote",
                    "type": "SourceNote",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeSourceNoteBrainstorm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SourceNoteBrainstormPost",
            "id": "class-SourceNoteBrainstormPost-8fb880b078afc4565d0cb57c728dc33d",
            "file": "src/app/models/posts/source-note-brainstorm-post.ts",
            "type": "class",
            "sourceCode": "import {SourceNote} from '../source-note';\nimport {Brainstorm} from '../brainstorm';\nexport class SourceNoteBrainstormPost {\n  data;\n\n  mapToPost(sourceNote: SourceNote, brainstorm: Brainstorm, isPatch: boolean) {\n    this.data = {\n      type: 'reference_note_export_brainstorm_destination',\n\n      attributes: {\n        reference_note_rel: {\n          data: {\n            type: 'reference_note',\n            id: sourceNote.id\n          }\n        },\n\n        brainstorm_rel: {\n          data: {\n            type: 'brainstorm',\n            id: brainstorm.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = sourceNote.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "sourceNote",
                            "type": "SourceNote"
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "sourceNote",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "brainstorm",
                            "type": "Brainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SourceNotePost",
            "id": "class-SourceNotePost-059f52da5bc3bf8a3eb661f9bf963032",
            "file": "src/app/models/posts/source-note-post.ts",
            "type": "class",
            "sourceCode": "import {SourceNote} from '../source-note';\nimport {Source} from '../source';\n\nexport class SourceNotePost {\n  data;\n\n  mapToPost(sourceNote: SourceNote, source: Source, isPatch: boolean) {\n    this.data = {\n      type: 'reference_note',\n      attributes: {\n        note: sourceNote.note,\n        reference_rel: {\n          data: {\n            type: 'reference',\n            id: source.id\n          }\n        }\n      }\n    };\n\n    if (sourceNote.chapter) {\n      this.data.attributes.chapter = sourceNote.chapter;\n    }\n\n    if (sourceNote.page) {\n      this.data.attributes.page = sourceNote.page;\n    }\n\n    if (isPatch) {\n      this.data.id = sourceNote.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "sourceNote",
                            "type": "SourceNote"
                        },
                        {
                            "name": "source",
                            "type": "Source"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "sourceNote",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SourcePost",
            "id": "class-SourcePost-88643109c086a9e2c6f2f6023c06c3ec",
            "file": "src/app/models/posts/source-post.ts",
            "type": "class",
            "sourceCode": "import { Source } from '../source';\n\nexport class SourcePost {\n  data;\n\n  mapToPost(source: Source, isPatch: boolean) {\n    this.data = {\n      type: 'reference',\n      attributes: {\n        title: source.title,\n        published_year: source.publishedYear,\n        published_era_rel: {\n          data: {\n            type: 'era',\n            id: source.publishedEra.id\n          }\n        }\n      }\n    };\n\n    // Optional fields\n    if (source.subTitle) {\n      this.data.attributes.sub_title = source.subTitle;\n    }\n\n    if (source.publishedDay) {\n      this.data.attributes.published_day = source.publishedDay;\n    }\n\n    if (source.publishedMonth && source.publishedMonth.id) {\n      this.data.attributes.published_month_rel = {\n        data: {\n          type: 'month',\n          id: source.publishedMonth.id\n        }\n      };\n    }\n\n    if (isPatch) {\n      this.data.id = source.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SourceResponse",
            "id": "class-SourceResponse-a25b5819e594c03581027a48005835fc",
            "file": "src/app/models/responses/source-response.ts",
            "type": "class",
            "sourceCode": "import {Source} from '../source';\nexport class SourceResponse {\n  sources: Source[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sources",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TickOptions",
            "id": "class-TickOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "beginAtZero",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 361
                },
                {
                    "name": "callback",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 362
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTickOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 364
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Timeline",
            "id": "class-Timeline-7dff37477051e6fdd052e3627949088e",
            "file": "src/app/models/timelines/timeline.ts",
            "type": "class",
            "sourceCode": "import {TimelineCategory} from './timeline-category';\nimport {TimelinePerson} from './timeline-person';\nimport {TimelineEvent} from './timeline-event';\n\nexport class Timeline {\n  id: number;\n  label: string;\n  description: string;\n  events: TimelineEvent[];\n  persons: TimelinePerson[];\n  categories: TimelineCategory[];\n\n  initializeNewTimeline() {\n    this.id = 0;\n    this.description = '';\n    this.label = '';\n    this.events = [];\n    this.persons = [];\n    this.categories = [];\n  }\n\n  mapTimeline(timeline) {\n    const self = this;\n\n    self.id = timeline.id;\n    self.label = timeline.attributes.label;\n    self.description = timeline.attributes.description;\n\n    if (timeline.attributes.timeline_category) {\n      if (timeline.attributes.timeline_category.data.length) {\n        self.categories = [];\n\n        for (const returnedCategory of timeline.attributes.timeline_category.data) {\n          const category: TimelineCategory = new TimelineCategory();\n\n          category.mapTimelineCategory(returnedCategory);\n\n          self.categories.push(category);\n        }\n      }\n    }\n\n    if (timeline.attributes.timeline_event) {\n      if (timeline.attributes.timeline_event.data.length) {\n        self.events = [];\n\n        for (const returnedEvent of timeline.attributes.timeline_event.data) {\n          const timelineEvent: TimelineEvent = new TimelineEvent();\n          timelineEvent.initializeNewTimelineEvent();\n          timelineEvent.mapTimelineEvent(returnedEvent);\n\n          self.events.push(timelineEvent);\n        }\n      }\n    }\n\n    if (timeline.attributes.timeline_person) {\n      if (timeline.attributes.timeline_person.data.length) {\n\n        self.persons = [];\n\n        for (const returnedPerson of timeline.attributes.timeline_person.data) {\n          const person: TimelinePerson = new TimelinePerson();\n          person.mapTimelinePerson(returnedPerson.attributes.person.data);\n\n          self.persons.push(person);\n        }\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "categories",
                    "type": "TimelineCategory[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "events",
                    "type": "TimelineEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "persons",
                    "type": "TimelinePerson[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "mapTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineCategory",
            "id": "class-TimelineCategory-2be671e179e3c4b402ae04e9edc98d1e",
            "file": "src/app/models/timelines/timeline-category.ts",
            "type": "class",
            "sourceCode": "export class TimelineCategory {\n  id: number;\n  label: string;\n  events: Array<any>;\n  people: Array<any>;\n\n  initializeNewTimelineCategory() {\n    this.label = '';\n    this.events = [];\n    this.people = [];\n  }\n\n  mapTimelineCategory(category) {\n    this.initializeNewTimelineCategory();\n\n    const self = this;\n\n    self.id = category.id;\n    self.label = category.attributes.label;\n\n    for (const returnedEvent of category.attributes.timeline_category_event.data) {\n      const ids = [returnedEvent.id, returnedEvent.attributes.event.data.id];\n      self.events.push(ids);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "events",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "people",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTimelineCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7
                },
                {
                    "name": "mapTimelineCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineCategoryEventPost",
            "id": "class-TimelineCategoryEventPost-6ebe2cb692887e0eb3f31d3a53f7defd",
            "file": "src/app/models/posts/timeline-category-event-post.ts",
            "type": "class",
            "sourceCode": "import {TimelineCategory} from '../timelines/timeline-category';\nimport {Event} from '../events/event';\n\nexport class TimelineCategoryEventPost {\n  data;\n\n  mapToPost(timelineCategory: TimelineCategory, event: Event) {\n    this.data = {\n      type: 'timeline_category_event',\n      attributes: {\n        timeline_category_rel: {\n          data: {\n            type: 'timeline_category',\n            id: timelineCategory.id\n          }\n        },\n        event_rel: {\n          data: {\n            type: 'event',\n            id: event.id\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineCategoryPersonPost",
            "id": "class-TimelineCategoryPersonPost-40c04f843e92e45d112036e5792cda71",
            "file": "src/app/models/posts/timeline-category-person-post.ts",
            "type": "class",
            "sourceCode": "export class TimelineCategoryPersonPost {\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineCategoryPost",
            "id": "class-TimelineCategoryPost-cf9a6a1d19727daadbd511b4460b122a",
            "file": "src/app/models/posts/timeline-category-post.ts",
            "type": "class",
            "sourceCode": "import {TimelineCategory} from '../timelines/timeline-category';\nimport {Timeline} from '../timelines/timeline';\n\nexport class TimelineCategoryPost {\n  data;\n\n  mapToPost(timelineCategory: TimelineCategory, timeline: Timeline) {\n    this.data = {\n      type: 'timeline_category',\n      attributes: {\n        timeline_rel: {\n          data: {\n            type: 'timeline',\n            id: timeline.id\n          }\n        },\n        label: timelineCategory.label\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "timelineCategory",
                            "type": "TimelineCategory",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineEvent",
            "id": "class-TimelineEvent-b8a87438ec5d471efbcc2efefdbf4f94",
            "file": "src/app/models/timelines/timeline-event.ts",
            "type": "class",
            "sourceCode": "import { Event } from '../events/event';\nimport { Timeline } from './timeline';\n\nexport class TimelineEvent {\n  id: number;\n  isShadow: boolean;\n  priority: number;\n  event: Event;\n\n  initializeNewTimelineEvent() {\n    this.id = null;\n\n    this.event = new Event();\n    this.event.initializeNewEvent();\n\n    this.isShadow = false;\n    this.priority = 0;\n  }\n\n  mapTimelineEvent(timelineEvent) {\n    this.id = timelineEvent.id;\n    this.isShadow = timelineEvent.attributes.is_shadow;\n    this.priority = timelineEvent.attributes.priority;\n\n    this.event.mapEvent(timelineEvent.attributes.event.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isShadow",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "priority",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTimelineEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                },
                {
                    "name": "mapTimelineEvent",
                    "args": [
                        {
                            "name": "timelineEvent",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "timelineEvent",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineEventPost",
            "id": "class-TimelineEventPost-e77d200861c8c22844c26419304f6104",
            "file": "src/app/models/posts/timeline-event-post.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../timelines/timeline';\nimport {Event} from '../events/event';\n\nexport class TimelineEventPost {\n  data;\n\n  mapToPost(event: Event, timeline: Timeline, isShadow: boolean, priority: number, isPatch: boolean, timelineEventId: number) {\n    this.data = {\n      type: 'timeline_event',\n      attributes: {\n        timeline_rel: {\n          data: {\n            type: 'timeline',\n            id: timeline.id\n          }\n        },\n        event_rel: {\n          data: {\n            type: 'event',\n            id: event.id\n          }\n        },\n        is_shadow: isShadow,\n        priority: priority\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = timelineEventId;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        },
                        {
                            "name": "isShadow",
                            "type": "boolean"
                        },
                        {
                            "name": "priority",
                            "type": "number"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        },
                        {
                            "name": "timelineEventId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isShadow",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "priority",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timelineEventId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineEventsResponse",
            "id": "class-TimelineEventsResponse-d1d156f430832f0338f58c731c905982",
            "file": "src/app/models/responses/event-response.ts",
            "type": "class",
            "sourceCode": "import {Event} from '../events/event';\nimport {EventTimeline} from '../events/event-timeline';\nimport {TimelineEvent} from '../timelines/timeline-event';\n\nexport class EventResponse {\n  events: Event[];\n  links: any;\n  total: number;\n}\n\nexport class EventTimelinesResponse {\n  eventTimelines: EventTimeline[];\n  links: any;\n  total: number;\n}\n\nexport class TimelineEventsResponse {\n  timelineEvents: TimelineEvent[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timelineEvents",
                    "type": "TimelineEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelinePerson",
            "id": "class-TimelinePerson-fce0dacd149787acd958d3d3b5841bb5",
            "file": "src/app/models/timelines/timeline-person.ts",
            "type": "class",
            "sourceCode": "import { Person } from '../persons/person';\n\nexport class TimelinePerson {\n  id: number;\n  person: Person;\n\n  initializeNewTimelinePerson() {\n    this.id = null;\n    this.person = new Person();\n  }\n\n  mapTimelinePerson(person: Person) {\n    this.id = person.timelinePersonId;\n\n    this.person = new Person();\n    this.person.initializeNewPerson();\n    this.person.mapPerson(person);\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTimelinePerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7
                },
                {
                    "name": "mapTimelinePerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelinePersonPost",
            "id": "class-TimelinePersonPost-2d6fb139999a5372bec29571dec16019",
            "file": "src/app/models/posts/timeline-person-post.ts",
            "type": "class",
            "sourceCode": "import {PersonTimeline} from '../persons/person-timeline';\n\nexport class TimelinePersonPost {\n  data;\n\n  mapToPost(personTimeline: PersonTimeline, isPatch: boolean) {\n    this.data = {\n      type: 'timeline_person',\n      attributes: {\n        timeline_rel: {\n          data: {\n            type: 'timeline',\n            id: personTimeline.timeline.id\n          }\n        },\n        person_rel: {\n          data: {\n            type: 'person',\n            id: personTimeline.person.id\n          }\n        }\n      }\n    };\n\n    if (isPatch) {\n      this.data.id = personTimeline.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "personTimeline",
                            "type": "PersonTimeline"
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "personTimeline",
                            "type": "PersonTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelinePost",
            "id": "class-TimelinePost-d05d2ab1544e2fe660cf36802369d24e",
            "file": "src/app/models/posts/timeline-post.ts",
            "type": "class",
            "sourceCode": "import { Timeline } from '../timelines/timeline';\n\nexport class TimelinePost {\n  data;\n\n  mapToPost(timeline: Timeline, isPatch) {\n    this.data = {\n      type: 'timeline',\n      attributes: {\n        label: timeline.label\n      }\n    };\n\n    if (timeline.description) {\n      this.data.attributes.description = timeline.description;\n    }\n\n    if (isPatch) {\n      this.data.id = timeline.id;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        },
                        {
                            "name": "isPatch",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPatch",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineResponse",
            "id": "class-TimelineResponse-5cd09ec8645a12cc9c969b83bb739e2a",
            "file": "src/app/models/responses/timeline-response.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../timelines/timeline';\n\nexport class TimelineResponse {\n  timelines: Timeline[];\n  links: any;\n  total: number;\n}\n\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimelineUserPost",
            "id": "class-TimelineUserPost-babbbbb9b80106bb2df03a24abc18c85",
            "file": "src/app/models/timelines/posts/timeline-user-post.ts",
            "type": "class",
            "sourceCode": "import {Timeline} from '../timeline';\n\nexport class TimelineUserPost {\n  data: any;\n\n  mapToPost(timeline: Timeline, userId: string) {\n    this.data = {\n      type: 'timeline_user',\n      attributes: {\n        timeline_rel: {\n          data: {\n            type: 'timeline',\n            id: timeline.id\n          }\n        },\n\n        user_rel: {\n          data: {\n            type: 'user',\n            id: userId\n          }\n        }\n      }\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "mapToPost",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TitleOptions",
            "id": "class-TitleOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "display",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 299
                },
                {
                    "name": "fontColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 304
                },
                {
                    "name": "fontFamily",
                    "type": "ChartFontFamilies",
                    "optional": false,
                    "description": "",
                    "line": 303
                },
                {
                    "name": "fontSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 302
                },
                {
                    "name": "fontStyle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 305
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 297
                },
                {
                    "name": "lineHeight",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 307
                },
                {
                    "name": "padding",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 306
                },
                {
                    "name": "position",
                    "type": "ChartTitlePositions",
                    "optional": false,
                    "description": "",
                    "line": 301
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 300
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTitleOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309
                },
                {
                    "name": "mapTitleOptions",
                    "args": [
                        {
                            "name": "titleOptions",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "jsdoctags": [
                        {
                            "name": "titleOptions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TooltipOptions",
            "id": "class-TooltipOptions-c99d53868c3766b9f29ba957d5ae60f3",
            "file": "src/app/models/chart-options.ts",
            "type": "class",
            "sourceCode": "import {ChartTitlePositions} from '../enums/chart-title-positions';\nimport {ChartFontFamilies} from '../enums/chart-font-families';\nimport {ChartLegendAlignments} from '../enums/legend-alignments';\n\nexport class LegendLabelOptions {\n  id: number;\n\n  boxWidth: number;\n  padding: number;\n  usePointStyle: boolean;\n  fontSize: number;\n  fontStyle: string;\n  fontColor: string;\n  fontFamily: string;\n  // generateLabels: any;\n\n  initializeNewLegendLabelOptions() {\n    this.padding = 10;\n    this.boxWidth = 40;\n    this.usePointStyle = false;\n    this.fontSize = 12;\n    this.fontStyle = 'normal';\n    this.fontColor = '#000000';\n    this.fontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    // this.generateLabels = null;\n  }\n\n  mapLegendLabelOptions(legendLabelOptions) {\n    this.id = legendLabelOptions.id;\n\n    if (legendLabelOptions.attributes.padding) {\n      this.padding = legendLabelOptions.attributes.padding;\n    }\n\n    if (legendLabelOptions.attributes.box_width) {\n      this.boxWidth = legendLabelOptions.attributes.box_width;\n    }\n\n    this.usePointStyle = legendLabelOptions.attributes.use_point_style;\n\n    if (legendLabelOptions.attributes.font_size) {\n      this.fontSize = legendLabelOptions.attributes.font_size;\n    }\n\n    if (legendLabelOptions.attributes.font_style) {\n      this.fontStyle = legendLabelOptions.attributes.font_style;\n    }\n\n    if (legendLabelOptions.attributes.font_color) {\n      this.fontColor = legendLabelOptions.attributes.font_color;\n    }\n\n    if (legendLabelOptions.attributes.font_family) {}\n    this.fontFamily = legendLabelOptions.attributes.font_family;\n  }\n}\n\nexport class LegendOptions {\n  id: number;\n\n  display: boolean;\n  position: ChartTitlePositions;\n  align: ChartLegendAlignments;\n  fullWidth: boolean;\n  reverse: boolean;\n\n  labels: LegendLabelOptions;\n\n  initializeNewLegendOptions() {\n    this.display = true;\n    this.position = ChartTitlePositions.TOP;\n    this.align = ChartLegendAlignments.CENTER;\n    this.fullWidth = true;\n    this.reverse = false;\n\n    this.labels = new LegendLabelOptions();\n    this.labels.initializeNewLegendLabelOptions();\n  }\n\n  mapLegendOptions(legendOptions) {\n    this.id = legendOptions.id;\n\n    this.display = legendOptions.attributes.display;\n\n    if (legendOptions.attributes.position) {\n      this.position = legendOptions.attributes.position;\n    }\n\n    if (legendOptions.attributes.align) {\n      this.align = legendOptions.attributes.align;\n    }\n\n    this.fullWidth = legendOptions.attributes.full_width;\n\n    this.reverse = legendOptions.attributes.reverse;\n\n    if (legendOptions.attributes.chart_legend_label_options && legendOptions.attributes.chart_legend_label_options.data.length) {\n      const newLegendLabelOptions = new LegendLabelOptions();\n      newLegendLabelOptions.initializeNewLegendLabelOptions();\n\n      newLegendLabelOptions.mapLegendLabelOptions(legendOptions.attributes.chart_legend_label_options.data[0]);\n\n      this.labels = newLegendLabelOptions;\n    }\n  }\n}\n\nexport class TooltipOptions {\n  id: number;\n\n  enabled: boolean;\n  backgroundColor: string;\n  titleFontFamily: string;\n  titleFontSize: number;\n  titleFontStyle: string;\n  titleFontColor: string;\n  titleAlign: string;\n  titleSpacing: number;\n  titleMarginBottom: number;\n  bodyFontFamily: string;\n  bodyFontSize: number;\n  bodyFontStyle: string;\n  bodyFontColor: string;\n  bodyAlign: string;\n  bodySpacing: number;\n  footerFontFamily: string;\n  footerFontSize: number;\n  footerFontStyle: string;\n  footerFontColor: string;\n  footerAlign: string;\n  footerSpacing: number;\n  footerMarginTop: number;\n  xPadding: number;\n  yPadding: number;\n  caretPadding: number;\n  caretSize: number;\n  cornerRadius: number;\n  displayColors: boolean;\n  borderColor: string;\n  borderWidth: number;\n\n  initializeNewTooltipOptions() {\n    this.enabled = true;\n    this.backgroundColor = '#d9dedb';\n    this.titleFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.titleFontSize = 12;\n    this.titleFontStyle = 'bold';\n    this.titleFontColor = '#fff';\n    this.titleAlign = 'left';\n    this.titleSpacing = 2;\n    this.titleMarginBottom = 6;\n    this.bodyFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.bodyFontSize = 12;\n    this.bodyFontStyle = 'normal';\n    this.bodyFontColor = '#fff';\n    this.bodyAlign = 'left';\n    this.bodySpacing = 2;\n    this.footerFontFamily = '\\'Helvetica Neue\\', \\'Helvetica\\', \\'Arial\\', \\'sans-serif\\'';\n    this.footerFontSize = 12;\n    this.footerFontStyle = 'bold';\n    this.footerFontColor = '#fff';\n    this.footerAlign = 'left';\n    this.footerSpacing = 2;\n    this.footerMarginTop = 6;\n    this.xPadding = 6;\n    this.yPadding = 6;\n    this.caretPadding = 2;\n    this.caretSize = 5;\n    this.cornerRadius = 6;\n    this.displayColors = true;\n    this.borderColor = '#d9dedb';\n    this.borderWidth = 0;\n  }\n\n  mapTooltipOptions(tooltipOptions) {\n    this.id = tooltipOptions.id;\n\n    this.enabled = tooltipOptions.attributes.enabled;\n\n    if (tooltipOptions.attributes.background_color) {\n      this.backgroundColor = tooltipOptions.attributes.background_color;\n    }\n\n    if (tooltipOptions.attributes.title_font_family) {\n      this.titleFontFamily = tooltipOptions.attributes.title_font_family;\n    }\n\n    if (tooltipOptions.attributes.title_font_size) {\n      this.titleFontSize = tooltipOptions.attributes.title_font_size;\n    }\n\n    if (tooltipOptions.attributes.title_font_style) {\n      this.titleFontStyle = tooltipOptions.attributes.title_font_style;\n    }\n\n    if (tooltipOptions.attributes.title_font_color) {\n      this.titleFontColor = tooltipOptions.attributes.title_font_color;\n    }\n\n    if (tooltipOptions.attributes.title_align) {\n      this.titleAlign = tooltipOptions.attributes.title_align;\n    }\n\n    if (tooltipOptions.attributes.title_spacing) {\n      this.titleSpacing = tooltipOptions.attributes.title_spacing;\n    }\n\n    if (tooltipOptions.attributes.title_margin_bottom) {\n      this.titleMarginBottom = tooltipOptions.attributes.title_margin_bottom;\n    }\n\n    if (tooltipOptions.attributes.body_font_family) {\n      this.bodyFontFamily = tooltipOptions.attributes.body_font_family;\n    }\n\n    if (tooltipOptions.attributes.body_font_size) {\n      this.bodyFontSize = tooltipOptions.attributes.body_font_size;\n    }\n\n    if (tooltipOptions.attributes.body_font_style) {\n      this.bodyFontStyle = tooltipOptions.attributes.body_font_style;\n    }\n\n    if (tooltipOptions.attributes.body_font_color) {\n      this.bodyFontColor = tooltipOptions.attributes.body_font_color;\n    }\n\n    if (tooltipOptions.attributes.body_align) {\n      this.bodyAlign = tooltipOptions.attributes.body_align;\n    }\n\n    if (tooltipOptions.attributes.body_spacing) {\n      this.bodySpacing = tooltipOptions.attributes.body_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_font_family) {\n      this.footerFontFamily = tooltipOptions.attributes.footer_font_family;\n    }\n\n    if (tooltipOptions.attributes.footer_font_size) {\n      this.footerFontSize = tooltipOptions.attributes.footer_font_size;\n    }\n\n    if (tooltipOptions.attributes.footer_font_style) {\n      this.footerFontStyle = tooltipOptions.attributes.footer_font_style;\n    }\n\n    if (tooltipOptions.attributes.footer_font_color) {\n      this.footerFontColor = tooltipOptions.attributes.footer_font_color;\n    }\n\n    if (tooltipOptions.attributes.footer_align) {\n      this.footerAlign = tooltipOptions.attributes.footer_align;\n    }\n\n    if (tooltipOptions.attributes.footer_spacing) {\n      this.footerSpacing = tooltipOptions.attributes.footer_spacing;\n    }\n\n    if (tooltipOptions.attributes.footer_margin_top) {\n      this.footerMarginTop = tooltipOptions.attributes.footer_margin_top;\n    }\n\n    if (tooltipOptions.attributes.x_padding) {\n      this.xPadding = tooltipOptions.attributes.x_padding;\n    }\n\n    if (tooltipOptions.attributes.y_padding) {\n      this.yPadding = tooltipOptions.attributes.y_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_padding) {\n      this.caretPadding = tooltipOptions.attributes.caret_padding;\n    }\n\n    if (tooltipOptions.attributes.caret_size) {\n      this.caretSize = tooltipOptions.attributes.caret_size;\n    }\n\n    if (tooltipOptions.attributes.corner_radius) {\n      this.cornerRadius = tooltipOptions.attributes.corner_radius;\n    }\n\n    this.displayColors = tooltipOptions.attributes.display_colors;\n\n    if (tooltipOptions.attributes.border_width) {\n      this.borderWidth = tooltipOptions.attributes.border_width;\n    }\n\n    if (tooltipOptions.attributes.border_color) {\n      this.borderColor = tooltipOptions.attributes.border_color;\n    }\n  }\n}\n\nexport class TitleOptions {\n  id: number;\n\n  display: boolean;\n  text: string;\n  position: ChartTitlePositions;\n  fontSize: number;\n  fontFamily: ChartFontFamilies;\n  fontColor: string;\n  fontStyle: string;\n  padding: number;\n  lineHeight: string;\n\n  initializeNewTitleOptions() {\n    this.display = true;\n    this.text = 'New Chart';\n    this.position = ChartTitlePositions.TOP;\n    this.fontSize = 26;\n    this.fontFamily = ChartFontFamilies.DEFAULT;\n    this.fontColor = '#000000';\n    this.fontStyle = 'bold';\n    this.padding = 20;\n    this.lineHeight = '2.1';\n  }\n\n  mapTitleOptions(titleOptions) {\n    this.id = titleOptions.id;\n\n    this.display = titleOptions.attributes.display;\n\n    if (titleOptions.attributes.text) {\n      this.text = titleOptions.attributes.text;\n    }\n\n    if (titleOptions.attributes.position) {\n      this.position = titleOptions.attributes.position;\n    }\n\n    if (titleOptions.attributes.font_size) {\n      this.fontSize = titleOptions.attributes.font_size;\n    }\n\n    if (titleOptions.attributes.font_family) {\n      this.fontFamily = titleOptions.attributes.font_family;\n    }\n\n    if (titleOptions.attributes.font_color) {\n      this.fontColor = titleOptions.attributes.font_color;\n    }\n\n    if (titleOptions.attributes.font_style) {\n      this.fontStyle = titleOptions.attributes.font_style;\n    }\n\n    if (titleOptions.attributes.padding) {\n      this.padding = titleOptions.attributes.padding;\n    }\n\n    if (titleOptions.attributes.line_height) {\n      this.lineHeight = titleOptions.attributes.line_height;\n    }\n  }\n}\n\nexport class TickOptions {\n  beginAtZero: boolean;\n  callback: any;\n\n  initializeNewTickOptions() {\n    this.beginAtZero = false;\n    this.callback = (value, index, values) => value;\n  }\n}\n\nexport class AxesOptions {\n  display: boolean;\n  ticks: TickOptions;\n\n  initializeNewAxesOptions() {\n    this.display = true;\n    this.ticks = new TickOptions();\n\n    this.ticks.initializeNewTickOptions();\n  }\n}\n\nexport class ScalesOptions {\n  xAxes: AxesOptions[];\n  yAxes: AxesOptions[];\n\n  initializeNewScalesOptions() {\n    this.xAxes = [];\n    this.yAxes = [];\n\n    const xAxesOptions = new AxesOptions();\n    xAxesOptions.initializeNewAxesOptions();\n\n    this.xAxes.push(xAxesOptions);\n\n    const yAxesOptions = new AxesOptions();\n    yAxesOptions.initializeNewAxesOptions();\n\n    this.yAxes.push(yAxesOptions);\n  }\n}\n\nexport class ChartOptions {\n  id: number;\n  responsive: boolean;\n  maintainAspectRatio: boolean;\n\n  title: TitleOptions;\n  legend: LegendOptions;\n  tooltips: TooltipOptions;\n\n  scales: ScalesOptions;\n\n  initializeNewOptions() {\n    this.responsive = true;\n    this.maintainAspectRatio = true;\n\n    this.title = new TitleOptions();\n    this.title.initializeNewTitleOptions();\n\n    this.legend = new LegendOptions();\n    this.legend.initializeNewLegendOptions();\n\n    this.tooltips = new TooltipOptions();\n    this.tooltips.initializeNewTooltipOptions();\n\n    this.scales = new ScalesOptions();\n    this.scales.initializeNewScalesOptions();\n  }\n\n  mapOptions(chartOptions) {\n    this.id = chartOptions.id;\n\n    if (chartOptions.attributes.maintain_aspect_ratio) {\n      this.maintainAspectRatio = chartOptions.attributes.maintain_aspect_ratio;\n    }\n\n    if (chartOptions.attributes.responsive) {\n      this.responsive = chartOptions.attributes.responsive;\n    }\n\n    if (chartOptions.attributes.chart_title_options && chartOptions.attributes.chart_title_options.data.length) {\n      const newTitleOptions = new TitleOptions();\n      newTitleOptions.initializeNewTitleOptions();\n\n      newTitleOptions.mapTitleOptions(chartOptions.attributes.chart_title_options.data[0]);\n\n      this.title = newTitleOptions;\n    }\n\n    if (chartOptions.attributes.chart_legend_options && chartOptions.attributes.chart_legend_options.data.length) {\n      const newLegendOptions = new LegendOptions();\n      newLegendOptions.initializeNewLegendOptions();\n\n      newLegendOptions.mapLegendOptions(chartOptions.attributes.chart_legend_options.data[0]);\n\n      this.legend = newLegendOptions;\n    }\n\n    if (chartOptions.attributes.chart_tooltip_options && chartOptions.attributes.chart_tooltip_options.data.length) {\n      const newTooltipOptions = new TooltipOptions();\n      newTooltipOptions.initializeNewTooltipOptions();\n\n      newTooltipOptions.mapTooltipOptions(chartOptions.attributes.chart_tooltip_options.data[0]);\n\n      this.tooltips = newTooltipOptions;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "bodyAlign",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "bodyFontColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "bodyFontFamily",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "bodyFontSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "bodyFontStyle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "bodySpacing",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "borderColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "borderWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "caretPadding",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "caretSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "cornerRadius",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "displayColors",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "enabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "footerAlign",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "footerFontColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "footerFontFamily",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "footerFontSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "footerFontStyle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "footerMarginTop",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "footerSpacing",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "titleAlign",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "titleFontColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "titleFontFamily",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "titleFontSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "titleFontStyle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "titleMarginBottom",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "titleSpacing",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "xPadding",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "yPadding",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 134
                }
            ],
            "methods": [
                {
                    "name": "initializeNewTooltipOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142
                },
                {
                    "name": "mapTooltipOptions",
                    "args": [
                        {
                            "name": "tooltipOptions",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "tooltipOptions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-fec85da5a84d0419d4a3a8370403f5ab",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\n  id: string;\n  firstName: string;\n  lastName: string;\n\n  mapUser(user) {\n    this.id = user.id;\n    this.firstName = user.attributes.first_name;\n    this.lastName = user.attributes.last_name;\n  }\n\n  initializeNewUser() {\n    this.firstName = '';\n    this.lastName = '';\n  }\n}\n",
            "properties": [
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "initializeNewUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "mapUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserResponse",
            "id": "class-UserResponse-3b080b4e65e2865dd2d8f435c85a0e14",
            "file": "src/app/models/users/responses/user-response.ts",
            "type": "class",
            "sourceCode": "import {User} from '../../user';\n\nexport class UserResponse {\n  users: User[];\n  links: any;\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddBrainstormDialogComponent",
            "id": "component-AddBrainstormDialogComponent-4988f39402eca9da5636e5456b6cb0da",
            "file": "src/app/utilities/add-brainstorm-dialog/add-brainstorm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-brainstorm-dialog",
            "styleUrls": [
                "./add-brainstorm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-brainstorm-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brainstorm",
                    "type": "Brainstorm",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstormNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstormNameFilteredOptions",
                    "type": "Observable<Brainstorm[]>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddBrainstormDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "returnData",
                    "type": "QuickBrainstormReturnData",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchBrainstorms",
                    "defaultValue": "[]",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterBrainstormsName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Brainstorm[]",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "saveExistingBrainstorm",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewBrainstorm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {BrainstormService} from '../../services/brainstorm.service';\nimport {Brainstorm} from '../../models/brainstorm';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickBrainstormReturnData {\n  brainstorm: Brainstorm;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-brainstorm-dialog',\n  templateUrl: './add-brainstorm-dialog.component.html',\n  styleUrls: ['./add-brainstorm-dialog.component.scss']\n})\nexport class AddBrainstormDialogComponent implements OnInit {\n  public brainstorms: Brainstorm[];\n  public brainstorm: Brainstorm;\n\n  public searchBrainstorms: Brainstorm[] = [];\n\n  public brainstormNameAutocompleteControl = new FormControl();\n  public brainstormNameFilteredOptions: Observable<Brainstorm[]>;\n\n  private returnData: QuickBrainstormReturnData;\n\n  constructor(public dialogRef: MatDialogRef<AddBrainstormDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData,\n              private brainstormService: BrainstormService) {\n    this.returnData = new QuickBrainstormReturnData();\n\n    this.brainstorm = new Brainstorm();\n    this.brainstorm.initializeNewBrainstorm();\n\n    this.brainstormService.getApiBrainstorms(null, null, '0', null, null, null, false, null, false).subscribe(response => {\n\n      this.searchBrainstorms = response.brainstorms;\n\n      this.brainstormNameFilteredOptions = this.brainstormNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(chart => this._filterBrainstormsName(chart))\n      );\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingBrainstorm(brainstorm) {\n    this.returnData.brainstorm = brainstorm;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewBrainstorm() {\n    this.returnData.brainstorm = this.brainstorm;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  private _filterBrainstormsName(filterValue: any): Brainstorm[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchBrainstorms.filter(brainstorm => {\n        if (brainstorm.title) {\n          return brainstorm.title.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_brainstorm_title').focus();\n    } catch(e) {\n      document.getElementById('new_brainstorm_title').focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-brainstorm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddBrainstormDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddBrainstormDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form #brainstormForm=\"ngForm\">\n  <div *ngIf=\"data.showExisting\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Brainstorms</div>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Brainstorm\"\n            matInput\n            #brainstormLabelField\n            name=\"existing_brainstorm_title\"\n            id=\"existing_brainstorm_title\"\n            [formControl]=\"brainstormNameAutocompleteControl\"\n            [matAutocomplete]=\"brainstormNameAutoComplete\">\n\n          <mat-autocomplete autoActiveFirstOption #brainstormNameAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveExistingBrainstorm($event.option.value)\">\n            <mat-option *ngFor=\"let brainstorm of brainstormNameFilteredOptions | async\" [value]=\"brainstorm\">\n              {{brainstorm.title}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n\n  <div *ngIf=\"data.showNew && data.showExisting\" class=\"app-add-object-overlay\">\n    <div>OR</div>\n  </div>\n\n  <div *ngIf=\"data.showNew\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">New Brainstorm</div>\n      </div>\n      <div class=\"app-drawer-tools\">\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"saveNewBrainstorm()\">save</button>\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            matInput\n            placeholder=\"Title\"\n            name=\"new_brainstorm_title\"\n            id=\"new_brainstorm_title\"\n            #brainstormTitle=\"ngModel\"\n            [(ngModel)]=\"brainstorm.title\" />\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "AddChartDialogComponent",
            "id": "component-AddChartDialogComponent-8927dfb5ca4c673e040077b0fde488ea",
            "file": "src/app/utilities/add-chart-dialog/add-chart-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-chart-dialog",
            "styleUrls": [
                "./add-chart-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-chart-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartNameFilteredOptions",
                    "type": "Observable<Chart[]>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "charts",
                    "type": "Chart[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddChartDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "returnData",
                    "type": "QuickChartReturnData",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchCharts",
                    "defaultValue": "[]",
                    "type": "Chart[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterChartsName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Chart[]",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "saveChartTitle",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveExistingChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Chart} from '../../models/chart';\nimport {ChartService} from '../../services/chart.service';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickChartReturnData {\n  chart: Chart;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-chart-dialog',\n  templateUrl: './add-chart-dialog.component.html',\n  styleUrls: ['./add-chart-dialog.component.scss']\n})\nexport class AddChartDialogComponent implements OnInit {\n  public charts: Chart[];\n  public chart: Chart;\n\n  public searchCharts: Chart[] = [];\n\n  public chartNameAutocompleteControl = new FormControl();\n  public chartNameFilteredOptions: Observable<Chart[]>;\n\n  private returnData: QuickChartReturnData;\n\n  constructor(private chartService: ChartService,\n              public dialogRef: MatDialogRef<AddChartDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n\n    this.returnData = new QuickChartReturnData();\n\n    this.chart = new Chart();\n    this.chart.initializeNewChart();\n\n    this.chartService.getApiCharts('/charts?page[size]=0').subscribe(response => {\n\n      this.searchCharts = response.charts;\n\n      this.chartNameFilteredOptions = this.chartNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(chart => this._filterChartsName(chart))\n      );\n    });\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveChartTitle(value) {\n    if (value) {\n      this.chart.options.title.text = value;\n    } else {\n      this.chart.options.title.text = this.chartNameAutocompleteControl.value;\n    }\n  }\n\n  saveExistingChart(chart) {\n    this.returnData.chart = chart;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewChart() {\n    this.returnData.chart = this.chart;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  private _filterChartsName(filterValue: any): Chart[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchCharts.filter(chart => {\n        if (chart.options.title.text) {\n          return chart.options.title.text.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_chart_title').focus();\n    } catch(e) {\n      document.getElementById('new_chart_title').focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-chart-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "chartService",
                        "type": "ChartService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddChartDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddChartDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form #addChartForm=\"ngForm\">\n  <div *ngIf=\"data.showExisting\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Charts</div>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Chart\"\n            matInput\n            #chartLabelField\n            name=\"chart_title\"\n            id=\"chart_title\"\n            [formControl]=\"chartNameAutocompleteControl\"\n            [matAutocomplete]=\"chartNameAutoComplete\">\n\n          <mat-autocomplete autoActiveFirstOption #chartNameAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveExistingChart($event.option.value)\">\n            <mat-option *ngFor=\"let chart of chartNameFilteredOptions | async\" [value]=\"chart\">\n              {{chart.options.title.text}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n\n  <div *ngIf=\"data.showNew && data.showExisting\" class=\"app-add-object-overlay\">\n    <div>OR</div>\n  </div>\n\n  <div *ngIf=\"data.showNew\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">New Chart</div>\n      </div>\n      <div class=\"app-drawer-tools\">\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"saveNewChart()\">save</button>\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Title\"\n            matInput\n            #chartTitleField\n            name=\"chart_title\"\n            id=\"chart_title\"\n            (focusout)=\"saveChartTitle(chartTitleField.value)\"\n            [formControl]=\"chartNameAutocompleteControl\"\n            [matAutocomplete]=\"chartTitleAutoComplete\">\n\n          <mat-autocomplete #chartTitleAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveExistingChart(null)\">\n            <mat-option *ngFor=\"let chart of chartNameFilteredOptions | async\" [value]=\"chart\">\n              {{chart.options.title.text}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "AddProjectDialogComponent",
            "id": "component-AddProjectDialogComponent-540ca6f388a66b7281771b50122dfd2e",
            "file": "src/app/utilities/add-project-dialog/add-project-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-project-dialog",
            "styleUrls": [
                "./add-project-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-project-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddProjectDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "project",
                    "type": "Project",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {Project} from '../../models/projects/project';\nimport {Sleep} from '../sleep';\n\n@Component({\n  selector: 'app-add-project-dialog',\n  templateUrl: './add-project-dialog.component.html',\n  styleUrls: ['./add-project-dialog.component.scss']\n})\nexport class AddProjectDialogComponent implements OnInit {\n  public project: Project;\n\n  constructor(public dialogRef: MatDialogRef<AddProjectDialogComponent>) {\n    this.project = new Project();\n    this.project.initializeNewProject();\n  }\n\n  ngOnInit(): void {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    document.getElementById('new_project_label').focus();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-project-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddProjectDialogComponent>"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddProjectDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-header\">\n  <div class=\"app-drawer-title\">\n    <div class=\"app-drawer-subheading\">New Project</div>\n  </div>\n  <div class=\"app-drawer-tools\">\n    <button mat-icon-button type=\"button\" class=\"material-icons\" [mat-dialog-close]=\"project\">save</button>\n    <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n  </div>\n</div>\n\n<div class=\"app-drawer-content\">\n  <section class=\"app-section\">\n    <mat-form-field style=\"width: 100%\">\n      <input\n        type=\"text\"\n        placeholder=\"New Project\"\n        matInput\n        #newProjectLabelField\n        name=\"new_project_label\"\n        id=\"new_project_label\"\n        [(ngModel)]=\"project.label\">\n    </mat-form-field>\n  </section>\n</div>\n"
        },
        {
            "name": "AddTimelineDialogComponent",
            "id": "component-AddTimelineDialogComponent-0e0991e36da759b8d3ba9cc807176377",
            "file": "src/app/utilities/add-timeline-dialog/add-timeline-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-timeline-dialog",
            "styleUrls": [
                "./add-timeline-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-timeline-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddTimelineDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "returnData",
                    "type": "QuickTimelineReturnData",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchTimelines",
                    "defaultValue": "[]",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineNameFilteredOptions",
                    "type": "Observable<Timeline[]>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterTimelinesName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Timeline[]",
                    "typeParameters": [],
                    "line": 88,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "saveExistingTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "saveTimelineTitle",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {map, startWith} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\nimport {TimelineService} from '../../services/timeline.service';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {Sleep} from '../sleep';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickTimelineReturnData {\n  timeline: Timeline;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-add-timeline-dialog',\n  templateUrl: './add-timeline-dialog.component.html',\n  styleUrls: ['./add-timeline-dialog.component.scss']\n})\nexport class AddTimelineDialogComponent implements OnInit {\n  public timelines: Timeline[];\n  public timeline: Timeline;\n\n  public searchTimelines: Timeline[] = [];\n\n  public timelineNameAutocompleteControl = new FormControl();\n  public timelineNameFilteredOptions: Observable<Timeline[]>;\n\n  private returnData: QuickTimelineReturnData;\n\n  constructor(private timelineService: TimelineService,\n              public dialogRef: MatDialogRef<AddTimelineDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    this.returnData = new QuickTimelineReturnData();\n\n    this.timeline = new Timeline();\n    this.timeline.initializeNewTimeline();\n\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['id', 'label'], null, null, null, false).subscribe(response => {\n      this.searchTimelines = response.timelines;\n\n      this.timelineNameFilteredOptions = this.timelineNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterTimelinesName(timeline))\n      );\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  saveExistingTimeline(timeline) {\n    this.returnData.timeline = timeline;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewTimeline() {\n    this.returnData.timeline = this.timeline;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveTimelineTitle(value) {\n    if (value) {\n      this.timeline.label = value;\n    } else {\n      this.timeline.label = this.timelineNameAutocompleteControl.value;\n    }\n  }\n\n  private _filterTimelinesName(filterValue: any): Timeline[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchTimelines.filter(timeline => {\n        if (timeline.label) {\n          return timeline.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_timeline_title').focus();\n    } catch(e) {\n      document.getElementById('new_timeline_title').focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-timeline-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddTimelineDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddTimelineDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form #addTimelineForm=\"ngForm\">\n  <div *ngIf=\"data.showExisting\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Existing Timelines</div>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Timeline\"\n            matInput\n            #timelineLabelField\n            name=\"existing_timeline_title\"\n            id=\"existing_timeline_title\"\n            [formControl]=\"timelineNameAutocompleteControl\"\n            [matAutocomplete]=\"timelineNameAutoComplete\">\n\n          <mat-autocomplete autoActiveFirstOption #timelineNameAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveExistingTimeline($event.option.value)\">\n            <mat-option *ngFor=\"let timeline of timelineNameFilteredOptions | async\" [value]=\"timeline\">\n              {{timeline.label}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n\n  <div *ngIf=\"data.showNew && data.showExisting\" class=\"app-add-object-overlay\">\n    <div>OR</div>\n  </div>\n\n  <div *ngIf=\"data.showNew\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">New Timeline</div>\n      </div>\n      <div class=\"app-drawer-tools\">\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"saveNewTimeline()\">save</button>\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"New Timeline\"\n            matInput\n            #newTimelineTitleField\n            name=\"new_timeline_title\"\n            id=\"new_timeline_title\"\n            (focusout)=\"saveTimelineTitle(newTimelineTitleField.value)\"\n            [formControl]=\"timelineNameAutocompleteControl\"\n            [matAutocomplete]=\"newTimelineNameAutoComplete\">\n\n          <mat-autocomplete autoActiveFirstOption #newTimelineNameAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveTimelineTitle(null)\">\n            <mat-option *ngFor=\"let timeline of timelineNameFilteredOptions | async\" [value]=\"timeline\">\n              {{timeline.label}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "AddUserDialogComponent",
            "id": "component-AddUserDialogComponent-717cfed8d6f4a61fed7bf8935a921506",
            "file": "src/app/utilities/add-user-dialog/add-user-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-user-dialog",
            "styleUrls": [
                "./add-user-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-user-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddUserDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "filterCurrentUserOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {UserService} from '../../services/user.service';\nimport {User} from '../../models/user';\nimport {MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-add-user-dialog',\n  templateUrl: './add-user-dialog.component.html',\n  styleUrls: ['./add-user-dialog.component.scss']\n})\nexport class AddUserDialogComponent implements OnInit {\n  public currentUser: User;\n\n  public users: User[];\n  public user: User;\n\n  constructor(public dialogRef: MatDialogRef<AddUserDialogComponent>,\n              private userService: UserService) {\n    this.currentUser = this.userService.getLoggedInUser();\n\n    this.users = this.userService.getUsers();\n\n    if (!this.users.length) {\n      this.userService.getApiUsers(null).subscribe((response) => {\n        for (const user of response.users) {\n          this.userService.setUser(user);\n        }\n\n        this.users = this.userService.getUsers();\n\n        this.filterCurrentUserOut();\n      });\n    } else {\n      this.filterCurrentUserOut();\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  filterCurrentUserOut() {\n    // remove the current user from the list\n    for (let i = 0; i < this.users.length; i++) {\n      if (this.users[i].id === this.currentUser.id) {\n        this.users.splice(i, 1);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-user-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddUserDialogComponent>"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddUserDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-header\">\n  <div class=\"app-drawer-title\">\n    <div class=\"app-drawer-subheading\">Add User</div>\n  </div>\n  <div class=\"app-drawer-tools\">\n    <button mat-icon-button type=\"button\" class=\"material-icons\" [mat-dialog-close]=\"user\">save</button>\n    <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n  </div>\n</div>\n\n<div class=\"app-drawer-content\" *ngIf=\"users.length\">\n  <section class=\"app-section\">\n    <mat-form-field style=\"width: 100%\">\n      <mat-select [(ngModel)]=\"user\" name=\"selected_user\">\n        <mat-option [value]=\"null\"></mat-option>\n        <mat-option [value]=\"currentUser\">Myself</mat-option>\n        <mat-option *ngFor=\"let user of users\" [value]=\"user\">{{user.firstName}} {{user.lastName}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n  </section>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0b250acdb7790bcdfedfb34ead037d95",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authorsLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstormsLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartsLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essaysLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventsLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personsLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelinesLinkActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'history-app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "addActiveClass",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "setActiveClass",
                    "args": [
                        {
                            "name": "pathname",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "pathname",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {AuthService} from './services/auth.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'history-app';\n\n  public timelinesLinkActive: boolean;\n  public eventsLinkActive: boolean;\n  public personsLinkActive: boolean;\n  public sourcesLinkActive: boolean;\n  public authorsLinkActive: boolean;\n  public chartsLinkActive: boolean;\n  public essaysLinkActive: boolean;\n  public brainstormsLinkActive: boolean;\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n    this.timelinesLinkActive = true;\n    this.eventsLinkActive = false;\n    this.personsLinkActive = false;\n    this.sourcesLinkActive = false;\n    this.authorsLinkActive = false;\n    this.chartsLinkActive = false;\n    this.essaysLinkActive = false;\n    this.brainstormsLinkActive = false;\n\n    this.setActiveClass(location.pathname);\n  }\n\n  addActiveClass($event) {\n    this.setActiveClass($event.target.pathname);\n  }\n\n  setActiveClass(pathname) {\n    if (pathname.startsWith('/timeline')) {\n      this.timelinesLinkActive = true;\n      this.eventsLinkActive = false;\n      this.personsLinkActive = false;\n      this.sourcesLinkActive = false;\n      this.authorsLinkActive = false;\n      this.essaysLinkActive = false;\n      this.brainstormsLinkActive = false;\n      this.chartsLinkActive = false;\n\n    } else if (pathname.startsWith('/manager/events')) {\n      this.timelinesLinkActive = false;\n      this.eventsLinkActive = true;\n      this.personsLinkActive = false;\n      this.sourcesLinkActive = false;\n      this.authorsLinkActive = false;\n      this.essaysLinkActive = false;\n      this.brainstormsLinkActive = false;\n      this.chartsLinkActive = false;\n\n    } else if (pathname.startsWith('/manager/persons')) {\n      this.timelinesLinkActive = false;\n      this.eventsLinkActive = false;\n      this.personsLinkActive = true;\n      this.sourcesLinkActive = false;\n      this.authorsLinkActive = false;\n      this.essaysLinkActive = false;\n      this.brainstormsLinkActive = false;\n      this.chartsLinkActive = false;\n\n    } else if (pathname.startsWith('/manager/sources')) {\n      this.timelinesLinkActive = false;\n      this.eventsLinkActive = false;\n      this.personsLinkActive = false;\n      this.sourcesLinkActive = true;\n      this.authorsLinkActive = false;\n      this.essaysLinkActive = false;\n      this.brainstormsLinkActive = false;\n      this.chartsLinkActive = false;\n\n    } else if (pathname.startsWith('/manager/authors')) {\n      this.timelinesLinkActive = false;\n      this.eventsLinkActive = false;\n      this.personsLinkActive = false;\n      this.sourcesLinkActive = false;\n      this.authorsLinkActive = true;\n      this.essaysLinkActive = false;\n      this.brainstormsLinkActive = false;\n      this.chartsLinkActive = false;\n\n    } else if (pathname.startsWith('/manager/charts')) {\n      this.timelinesLinkActive = false;\n      this.eventsLinkActive = false;\n      this.personsLinkActive = false;\n      this.sourcesLinkActive = false;\n      this.authorsLinkActive = false;\n      this.essaysLinkActive = false;\n      this.brainstormsLinkActive = false;\n      this.chartsLinkActive = true;\n\n    } else if (pathname.startsWith('/essay')) {\n      this.timelinesLinkActive = false;\n      this.eventsLinkActive = false;\n      this.personsLinkActive = false;\n      this.sourcesLinkActive = false;\n      this.authorsLinkActive = false;\n      this.essaysLinkActive = true;\n      this.brainstormsLinkActive = false;\n      this.chartsLinkActive = false;\n\n    } else if (pathname.startsWith('/brainstorming')) {\n      this.timelinesLinkActive = false;\n      this.eventsLinkActive = false;\n      this.personsLinkActive = false;\n      this.sourcesLinkActive = false;\n      this.authorsLinkActive = false;\n      this.essaysLinkActive = false;\n      this.brainstormsLinkActive = true;\n      this.chartsLinkActive = false;\n    }\n  }\n\n  logout() {\n    AuthService.logOut();\n\n    this.router.navigate(['login/']).then();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/_variables.scss';\n\n.app-main-nav {\n  display: flex;\n  justify-content: center;\n  background-color: $color-gray-scale-600;\n  color: $color-lightest;\n  list-style: none;\n  height: 60px;\n  padding: 0 5%;\n  box-shadow: 0px 1px 4px 0px rgba(0,0,0,0.3);\n\n  nav {\n    display: flex;\n    align-items: center;\n\n    .app-name {\n      color: white;\n      opacity: 1;\n      font-weight: bold;\n      font-size: 1.2rem;\n      width: 9rem;\n      }\n\n    li {\n      height: 100%;\n      margin-right: 82px;\n      a {\n        height: 100%;\n        display: flex;\n        align-items: center;\n        border-bottom: solid 4px transparent;\n        &.active {\n          border-bottom-color: $color-active;\n          opacity: 1;\n        }\n      }\n    }\n\n    a {\n      color: $color-lightest;\n      opacity: 0.7;\n      &:hover {\n        opacity: 1;\n        text-decoration: none;\n      }\n\n    }\n\n    button {\n      margin-left: 30px;\n\n    }\n  }\n\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header class=\"app-main-nav\">\n  <nav>\n    <a class=\"app-name\" routerLink=\"/timelines\" (click)=\"addActiveClass($event)\">HDM</a>\n\n    <button mat-icon-button aria-label=\"Dashboard\" routerLink=\"/dashboard\">\n      <mat-icon>dashboard</mat-icon>\n    </button>\n\n    <button mat-icon-button aria-label=\"Projects\" routerLink=\"/projects\">\n      <mat-icon>collections_bookmark</mat-icon>\n    </button>\n\n    <button mat-icon-button aria-label=\"Timelines\" routerLink=\"/timelines\">\n      <mat-icon>timeline</mat-icon>\n    </button>\n\n    <button mat-icon-button aria-label=\"Essays\" routerLink=\"/essays\">\n      <mat-icon>assignment</mat-icon>\n    </button>\n\n    <button mat-icon-button aria-label=\"Brainstorms\" routerLink=\"/brainstorming\">\n      <mat-icon>bubble_chart</mat-icon>\n    </button>\n\n    <button mat-icon-button [matMenuTriggerFor]=\"dataMenu\" aria-label=\"Data\">\n      <mat-icon>folder_open</mat-icon>\n    </button>\n\n    <mat-menu #dataMenu=\"matMenu\">\n      <button mat-menu-item routerLink=\"manager/events\">\n        <mat-icon>event</mat-icon>\n        <span>Events</span>\n      </button>\n\n      <button mat-menu-item routerLink=\"manager/persons\">\n        <mat-icon>person</mat-icon>\n        <span>People</span>\n      </button>\n\n      <button mat-menu-item routerLink=\"manager/charts\">\n        <mat-icon>pie_chart</mat-icon>\n        <span>Charts</span>\n      </button>\n\n      <button mat-menu-item routerLink=\"manager/sources\">\n        <mat-icon>book</mat-icon>\n        <span>Sources</span>\n      </button>\n\n      <button mat-menu-item routerLink=\"manager/authors\">\n        <mat-icon>local_library</mat-icon>\n        <span>Authors</span>\n      </button>\n    </mat-menu>\n\n    <button mat-icon-button [matMenuTriggerFor]=\"settingsMenu\" aria-label=\"Settings\">\n      <mat-icon>settings</mat-icon>\n    </button>\n\n    <mat-menu #settingsMenu=\"matMenu\">\n      <button mat-menu-item routerLink=\"user\">\n        <mat-icon>people</mat-icon>\n        <span>Users</span>\n      </button>\n\n      <button mat-menu-item (click)=\"logout()\">\n        <mat-icon>eject</mat-icon>\n        <span>Logout</span>\n      </button>\n    </mat-menu>\n  </nav>\n</header>\n\n<div class=\"main-content\">\n  <router-outlet></router-outlet>\n</div>\n\n"
        },
        {
            "name": "AuthorCardComponent",
            "id": "component-AuthorCardComponent-cf1087dbe7f268f655c577fb3c8690a0",
            "file": "src/app/manager/authors/author-card/author-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author-card",
            "styleUrls": [
                "./author-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./author-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "author",
                    "line": 11,
                    "type": "Author"
                },
                {
                    "name": "canDelete",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "isSourceAttachment",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeAuthor",
                    "line": 15,
                    "type": "EventEmitter<Author>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveAuthor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Author } from '../../../models/author';\n\n@Component({\n  selector: 'app-author-card',\n  templateUrl: './author-card.component.html',\n  styleUrls: ['./author-card.component.scss']\n})\nexport class AuthorCardComponent implements OnInit {\n  @Input() public author: Author;\n  @Input() public canDelete: boolean;\n  @Input() public isSourceAttachment: boolean;\n\n  @Output() private removeAuthor: EventEmitter<Author>;\n\n  constructor() {\n    this.removeAuthor = new EventEmitter<Author>();\n\n    if (!this.isSourceAttachment) {\n      this.isSourceAttachment = false;\n    }\n  }\n\n  ngOnInit() { }\n\n  doRemoveAuthor() {\n    this.removeAuthor.emit(this.author);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_cards.scss';\n@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./author-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveAuthor()\">delete</button>\n\n  <div routerLink=\"/manager/authors/{{author.id}}\">\n    <mat-card-title>\n      {{author.firstName}}\n      <span *ngIf=\"author.middleName\"> {{author.middleName}}</span>\n      <span *ngIf=\"author.lastName\"> {{author.lastName}}</span>\n    </mat-card-title>\n  </div>\n</mat-card>\n\n\n<!--<mat-card (click)=\"onLoadDetails()\" *ngIf=\"!isSourceAttachment\">-->\n  <!--<mat-card-title>-->\n    <!--{{author.firstName}}-->\n    <!--<span *ngIf=\"author.middleName\"> {{author.middleName}}</span>-->\n    <!--<span *ngIf=\"author.lastName\"> {{author.lastName}}</span>-->\n  <!--</mat-card-title>-->\n<!--</mat-card>-->\n\n<!-- shows if displayed on the reference -->\n<!--<div class=\"app-section list-item\" *ngIf=\"isSourceAttachment\">-->\n  <!--<div class=\"app-label\">{{author.firstName}}<span *ngIf=\"author.lastName\"> {{author.lastName}}</span></div>-->\n  <!--<button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"doRemoveAuthorFromSource()\">delete</button>-->\n<!--</div>-->\n\n"
        },
        {
            "name": "AuthorDetailsComponent",
            "id": "component-AuthorDetailsComponent-497fdaf8fe17212eb9ee211c269816f9",
            "file": "src/app/manager/authors/author-details/author-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author-details",
            "styleUrls": [
                "./author-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./author-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditAuthorMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateEditAuthorMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "deactivateEditAuthorMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "editAuthor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {Author} from '../../../models/author';\nimport {AuthorService} from '../../../services/author.service';\n\n@Component({\n  selector: 'app-author-details',\n  templateUrl: './author-details.component.html',\n  styleUrls: ['./author-details.component.scss']\n})\nexport class AuthorDetailsComponent implements OnInit {\n  public author: Author;\n\n  public isEditAuthorMode: boolean;\n\n  constructor(private route: ActivatedRoute,\n              private authorService: AuthorService) {\n\n    const authorId = this.route.snapshot.paramMap.get('id');\n\n    this.authorService.getApiAuthor(authorId).subscribe(author => {\n      this.author = author;\n\n      this.authorService.setAuthor(this.author);\n    });\n\n    this.isEditAuthorMode = false;\n  }\n\n  ngOnInit() { }\n\n  activateEditAuthorMode() {\n    this.isEditAuthorMode = true;\n  }\n\n  deactivateEditAuthorMode() {\n    this.isEditAuthorMode = false;\n  }\n\n  editAuthor() {\n    return this.authorService.patchApiAuthor(this.author).subscribe(() => {\n      this.isEditAuthorMode = false;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_sections.scss';\n@import '../../../../styles/_cards.scss';\n",
                    "styleUrl": "./author-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "authorService",
                        "type": "AuthorService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorService",
                        "type": "AuthorService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"author\">\n  <div class=\"app-body-content app-body-darker-canvas\">\n    <div class=\"app-body-content-narrow\">\n      <div class=\"subheading\">\n        Author\n        <button *ngIf=\"!isEditAuthorMode\" mat-icon-button class=\"material-icons\" type=\"button\" (click)=\"activateEditAuthorMode()\">edit</button>\n      </div>\n\n      <div *ngIf=\"!isEditAuthorMode\">\n        <h1 class=\"no-margin-bottom margin-top\">\n          {{author.firstName}}\n          <span *ngIf=\"author.middleName\"> {{author.middleName}}</span>\n          <span *ngIf=\"author.lastName\"> {{author.lastName}}</span>\n        </h1>\n      </div>\n\n      <div *ngIf=\"isEditAuthorMode\">\n        <form (ngSubmit)=\"editAuthor()\" #editPersonForm=\"ngForm\">\n          <div class=\"app-drawer-header\">\n            <div class=\"app-drawer-tools\">\n              <button mat-icon-button type=\"submit\" class=\"material-icons\">save</button>\n              <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"deactivateEditAuthorMode()\">close</button>\n            </div>\n          </div>\n\n          <div class=\"app-drawer-content\">\n            <section class=\"app-section\">\n              <mat-form-field>\n                <input\n                  type=\"search\"\n                  placeholder=\"First Name\"\n                  matInput\n                  #firstNameField\n                  name=\"author_first_name\"\n                  [(ngModel)]=\"author.firstName\" />\n              </mat-form-field>\n\n              <mat-form-field style=\"width: 30%\">\n                <input\n                  type=\"search\"\n                  matInput\n                  placeholder=\"Middle Name\"\n                  name=\"author_middle_name\"\n                  #personFirstName=\"ngModel\"\n                  [(ngModel)]=\"author.middleName\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  type=\"search\"\n                  placeholder=\"Last Name\"\n                  matInput\n                  name=\"author_last_name\"\n                  #lastNameField\n                  [(ngModel)]=\"author.lastName\">\n              </mat-form-field>\n            </section>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "AuthorsComponent",
            "id": "component-AuthorsComponent-e1120c9ca9a507a9950922d6609f151a",
            "file": "src/app/manager/authors/authors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-authors",
            "styleUrls": [
                "./authors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./authors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createAuthor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "getAuthors",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "removeAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "author",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Author } from '../../models/author';\n\nimport { AuthorService } from '../../services/author.service';\nimport {QuickAuthorComponent} from './quick-author/quick-author.component';\nimport {ConfirmRemovalComponent} from '../../utilities/confirm-removal/confirm-removal.component';\n\n@Component({\n  selector: 'app-authors',\n  templateUrl: './authors.component.html',\n  styleUrls: ['./authors.component.scss']\n})\n\nexport class AuthorsComponent implements OnInit {\n  public authors: Author[];\n  public author: Author;\n\n  public authorLink: string;\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  constructor(private authorService: AuthorService, public dialog: MatDialog) {\n    this.author = new Author();\n    this.author.initializeAuthor();\n\n    this.authorLink = '';\n\n    this.getAuthors('/authors?sort=last_name&page%5Bnumber%5D=1');\n  }\n\n  ngOnInit() { }\n\n  getAuthors(path) {\n    this.authorService.getApiAuthors(path).subscribe(response => {\n      for (const author of response.authors) {\n        this.authorService.setAuthor(author);\n      }\n\n      this.authors = this.authorService.getAuthors();\n\n      this.totalResults = response.total;\n      this.nextPage = response.links.next;\n      this.previousPage = response.links.prev;\n    });\n  }\n\n  createAuthor() {\n    const dialogRef = this.dialog.open(QuickAuthorComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(author => {\n      if (author) {\n        this.authorService.createApiAuthor(author).subscribe(response => {\n          author.id = response.data.id;\n\n          this.authors.unshift(author);\n        });\n      }\n    });\n  }\n\n  removeAuthor(author) {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the author ' + author.firstName + ' ' + author.lastName,\n        content: ''\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.authorService.removeApiAuthor(author).subscribe(() => {\n          this.authorService.removeAuthor(author);\n        });\n      }\n    });\n  }\n\n  turnPage(author) {\n    if (author.pageIndex < author.previousPageIndex) {\n      this.getAuthors(this.previousPage);\n    } else if (author.pageIndex > author.previousPageIndex) {\n      this.getAuthors(this.nextPage);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n",
                    "styleUrl": "./authors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authorService",
                        "type": "AuthorService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "authorService",
                        "type": "AuthorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\">\n  <div class=\"app-content-toolbar\">\n    <h1>Authors</h1>\n    <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createAuthor()\">add</button>\n  </div>\n\n  <div class=\"app-cards-container\">\n    <app-author-card\n      *ngFor=\"let author of authors\" [author]=\"author\" [canDelete]=\"true\"\n      (removeAuthor)=\"removeAuthor($event)\"\n      class=\"app-card\">\n    </app-author-card>\n  </div>\n\n  <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n</div>\n"
        },
        {
            "name": "BrainstormCardComponent",
            "id": "component-BrainstormCardComponent-89b9dee2640fef42bf78ea107fc1aee8",
            "file": "src/app/brainstorms/brainstorm-card/brainstorm-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-brainstorm-card",
            "styleUrls": [
                "./brainstorm-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brainstorm-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "brainstorm",
                    "line": 11,
                    "type": "Brainstorm"
                },
                {
                    "name": "canDelete",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeBrainstorm",
                    "line": 14,
                    "type": "EventEmitter<Brainstorm>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveBrainstorm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {Brainstorm} from '../../models/brainstorm';\n\n@Component({\n  selector: 'app-brainstorm-card',\n  templateUrl: './brainstorm-card.component.html',\n  styleUrls: ['./brainstorm-card.component.scss']\n})\nexport class BrainstormCardComponent implements OnInit {\n  @Input() public brainstorm: Brainstorm;\n  @Input() public canDelete: boolean;\n\n  @Output() private removeBrainstorm: EventEmitter<Brainstorm>;\n\n  constructor() {\n    this.removeBrainstorm = new EventEmitter<Brainstorm>();\n  }\n\n  ngOnInit() {\n  }\n\n  doRemoveBrainstorm() {\n    this.removeBrainstorm.emit(this.brainstorm);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n\n.brainstorm-image {\n  width: 100%;\n  margin-bottom: 20px;\n}\n",
                    "styleUrl": "./brainstorm-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveBrainstorm()\">delete</button>\n\n  <div routerLink=\"/brainstorming/{{brainstorm.id}}\">\n    <img class=\"brainstorm-image\" src=\"{{brainstorm.image}}\">\n\n    <mat-card-title>{{brainstorm.title}}</mat-card-title>\n\n    <mat-card-content>\n      <div class=\"mat-card-content\" *ngIf=\"brainstorm.description\">{{brainstorm.description}}</div>\n    </mat-card-content>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "BrainstormComponent",
            "id": "component-BrainstormComponent-986a100d8266bf9eab70d2e33364fc63",
            "file": "src/app/brainstorms/brainstorm/brainstorm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-brainstorm",
            "styleUrls": [
                "./brainstorm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brainstorm.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brainstorm",
                    "type": "Brainstorm",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstormUsers",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddBrainstormThoughtMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddThoughtMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "thought",
                    "type": "BrainstormThought",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "closeTopicReorderPanel",
                    "args": [
                        {
                            "name": "contentPanel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "contentPanel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewTopic",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131
                },
                {
                    "name": "createThought",
                    "args": [
                        {
                            "name": "thoughtContent",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "thoughtContent",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTopicThought",
                    "args": [
                        {
                            "name": "thought",
                            "type": ""
                        },
                        {
                            "name": "topic",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "thought",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "topic",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeNewBrainstormThought",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "openTopicReorderPanel",
                    "args": [
                        {
                            "name": "contentPanel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "contentPanel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBrainstormThought",
                    "args": [
                        {
                            "name": "response",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTopicThought",
                    "args": [
                        {
                            "name": "response",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderThought",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderTopic",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCreateBrainstormThoughtMode",
                    "args": [
                        {
                            "name": "isActive",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "jsdoctags": [
                        {
                            "name": "isActive",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCreateTopicThoughtMode",
                    "args": [
                        {
                            "name": "isActive",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "jsdoctags": [
                        {
                            "name": "isActive",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {CdkDragDrop, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {BrainstormService} from '../../services/brainstorm.service';\n\nimport {Brainstorm} from '../../models/brainstorm';\nimport {BrainstormThought} from '../../models/brainstorm-thought';\nimport {QuickBrainstormTopicComponent} from './quick-brainstorm-topic/quick-brainstorm-topic.component';\nimport {User} from '../../models/user';\nimport {AddUserDialogComponent} from '../../utilities/add-user-dialog/add-user-dialog.component';\nimport {MessageDialogComponent} from '../../utilities/message-dialog/message-dialog.component';\n\n@Component({\n  selector: 'app-brainstorm',\n  templateUrl: './brainstorm.component.html',\n  styleUrls: ['./brainstorm.component.scss']\n})\nexport class BrainstormComponent implements OnInit {\n  public brainstorm: Brainstorm;\n  public thought: BrainstormThought;\n\n  public isAddThoughtMode: boolean;\n  public isAddBrainstormThoughtMode: boolean;\n\n  public brainstormUsers: User[];\n\n  constructor(private route: ActivatedRoute,\n              private brainstormService: BrainstormService,\n              public dialog: MatDialog) {\n\n    this.isAddThoughtMode = false;\n    this.isAddBrainstormThoughtMode = false;\n\n    this.brainstormUsers = [];\n\n    const brainstormId = parseInt(this.route.snapshot.paramMap.get('id'), 10);\n\n    this.initializeNewBrainstormThought();\n\n    this.brainstormService.getApiBrainstorm(brainstormId).subscribe(brainstorm => {\n      this.brainstorm = brainstorm;\n\n      this.brainstormService.getApiBrainstormUsers(null, this.brainstorm).subscribe((response) => {\n        this.brainstormUsers = response.users;\n      });\n    });\n  }\n\n  ngOnInit() { }\n\n  initializeNewBrainstormThought() {\n    this.thought = new BrainstormThought();\n    this.thought.initializeNewThought();\n  }\n\n  openTopicReorderPanel(contentPanel) {\n    contentPanel.open();\n  }\n\n  closeTopicReorderPanel(contentPanel) {\n    contentPanel.close();\n  }\n\n  addUser() {\n    const dialogRef = this.dialog.open(AddUserDialogComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(user => {\n      let userExists = false;\n\n      for (const currentUser of this.brainstormUsers) {\n        if (user.id === currentUser.id) {\n          userExists = true;\n          break;\n        }\n      }\n\n      if (userExists) {\n        this.dialog.open(MessageDialogComponent, {\n          width: '250px',\n          data: {\n            title: 'Could Not Add User',\n            message: 'User is already part of the brainstorm.'\n          }\n        });\n      } else {\n        this.brainstormService.addUserToBrainstorm(this.brainstorm, user.id).subscribe(() => {\n          this.brainstormUsers.push(user);\n        });\n      }\n    });\n  }\n\n  createThought(thoughtContent) {\n    this.thought.thought = thoughtContent;\n\n    this.thought.source = null;\n    this.thought.brainstormId = this.brainstorm.id;\n    this.thought.position = this.brainstorm.thoughts.length;\n\n    this.brainstormService.createApiBrainstormThought(this.thought).subscribe(response => {\n      this.thought.id = response.data.id;\n\n      this.brainstorm.thoughts.push(this.thought);\n\n      this.setCreateBrainstormThoughtMode(false);\n    });\n  }\n\n  createTopicThought(thought, topic) {\n    this.thought.topicId = topic.id;\n    this.thought.source = null;\n\n    this.thought.thought = thought;\n\n    this.thought.position = topic.thoughts.length;\n\n    this.brainstormService.createApiBrainstormTopicThought(this.thought).subscribe(response => {\n      this.thought.id = response.data.id;\n\n      topic.thoughts.push(this.thought);\n\n      this.setCreateTopicThoughtMode(false);\n    });\n  }\n\n  createNewTopic() {\n    const dialogRef = this.dialog.open(QuickBrainstormTopicComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(brainstormTopic => {\n      if (brainstormTopic) {\n        brainstormTopic.position = this.brainstorm.topics.length;\n\n        this.brainstormService.createApiBrainstormTopic(this.brainstorm, brainstormTopic).subscribe(response => {\n          brainstormTopic.id = response.data.id;\n\n          this.brainstorm.topics.push(brainstormTopic);\n        });\n      }\n    });\n  }\n\n  removeTopicThought(response: any) {\n    this.brainstormService.deleteApiBrainstormTopicThought(response.thought).subscribe(() => {\n      this.brainstormService.removeTopicThought(response.topic, response.thought);\n\n      for (let i = 0; i < response.topic.thoughts.length; i++) {\n        const thoughtToUpdate = response.topic.thoughts[i];\n        thoughtToUpdate.position = i;\n\n        this.brainstormService.patchApiTopicThought(thoughtToUpdate).subscribe(() => { });\n      }\n    });\n  }\n\n  removeBrainstormThought(response: any) {\n    this.brainstormService.deleteApiBrainstormThought(response.thought).subscribe(() => {\n      this.brainstormService.removeBrainstormThought(this.brainstorm, response.thought);\n\n      for (let i = 0; i < this.brainstorm.thoughts.length; i++) {\n        const thoughtToUpdate = this.brainstorm.thoughts[i];\n        thoughtToUpdate.position = i;\n\n        this.brainstormService.patchApiBrainstormThought(thoughtToUpdate).subscribe(() => { });\n      }\n    });\n  }\n\n  reorderTopic(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.brainstorm.topics, event.previousIndex, event.currentIndex);\n\n    for (let i = 0; i < this.brainstorm.topics.length; i++) {\n      const topic = this.brainstorm.topics[i];\n      topic.position = i;\n\n      this.brainstormService.patchApiTopic(topic).subscribe(() => { });\n    }\n  }\n\n  reorderThought(event: CdkDragDrop<string[]>) {\n    // A thought is being moved within the same container\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n\n      for (let i = 0; i < event.container.data.length; i++) {\n        const thought: any = event.container.data[i];\n        thought.position = i;\n\n        if (event.container.id === '0') {\n          this.brainstormService.patchApiBrainstormThought(thought).subscribe(() => { });\n        } else {\n          this.brainstormService.patchApiTopicThought(thought).subscribe(() => { });\n        }\n      }\n\n    // A thought is being moved from one container to another.\n    } else {\n      transferArrayItem(event.previousContainer.data,\n                        event.container.data,\n                        event.previousIndex,\n                        event.currentIndex);\n\n      let newTopic = null;\n      let originalTopic = null;\n\n      const thought: BrainstormThought = event.item.data;\n\n      for (const topic of this.brainstorm.topics) {\n        if (topic.id === parseInt(event.previousContainer.id, 10)) {\n          originalTopic = topic;\n        } else if (topic.id === parseInt(event.container.id, 10)) {\n          newTopic = topic;\n\n          thought.topicId = parseInt(newTopic.id, 10);\n        }\n      }\n\n      // if the originalTopic is null then the original container was the root brainstorm container.\n      // in this case remove the brainstorm thought and copy it to the destination topic container.\n      if (!originalTopic) {\n        this.brainstormService.createApiBrainstormTopicThought(thought).subscribe(response => {\n          this.brainstormService.deleteApiBrainstormThought(thought).subscribe(() => {\n            thought.id = response.data.id;\n\n            for (let i = 0; i < this.brainstorm.thoughts.length; i++) {\n              const brainstormThought = this.brainstorm.thoughts[i];\n              brainstormThought.position = i;\n\n              this.brainstormService.patchApiBrainstormThought(brainstormThought).subscribe(() => { });\n            }\n\n            for (let i = 0; i < newTopic.thoughts.length; i ++) {\n              const topicThought = newTopic.thoughts[i];\n              topicThought.position = i;\n\n              this.brainstormService.patchApiTopicThought(topicThought).subscribe(() => { });\n            }\n          });\n        });\n\n      // if the newTopic is null then the destination container is the root brainstorm container\n      // in this case remove the thought from the topic and copy it to the brainstorm\n      } else if (!newTopic) {\n        thought.topicId = null;\n        thought.brainstormId = this.brainstorm.id;\n\n        this.brainstormService.createApiBrainstormThought(thought).subscribe(response => {\n          this.brainstormService.deleteApiBrainstormTopicThought(thought).subscribe(() => {\n            thought.id = response.data.id;\n\n            for (let i = 0; i < this.brainstorm.thoughts.length; i++) {\n              const brainstormThought = this.brainstorm.thoughts[i];\n              brainstormThought.position = i;\n\n              this.brainstormService.patchApiBrainstormThought(brainstormThought).subscribe(() => { });\n            }\n\n            for (let i = 0; i < originalTopic.thoughts.length; i ++) {\n              const topicThought = originalTopic.thoughts[i];\n              topicThought.position = i;\n\n              this.brainstormService.patchApiTopicThought(topicThought);\n            }\n          });\n        });\n\n      // in this case the thought is just moving between topics\n      } else {\n        this.brainstormService.patchApiTopicThought(thought).subscribe(() => {\n          for (let i = 0; i < originalTopic.thoughts.length; i++) {\n            const originalTopicThought = originalTopic.thoughts[i];\n            originalTopicThought.position = i;\n\n            this.brainstormService.patchApiTopicThought(originalTopicThought).subscribe(() => { });\n          }\n\n          for (let i = 0; i < newTopic.thoughts.length; i++) {\n            const newTopicThought = newTopic.thoughts[i];\n            newTopicThought.position = i;\n\n            this.brainstormService.patchApiTopicThought(newTopicThought).subscribe(() => { });\n          }\n        });\n      }\n    }\n  }\n\n  setCreateTopicThoughtMode(isActive) {\n    if (!isActive) {\n      this.initializeNewBrainstormThought();\n    }\n\n    this.isAddThoughtMode = isActive;\n  }\n\n  setCreateBrainstormThoughtMode(isActive) {\n    if (!isActive) {\n      this.initializeNewBrainstormThought();\n    }\n\n    this.isAddBrainstormThoughtMode = isActive;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n@import '../../../styles/_drawer-side.scss';\n\n\n.app-brainstorm-content {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 2rem;\n  padding-top: 2rem;\n  border-top: $border-light;\n  margin-top: 2rem;\n\n  .app-content-toolbar {\n    margin-bottom: 1rem;\n  }\n}\n\n.app-thought-list {\n  width: 100%;\n  display: block;\n  overflow: hidden;\n  min-height: 60px;\n}\n\n.reorder-topic-list {\n  width: 500px;\n  max-width: 100%;\n  border: solid 1px #ccc;\n  min-height: 60px;\n  display: block;\n  background: white;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.reorder-topic-box {\n  padding: 20px 10px;\n  border-bottom: solid 1px #ccc;\n  color: rgba(0, 0, 0, 0.87);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  box-sizing: border-box;\n  cursor: move;\n  background: white;\n  font-size: 14px;\n}\n\n.app-brainstorm-topics-list {\n  position: sticky;\n  top: 50px;\n}\n\n\n/* ************\nSTART COPY FROM MATERIAL DRAG DROP CSS\n************ */\n.cdk-drag-preview {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\n              0 8px 10px 1px rgba(0, 0, 0, 0.14),\n              0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\n.cdk-drag-placeholder {\n  opacity: 0;\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.example-box:last-child {\n  border: none;\n}\n\n.example-list.cdk-drop-list-dragging .example-box:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n/* ************\nEND COPY FROM MATERIAL DRAG DROP CSS\n************ */\n\n",
                    "styleUrl": "./brainstorm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container>\n  <div *ngIf=\"brainstorm\" class=\"app-body-content app-body-darker-canvas\">\n    <div class=\"app-content-toolbar\">\n      <h1>{{brainstorm.title}}</h1>\n    </div>\n\n    <div *ngFor=\"let user of brainstormUsers\">\n      <span>{{user.firstName}}</span> <span> {{user.lastName}}</span>\n    </div>\n\n    <button mat-flat-button class=\"material-icons\" color=\"secondary\" (click)=\"addUser()\">+</button>\n\n    <div *ngIf=\"brainstorm.description\">{{brainstorm.description}}</div>\n\n    <div cdkDropListGroup class=\"app-brainstorm-content\">\n      <div class=\"app-brainstorm-thoughts\">\n        <div class=\"app-content-toolbar\">\n          <h2>Thoughts</h2>\n          <button mat-flat-button class=\"material-icons\" (click)=\"setCreateBrainstormThoughtMode(true)\">add</button>\n        </div>\n\n        <div *ngIf=\"isAddBrainstormThoughtMode\" class=\"app-card-note\">\n          <form class=\"app-card-note-edit\">\n            <div class=app-card-note-body-meta>\n              <h3>New Thought</h3>\n            </div>\n\n            <div class=\"app-card-note-body-content\">\n              <app-editor\n                [content]=\"thought.thought\"\n                [isEditable]=\"true\"\n                [autoEdit]=\"true\"\n                [isNote]=\"true\"\n                (saveContent)=\"createThought($event)\">\n              </app-editor>\n            </div>\n          </form>\n        </div>\n\n        <!-- Add cdkDropList here -->\n        <div cdkDropList\n             class=\"app-thought-list\"\n             [cdkDropListData]=\"brainstorm.thoughts\"\n             (cdkDropListDropped)=\"reorderThought($event)\"\n             id=\"0\">\n          <!-- Add cdkDrag here -->\n          <div class=\"thought\" cdkDrag [cdkDragData]=\"thought\" *ngFor=\"let thought of brainstorm.thoughts\">\n            <app-thought [brainstorm]=\"brainstorm\"\n                         [topic]=\"null\"\n                         [thought]=\"thought\"\n                         (removeBrainstormThought)=\"removeBrainstormThought($event)\">\n            </app-thought>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"app-brainstorm-topics\">\n        <div class=\"app-content-toolbar\">\n          <h2>Topics</h2>\n          <button mat-flat-button class=\"material-icons\" (click)=\"createNewTopic()\">add</button>\n          <button mat-flat-button class=\"material-icons\" (click)=\"openTopicReorderPanel(topicOrderManager)\">reorder</button>\n        </div>\n\n        <div class=\"app-brainstorm-topics-list\">\n        <!-- Add cdkDropList here -->\n          <mat-accordion multi=\"true\">\n            <!-- Add cdkDrag here -->\n              <mat-expansion-panel *ngFor=\"let topic of brainstorm.topics\">\n                <mat-expansion-panel-header>\n                  <mat-panel-title>\n                    {{topic.label}}\n                  </mat-panel-title>\n                </mat-expansion-panel-header>\n\n                <button mat-flat-button class=\"material-icons\" (click)=\"setCreateTopicThoughtMode(true)\">add</button>\n\n                <div *ngIf=\"isAddThoughtMode\" class=\"app-card-note\">\n                  <form class=\"app-card-note-edit\">\n                    <div class=app-card-note-body-meta>\n                      <h3>New Thought</h3>\n                    </div>\n\n                    <div class=\"app-card-note-body-content\">\n                      <app-editor\n                        [content]=\"thought.thought\"\n                        [isEditable]=\"true\"\n                        [autoEdit]=\"true\"\n                        [isNote]=\"true\"\n                        (saveContent)=\"createTopicThought($event, topic)\">\n                      </app-editor>\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"app-thought-list\"\n                     cdkDropList\n                     [cdkDropListData]=\"topic.thoughts\"\n                     (cdkDropListDropped)=\"reorderThought($event)\"\n                     id=\"{{topic.id}}\">\n\n                  <div class=\"thought\" cdkDrag [cdkDragData]=\"thought\" *ngFor=\"let thought of topic.thoughts\">\n                    <app-thought\n                      [brainstorm]=\"brainstorm\"\n                      [topic]=\"topic\"\n                      [thought]=\"thought\"\n                      (removeTopicThought)=\"removeTopicThought($event)\">\n                    </app-thought>\n                  </div>\n                </div>\n              </mat-expansion-panel>\n          </mat-accordion>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <mat-sidenav #topicOrderManager mode=\"side\" position=\"end\" class=\"app-drawer\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Order Topics</div>\n      </div>\n      <div class=\"app-drawer-tools\">\n        <button class=\"material-icons mat-icon-button mat-button-base\" (click)=\"closeTopicReorderPanel(topicOrderManager)\">close</button>\n      </div>\n    </div>\n\n    <div *ngIf=\"brainstorm\" cdkDropList class=\"reorder-topic-list\" (cdkDropListDropped)=\"reorderTopic($event)\">\n      <div cdkDrag class=\"reorder-topic-box\" *ngFor=\"let topic of brainstorm.topics\">{{topic.label}}</div>\n    </div>\n  </mat-sidenav>\n</mat-sidenav-container>\n\n"
        },
        {
            "name": "BrainstormsComponent",
            "id": "component-BrainstormsComponent-e2fa480ee3b9c52b19ab6062f8d3d8d3",
            "file": "src/app/brainstorms/brainstorms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-brainstorms",
            "styleUrls": [
                "./brainstorms.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brainstorms.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allBrainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstorm",
                    "type": "Brainstorm",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAllToggleChecked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAllToggleColor",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userBrainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createBrainstorm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "getAllBrainstorms",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserBrainstorms",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "toggleBrainstorms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "brainstorm",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "brainstorm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {Brainstorm} from '../models/brainstorm';\n\nimport {BrainstormService} from '../services/brainstorm.service';\nimport {AddBrainstormDialogComponent} from '../utilities/add-brainstorm-dialog/add-brainstorm-dialog.component';\nimport {ThemePalette} from '@angular/material/core';\n\n@Component({\n  selector: 'app-brainstorms',\n  templateUrl: './brainstorms.component.html',\n  styleUrls: ['./brainstorms.component.scss']\n})\nexport class BrainstormsComponent implements OnInit {\n  public brainstorms: Brainstorm[];\n  public brainstorm: Brainstorm;\n\n  public userBrainstorms: Brainstorm[];\n  public allBrainstorms: Brainstorm[];\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  private userId: string;\n\n  public showAllToggleColor: ThemePalette;\n  public showAllToggleChecked: boolean;\n\n  constructor(private brainstormService: BrainstormService, public dialog: MatDialog) {\n    this.showAllToggleChecked = false;\n    this.showAllToggleColor = 'primary';\n\n    this.userId = localStorage.getItem('user.id');\n\n    this.brainstorms = [];\n    this.userBrainstorms = [];\n    this.allBrainstorms = [];\n\n    this.getUserBrainstorms(null, false);\n  }\n\n  ngOnInit() {\n  }\n\n  getUserBrainstorms(path: string, isAnotherPage: boolean) {\n    if (!this.userBrainstorms.length || isAnotherPage) {\n      this.brainstormService.getApiBrainstorms(path, this.userId, null, '1', ['title', 'description'], null, null, null, isAnotherPage).subscribe(response => {\n        for (const brainstorm of response.brainstorms) {\n          this.brainstormService.setBrainstorm(brainstorm);\n        }\n\n        this.brainstorms = this.brainstormService.getBrainstorms();\n        this.userBrainstorms = this.brainstormService.getBrainstorms();\n\n        this.totalResults = response.total;\n        this.nextPage = response.links.next;\n        this.previousPage = response.links.prev;\n      });\n\n    } else {\n      this.brainstorms = this.userBrainstorms;\n    }\n  }\n\n  getAllBrainstorms(path: string, isAnotherPage: boolean) {\n    if (!this.allBrainstorms.length || isAnotherPage) {\n      this.brainstormService.getApiBrainstorms(path, null, null, '1', ['title', 'description'], null, null, null, isAnotherPage).subscribe(response => {\n        for (const brainstorm of response.brainstorms) {\n          this.brainstormService.setBrainstorm(brainstorm);\n        }\n\n        this.brainstorms = this.brainstormService.getBrainstorms();\n        this.allBrainstorms = this.brainstormService.getBrainstorms();\n\n        this.totalResults = response.total;\n        this.nextPage = response.links.next;\n        this.previousPage = response.links.prev;\n      });\n\n    } else {\n      this.brainstorms = this.allBrainstorms;\n    }\n  }\n\n  toggleBrainstorms() {\n    if (this.showAllToggleChecked) {\n      this.getAllBrainstorms(null, false);\n    } else {\n      this.getUserBrainstorms(null, false);\n    }\n  }\n\n  createBrainstorm() {\n    const dialogRef = this.dialog.open(AddBrainstormDialogComponent, {\n      width: '750px',\n      data: {\n        showExisting: false,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(responseData => {\n      let brainstorm = responseData.brainstorm;\n\n      if (brainstorm) {\n        this.brainstormService.createApiBrainstorm(brainstorm).subscribe(response => {\n          brainstorm.id = response.data.id;\n\n          this.brainstormService.setBrainstorm(brainstorm);\n\n          this.brainstorms.unshift(brainstorm);\n\n          this.brainstormService.addUserToBrainstorm(brainstorm, this.userId).subscribe(() => {});\n        });\n      }\n    });\n  }\n\n  turnPage(brainstorm) {\n    if (brainstorm.pageIndex < brainstorm.previousPageIndex) {\n      if (this.showAllToggleChecked) {\n        this.getAllBrainstorms(this.previousPage, true);\n      } else {\n        this.getUserBrainstorms(this.previousPage, true);\n      }\n    } else if (brainstorm.pageIndex > brainstorm.previousPageIndex) {\n      if (this.showAllToggleChecked) {\n        this.getAllBrainstorms(this.nextPage, true);\n      } else {\n        this.getUserBrainstorms(this.nextPage, true);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/_cards.scss';\n@import '../../styles/_drawer-side.scss';\n@import '../../styles/_sections.scss';\n",
                    "styleUrl": "./brainstorms.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container>\n  <div class=\"app-body-content\">\n\n    <!--TOOLBAR-->\n    <div class=\"app-content-toolbar\">\n      <h1>Brainstorms</h1>\n\n      <mat-slide-toggle\n          [color]=\"showAllToggleColor\"\n          [(ngModel)]=\"showAllToggleChecked\"\n          (ngModelChange)=\"toggleBrainstorms()\">\n        Show All Brainstorms\n      </mat-slide-toggle>\n\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createBrainstorm()\">add</button>\n    </div>\n\n    <div class=\"app-cards-container\">\n      <app-brainstorm-card\n        *ngFor=\"let brainstorm of brainstorms\"\n        [brainstorm]=\"brainstorm\"\n        [canDelete]=\"false\"\n        class=\"app-card\">\n      </app-brainstorm-card>\n    </div>\n\n    <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n  </div>\n</mat-sidenav-container>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CategoryComponent",
            "id": "component-CategoryComponent-730897765c1d67f0f67b8e7824750a23",
            "file": "src/app/timelines/category/category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category",
            "styleUrls": [
                "./category.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "category",
                    "line": 11
                },
                {
                    "name": "categoryEvents",
                    "line": 14,
                    "type": "Array<Category>"
                },
                {
                    "name": "persons",
                    "line": 12
                },
                {
                    "name": "timeline",
                    "line": 13,
                    "type": "Timeline"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {Category} from '../../models/category';\n\n@Component({\n  selector: 'app-category',\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.scss']\n})\nexport class CategoryComponent implements OnInit {\n  @Input() public category;\n  @Input() public persons;\n  @Input() public timeline: Timeline;\n  @Input() public categoryEvents: Array<Category>;\n\n  constructor() {}\n\n  ngOnInit() {\n    if (this.persons) {\n      this.persons.sort((a, b) => {\n        return a.birthYear - b.birthYear;\n      });\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.timeline-box {\n  display: flex;\n  margin: 2px 0;\n  height: 8px;\n  position: relative;\n  background-color: $color-gray-scale-100;\n  opacity: 0.8;\n  &.single-point-events {\n    margin: 40px 0 1px;\n  }\n  &.person {\n    background-color: $color-gray-scale-200;\n    height: 10px;\n  }\n}\n\n.timeline-category {\n  padding-top: 10px;\n  text-transform: uppercase;\n  font-size: $font-size-smallest;\n  color: $color-gray-scale-500;\n  font-weight: 500;\n}\n",
                    "styleUrl": "./category.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"timeline-category\">{{category.label}}</div>\n\n<div class=\"timeline-box single-point-events timeline-group\" *ngIf=\"category.singlePointEvents.length\">\n  <app-timeline-event\n    *ngFor=\"let event of category.singlePointEvents\" [event]=\"event\">\n  </app-timeline-event>\n</div>\n\n<div *ngIf=\"category.multiPointEvents.length\" class=\"timeline-group\">\n  <div class=\"timeline-box\" *ngFor=\"let event of category.multiPointEvents\">\n    <app-timeline-event\n      [event]=\"event\"\n      [timeline]=\"timeline\"\n      [categoryEvents]=\"categoryEvents\">\n    </app-timeline-event>\n  </div>\n</div>\n\n<div *ngIf=\"persons && persons.length && !category.label\" class=\"timeline-group\">\n  <div class=\"timeline-box person\" *ngFor=\"let person of persons\">\n    <app-timeline-person [person]=\"person\"></app-timeline-person>\n  </div>\n</div>\n"
        },
        {
            "name": "ChartCardComponent",
            "id": "component-ChartCardComponent-6f77d1d58cdcd2b819bf89848a92cd43",
            "file": "src/app/manager/charts/chart-card/chart-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chart-card",
            "styleUrls": [
                "./chart-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "chart",
                    "line": 11,
                    "type": "Chart"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeChart",
                    "line": 14,
                    "type": "EventEmitter<Chart>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {Chart} from '../../../models/chart';\n\n@Component({\n  selector: 'app-chart-card',\n  templateUrl: './chart-card.component.html',\n  styleUrls: ['./chart-card.component.scss']\n})\nexport class ChartCardComponent implements OnInit {\n  @Input() chart: Chart;\n  @Input() public canDelete: boolean;\n\n  @Output() private removeChart: EventEmitter<Chart>;\n\n  constructor() {\n    this.removeChart = new EventEmitter<Chart>();\n  }\n\n  ngOnInit() { }\n\n  doRemoveChart() {\n    this.removeChart.emit(this.chart);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_cards.scss';\n",
                    "styleUrl": "./chart-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveChart()\">delete</button>\n\n  <div routerLink=\"/manager/charts/{{chart.id}}\">\n    <mat-card-content>\n      <app-chart-display [chart]=\"chart\"></app-chart-display>\n    </mat-card-content>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "ChartComponent",
            "id": "component-ChartComponent-c9976381e21cb88604ab5ab9a7823e55",
            "file": "src/app/manager/charts/chart/chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chart",
            "styleUrls": [
                "./chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartScreenSize",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateChartNotifier",
                    "defaultValue": "new Subject<any>()",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addChartLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "addDataset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "callUpdateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "removeChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "sortById",
                    "args": [
                        {
                            "name": "a",
                            "type": ""
                        },
                        {
                            "name": "b",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "1 | -1",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleContentPanel",
                    "args": [
                        {
                            "name": "contentPanel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "jsdoctags": [
                        {
                            "name": "contentPanel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByData",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 199,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateChartLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateChartType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "updateDataset",
                    "args": [
                        {
                            "name": "dataset",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDatasetData",
                    "args": [
                        {
                            "name": "dataset",
                            "type": ""
                        },
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLegendLabelOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177
                },
                {
                    "name": "updateLegendOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171
                },
                {
                    "name": "updateTitleOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159
                },
                {
                    "name": "updateTooltipOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {Subject} from 'rxjs';\n\nimport { Chart } from '../../../models/chart';\n\nimport {ChartService} from '../../../services/chart.service';\nimport {ChartLabel} from '../../../models/chart-label';\nimport {ChartDatasetData} from '../../../models/chart-dataset-data';\nimport {ChartDataset} from '../../../models/chart-dataset';\n\nimport {ConfirmRemovalComponent} from '../../../utilities/confirm-removal/confirm-removal.component';\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.scss']\n})\nexport class ChartComponent implements OnInit {\n  public chart: Chart;\n\n  public chartScreenSize: string;\n\n  public updateChartNotifier: Subject<any> = new Subject<any>();\n\n  /* ***\n    OF NOTE: THERE IS THE ACTUAL ANGULAR CHART OBJECT USED TO RETRIEVE, UPDATE, CREATE AND DELETE CHARTS ON\n    THE API SIDE. THEN THERE IS THE CHARTDATA OBJECT THAT REPRESENTS THE OBJECT FORM REQUIRED BY CHARTJS IN\n    ORDER TO RENDER THE CHART ITSELF. ALL BINDING IS DONE WITH THE ANGULAR CHART OBJECT AND MAPPED TO THE\n    CHARTJS OBJECT.\n  *** */\n  constructor(private route: ActivatedRoute,\n              private navigation: Router,\n              private chartService: ChartService,\n              public dialog: MatDialog) {\n    const chartId = this.route.snapshot.paramMap.get('id');\n\n    this.chartService.getApiChart(chartId).subscribe(chart => {\n      this.chart = chart;\n\n      this.chart.labels.sort(this.sortById);\n\n      for (const dataset of this.chart.datasets) {\n        dataset.data.sort(this.sortById);\n      }\n\n      this.chartService.setChart(chart);\n    });\n\n    this.chartScreenSize = 'fullscreen_exit';\n  }\n\n  ngOnInit() { }\n\n  private sortById(a, b) {\n    if (a.id > b.id) {\n      return 1;\n    } else {\n      return -1\n    }\n  }\n\n  removeChart() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the chart '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.chartService.deleteApiChart(this.chart.id).subscribe(() => {\n          this.navigation.navigateByUrl('/manager/charts').then();\n        });\n      }\n    });\n  }\n\n  updateChartType() {\n    this.chartService.patchApiChart(this.chart).subscribe(() => {\n      this.updateChartNotifier.next(true);\n    });\n  }\n\n  addChartLabel() {\n    const newChartLabel: ChartLabel = new ChartLabel();\n\n    newChartLabel.initializeNewChartLabel();\n\n    this.chartService.createApiChartLabel(this.chart, newChartLabel).subscribe((newLabelResponse) => {\n      newChartLabel.id = newLabelResponse.data.id;\n\n      this.chart.labels.push(newChartLabel);\n\n      for (const dataset of this.chart.datasets) {\n        const newDatasetData = new ChartDatasetData();\n        newDatasetData.initializeNewDatasetData();\n        newDatasetData.xData = dataset.data.length;\n\n        dataset.data.push(newDatasetData);\n\n        this.chartService.createApiChartDatasetData(dataset, newDatasetData).subscribe((datasetDataResponse => {\n          newDatasetData.id = datasetDataResponse.id;\n        }));\n      }\n\n      this.callUpdateChart();\n    });\n  }\n\n  addDataset() {\n    const dataset = new ChartDataset();\n    dataset.initializeNewDataset();\n\n    dataset.data = [];\n\n    this.chartService.createApiChartDataset(this.chart, dataset).subscribe(newDatasetResponse => {\n      dataset.id = newDatasetResponse.data.id;\n\n      this.chart.labels.forEach(() => {\n        const datasetData = new ChartDatasetData();\n        datasetData.initializeNewDatasetData();\n\n        this.chartService.createApiChartDatasetData(dataset, datasetData).subscribe((newDataResponse) => {\n          datasetData.id = newDataResponse.data.id;\n        });\n\n        dataset.data.push(datasetData);\n      });\n\n      this.chart.datasets.push(dataset);\n\n      this.callUpdateChart();\n    });\n  }\n\n  updateChartLabel(label) {\n    this.chartService.patchApiChartLabel(this.chart, label).subscribe(() => {\n      this.callUpdateChart();\n    });\n  }\n\n  updateDataset(dataset) {\n    this.chartService.patchApiChartDataset(this.chart, dataset).subscribe(() => {\n      this.callUpdateChart();\n    });\n  }\n\n  updateDatasetData(dataset, data) {\n    this.chartService.patchApiChartDatasetData(dataset, data).subscribe(() => {\n      this.callUpdateChart();\n    });\n  }\n\n  updateTitleOptions() {\n    this.chartService.patchApiChartTitleOptions(this.chart.options, this.chart.options.title).subscribe(() => {\n      this.callUpdateChart();\n    });\n  }\n\n  updateTooltipOptions() {\n    this.chartService.patchApiChartTooltipOptions(this.chart.options, this.chart.options.tooltips).subscribe(() => {\n      this.callUpdateChart();\n    });\n  }\n\n  updateLegendOptions() {\n    this.chartService.patchApiChartLegendOptions(this.chart.options, this.chart.options.legend).subscribe(() => {\n      this.callUpdateChart();\n    });\n  }\n\n  updateLegendLabelOptions() {\n    this.chartService.patchApiChartLegendLabelOptions(this.chart.options.legend, this.chart.options.legend.labels).subscribe(() => {\n      this.callUpdateChart();\n    });\n  }\n\n  callUpdateChart() {\n    this.chartService.setChart(this.chart);\n\n    this.updateChartNotifier.next();\n  }\n\n  toggleContentPanel(contentPanel) {\n    if (contentPanel.opened) {\n      this.chartScreenSize = 'fullscreen_exit';\n      contentPanel.close();\n    } else {\n      this.chartScreenSize = 'fullscreen';\n      contentPanel.open();\n    }\n  }\n\n  trackByData(index) {\n    return index;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_drawer-side.scss';\n@import '../../../../styles/_sections.scss';\n\ncanvas{\n  width:100% !important;\n  height:500px !important;\n}\n",
                    "styleUrl": "./chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "navigation",
                        "type": "Router"
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigation",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container>\n  <app-chart-display *ngIf=\"chart\" [notifier]=\"updateChartNotifier\"></app-chart-display>\n\n  <div>\n    <button mat-flat-button class=\"material-icons\" (click)=\"toggleContentPanel(chartDetails)\">{{chartScreenSize}}</button>\n  </div>\n\n  <mat-sidenav #chartDetails mode=\"side\" position=\"end\" class=\"app-drawer\" opened>\n    <div class=\"edit-mode\" *ngIf=\"chart\">\n      <form #chartForm=\"ngForm\">\n        <div class=\"app-drawer-content\">\n          <section class=\"app-section\">\n            <mat-form-field>\n              <mat-label>Chart Type</mat-label>\n              <mat-select [(value)]=\"chart.type\" (selectionChange)=\"updateChartType()\">\n                <mat-option value=\"line\">Line</mat-option>\n                <mat-option value=\"bar\">Bar</mat-option>\n                <mat-option value=\"horizontalBar\">Horizontal Bar</mat-option>\n                <mat-option value=\"pie\">Pie</mat-option>\n                <mat-option value=\"doughnut\">Doughnut</mat-option>\n                <mat-option value=\"polarArea\">Polar Area</mat-option>\n                <mat-option value=\"radar\">Radar</mat-option>\n              </mat-select>\n            </mat-form-field>\n\n            <button mat-icon-button class=\" material-icons\" type=\"button\" (click)=\"removeChart()\">delete</button>\n          </section>\n\n          <mat-accordion>\n            <mat-expansion-panel *ngIf=\"chart.options\">\n              <mat-expansion-panel-header>\n                <mat-panel-title>\n                  Title\n                </mat-panel-title>\n              </mat-expansion-panel-header>\n\n              <mat-checkbox [(ngModel)]=\"chart.options.title.display\"\n                            (change)=\"updateTitleOptions()\"\n                            #titleDisplay=\"matCheckbox\"\n                            name=\"show_chart_title\">\n                Show Title\n              </mat-checkbox>\n\n              <mat-form-field style=\"width: 100%\">\n                <input\n                    matInput\n                    placeholder=\"Chart Title\"\n                    name=\"chart_title\"\n                    #chartTitle=\"ngModel\"\n                    [(ngModel)]=\"chart.options.title.text\"\n                    (blur)=\"updateTitleOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <mat-label>Title Position</mat-label>\n                <mat-select [(value)]=\"chart.options.title.position\" (selectionChange)=\"updateTitleOptions()\">\n                  <mat-option value=\"top\">Top</mat-option>\n                  <mat-option value=\"left\">Left</mat-option>\n                  <mat-option value=\"bottom\">Bottom</mat-option>\n                  <mat-option value=\"right\">Right</mat-option>\n                </mat-select>\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Padding\"\n                  name=\"title_padding\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.title.padding\"\n                  (blur)=\"updateTitleOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Line Height\"\n                  name=\"title_line_height\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.title.lineHeight\"\n                  (blur)=\"updateTitleOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  type=\"number\"\n                  matInput\n                  placeholder=\"Font Size\"\n                  name=\"title_font_size\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.title.fontSize\"\n                  (blur)=\"updateTitleOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  type=\"color\"\n                  matInput\n                  placeholder=\"Font Color\"\n                  name=\"title_font_color\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.title.fontColor\"\n                  (blur)=\"updateTitleOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Font Family\"\n                  name=\"title_font_family\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.title.fontFamily\"\n                  (blur)=\"updateTitleOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Font Style\"\n                  name=\"title_font_style\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.title.fontStyle\"\n                  (blur)=\"updateTitleOptions()\" />\n              </mat-form-field>\n            </mat-expansion-panel>\n\n            <mat-expansion-panel *ngIf=\"chart.options\">\n              <mat-expansion-panel-header>\n                <mat-panel-title>\n                  Tooltips\n                </mat-panel-title>\n              </mat-expansion-panel-header>\n              <div>\n                <mat-checkbox [(ngModel)]=\"chart.options.tooltips.enabled\" matInput\n                              (change)=\"updateTooltipOptions()\"\n                              #titleDisplay=\"matCheckbox\"\n                              name=\"show_chart_tooltips\">\n                  Show Tooltips\n                </mat-checkbox>\n              </div>\n\n              <mat-form-field>\n                <input\n                    matInput\n                    type=\"color\"\n                    placeholder=\"Tooltip Background Color\"\n                    name=\"chart_tooltip_background_color\"\n                    #chartTooltipColor=\"ngModel\"\n                    [(ngModel)]=\"chart.options.tooltips.backgroundColor\"\n                    (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"X Padding\"\n                  name=\"tooltip_x_padding\"\n                  #chartTooltipXPadding=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.xPadding\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Y Padding\"\n                  name=\"tooltip_y_padding\"\n                  #chartTooltipXPadding=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.yPadding\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  type=\"number\"\n                  matInput\n                  placeholder=\"Caret Padding\"\n                  name=\"tooltip_caret_padding\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.caretPadding\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  type=\"number\"\n                  matInput\n                  placeholder=\"Caret Size\"\n                  name=\"tooltip_caret_size\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.caretSize\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Corner Radius\"\n                  name=\"tooltip_corner_radius\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.cornerRadius\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"color\"\n                  placeholder=\"Display Colors\"\n                  name=\"tooltip_display_colors\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.displayColors\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"color\"\n                  placeholder=\"Border Color\"\n                  name=\"tooltip_border_color\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.borderColor\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Border Width\"\n                  name=\"tooltip_border_width\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.borderWidth\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Title Font Family\"\n                  name=\"tooltip_title_font_family\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.titleFontFamily\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Title Font Size\"\n                  name=\"tooltip_title_font_size\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.titleFontSize\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Title Font Style\"\n                  name=\"tooltip_title_font_style\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.titleFontStyle\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"color\"\n                  placeholder=\"Title Font Color\"\n                  name=\"tooltip_title_font_color\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.titleFontColor\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Title Align\"\n                  name=\"tooltip_title_align\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.titleAlign\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Title Spacing\"\n                  name=\"tooltip_title_spacing\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.titleSpacing\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Title Margin Bottom\"\n                  name=\"tooltip_title_margin_bottom\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.titleMarginBottom\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Body Font Family\"\n                  name=\"tooltip_body_font_family\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.bodyFontFamily\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Body Font Size\"\n                  name=\"tooltip_body_font_size\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.bodyFontSize\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Body Font Style\"\n                  name=\"tooltip_body_font_style\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.bodyFontStyle\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"color\"\n                  placeholder=\"Body Font Color\"\n                  name=\"tooltip_body_font_color\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.bodyFontColor\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Body Align\"\n                  name=\"tooltip_body_align\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.bodyAlign\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Body Spacing\"\n                  name=\"tooltip_body_spacing\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.bodySpacing\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Footer Font Family\"\n                  name=\"tooltip_footer_font_family\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.footerFontFamily\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Footer Font Size\"\n                  name=\"tooltip_footer_font_size\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.footerFontSize\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Footer Font Style\"\n                  name=\"tooltip_footer_font_style\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.footerFontStyle\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"color\"\n                  placeholder=\"Footer Font Color\"\n                  name=\"tooltip_footer_font_color\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.footerFontColor\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Footer Align\"\n                  name=\"tooltip_footer_font_align\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.footerAlign\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Footer Spacing\"\n                  name=\"tooltip_footer_spacing\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.footerSpacing\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Footer Margin Top\"\n                  name=\"tooltip_footer_margin_top\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.tooltips.footerMarginTop\"\n                  (blur)=\"updateTooltipOptions()\" />\n              </mat-form-field>\n            </mat-expansion-panel>\n\n            <mat-expansion-panel *ngIf=\"chart.options\">\n              <mat-expansion-panel-header>\n                <mat-panel-title>\n                  Legend\n                </mat-panel-title>\n              </mat-expansion-panel-header>\n\n              <div>\n                <mat-checkbox [(ngModel)]=\"chart.options.legend.display\"\n                              (change)=\"updateLegendOptions()\"\n                              #legendDisplay=\"matCheckbox\"\n                              name=\"show_chart_legend\">\n                  Show Legend\n                </mat-checkbox>\n              </div>\n\n              <mat-form-field>\n                <mat-label>Legend Position</mat-label>\n                <mat-select [(value)]=\"chart.options.legend.position\" (selectionChange)=\"updateLegendOptions()\">\n                  <mat-option value=\"top\">Top</mat-option>\n                  <mat-option value=\"left\">Left</mat-option>\n                  <mat-option value=\"bottom\">Bottom</mat-option>\n                  <mat-option value=\"right\">Right</mat-option>\n                </mat-select>\n              </mat-form-field>\n\n              <mat-form-field>\n                <mat-label>Legend Align</mat-label>\n                <mat-select [(value)]=\"chart.options.legend.align\" (selectionChange)=\"updateLegendOptions()\">\n                  <mat-option value=\"start\">Start</mat-option>\n                  <mat-option value=\"center\">Center</mat-option>\n                  <mat-option value=\"end\">End</mat-option>\n                </mat-select>\n              </mat-form-field>\n\n              <div>\n                <mat-checkbox [(ngModel)]=\"chart.options.legend.fullWidth\"\n                              (change)=\"updateLegendOptions()\"\n                              #legendDisplay=\"matCheckbox\"\n                              name=\"chart_legend_full_width\">\n                  Full Width\n                </mat-checkbox>\n              </div>\n\n              <div>\n                <mat-checkbox [(ngModel)]=\"chart.options.legend.reverse\"\n                              (change)=\"updateLegendOptions()\"\n                              #legendDisplay=\"matCheckbox\"\n                              name=\"chart_legend_reverse\">\n                  Reverse\n                </mat-checkbox>\n              </div>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Label Box Width\"\n                  name=\"chart_legend_label_box_width\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.legend.labels.boxWidth\"\n                  (blur)=\"updateLegendOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Label Padding\"\n                  name=\"chart_legend_label_padding\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.legend.labels.padding\"\n                  (blur)=\"updateLegendLabelOptions()\" />\n              </mat-form-field>\n\n              <div>\n                <mat-checkbox [(ngModel)]=\"chart.options.legend.labels.usePointStyle\"\n                              (change)=\"updateLegendLabelOptions()\"\n                              #legendDisplay=\"matCheckbox\"\n                              name=\"chart_legend_label_use_point_style\">\n                  Label - Use Point Style\n                </mat-checkbox>\n              </div>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Label Font Size\"\n                  name=\"chart_legend_label_font_size\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.legend.labels.fontSize\"\n                  (blur)=\"updateLegendLabelOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Label Font Style\"\n                  name=\"chart_legend_label_font_style\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.legend.labels.fontStyle\"\n                  (blur)=\"updateLegendLabelOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  type=\"color\"\n                  placeholder=\"Label Font Color\"\n                  name=\"chart_legend_label_font_color\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.legend.labels.fontColor\"\n                  (blur)=\"updateLegendLabelOptions()\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Label Font Family\"\n                  name=\"chart_legend_label_font_family\"\n                  #chartData=\"ngModel\"\n                  [(ngModel)]=\"chart.options.legend.labels.fontFamily\"\n                  (blur)=\"updateLegendLabelOptions()\" />\n              </mat-form-field>\n            </mat-expansion-panel>\n\n            <mat-expansion-panel>\n              <mat-expansion-panel-header>\n                <mat-panel-title>\n                  Labels\n                </mat-panel-title>\n              </mat-expansion-panel-header>\n\n              <section class=\"app-section\">\n                <button mat-flat-button class=\"material-icons\" (click)=\"addChartLabel()\">add</button>\n\n                <!-- index is used to make the name unique -->\n                <div *ngFor=\"let label of chart.labels; let h = index\">\n                  <mat-form-field style=\"width: 100%\">\n                    <input\n                      matInput\n                      placeholder=\"Label\"\n                      name=\"chart_label_{{h}}\"\n                      #chartLabel=\"ngModel\"\n                      [(ngModel)]=\"label.label\"\n                      (blur)=\"updateChartLabel(label)\"  />\n                  </mat-form-field>\n                </div>\n              </section>\n            </mat-expansion-panel>\n\n            <mat-expansion-panel>\n              <mat-expansion-panel-header>\n                <mat-panel-title>\n                  Datasets\n                </mat-panel-title>\n              </mat-expansion-panel-header>\n\n              <section class=\"app-section\">\n                <button mat-flat-button class=\"material-icons\" (click)=\"addDataset()\">add</button>\n\n                <mat-tab-group>\n                  <mat-tab *ngFor=\"let dataset of chart.datasets; let i = index\" label=\"{{dataset.label}}\">\n                    <div>\n                      <mat-form-field style=\"width: 100%\">\n                        <input\n                            matInput\n                            placeholder=\"Label\"\n                            name=\"dataset_label_{{i}}\"\n                            #datasetLabel=\"ngModel\"\n                            [(ngModel)]=\"dataset.label\"\n                            (blur)=\"updateDataset(dataset)\" />\n                      </mat-form-field>\n\n                      <mat-checkbox [(ngModel)]=\"dataset.fill\"\n                                    (change)=\"updateDataset(dataset)\"\n                                    #dataset_{{i}}_fill=\"matCheckbox\"\n                                    name=\"dataset_{{i}}_fill\">\n                        Show Fill\n                      </mat-checkbox>\n\n                      <mat-form-field>\n                        <input matInput\n                               type=\"color\"\n                               placeholder=\"Background Color\"\n                               name=\"dataset_background_color_{{i}}\"\n                               [(ngModel)]=\"dataset.backgroundColor\"\n                               (blur)=\"updateDataset(dataset)\">\n                      </mat-form-field>\n\n                      <mat-form-field>\n                        <input matInput\n                               type=\"color\"\n                               placeholder=\"Line Border Color\"\n                               name=\"dataset_line_border_color_{{i}}\"\n                               [(ngModel)]=\"dataset.borderColor\"\n                               (blur)=\"updateDataset(dataset)\">\n                      </mat-form-field>\n\n                      <mat-form-field>\n                        <input matInput\n                               type=\"color\"\n                               placeholder=\"Point Background Color\"\n                               name=\"dataset_point_background_color_{{i}}\"\n                               [(ngModel)]=\"dataset.pointBackgroundColor\"\n                               (blur)=\"updateDataset(dataset)\">\n                      </mat-form-field>\n\n                      <mat-form-field>\n                        <input\n                          matInput\n                          type=\"number\"\n                          placeholder=\"Point Radius\"\n                          name=\"dataset_point_radius_{{i}}\"\n                          #chartData=\"ngModel\"\n                          [(ngModel)]=\"dataset.pointRadius\"\n                          (blur)=\"updateDataset(dataset)\" />\n                      </mat-form-field>\n\n                      <!-- index is used to make the name unique -->\n                      <!--placeholder=\"{{chart.labels[j].label}}\"-->\n                      <div *ngFor=\"let data of dataset.data; let j = index; trackBy: trackByData\">\n                        <mat-form-field style=\"width: 100%\">\n                          <input\n                            matInput\n                            type=\"number\"\n                            placeholder=\"{{chart.labels[j].label}}\"\n                            name=\"chart_data_{{i}}_{{j}}\"\n                            #chartData=\"ngModel\"\n                            [(ngModel)]=\"data.xData\"\n                            (blur)=\"updateDatasetData(dataset, data)\" />\n                        </mat-form-field>\n                      </div>\n                    </div>\n                  </mat-tab>\n                </mat-tab-group>\n              </section>\n            </mat-expansion-panel>\n          </mat-accordion>\n        </div>\n      </form>\n    </div>\n\n    <!--<input type=\"color\">-->\n  </mat-sidenav>\n</mat-sidenav-container>\n"
        },
        {
            "name": "ChartDisplayComponent",
            "id": "component-ChartDisplayComponent-c16322c8b91c64a3d4e74e99e8d88b5c",
            "file": "src/app/manager/charts/chart-display/chart-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chart-display",
            "styleUrls": [
                "./chart-display.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chart",
                    "line": 23,
                    "type": "Chart"
                },
                {
                    "name": "notifier",
                    "line": 19,
                    "type": "Subject<any>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartCanvasId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartConfig",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "datasetColors",
                    "defaultValue": "[\n    '#39ab28',\n    '#23c28f',\n    '#3b99ca',\n    '#2b66c4',\n    '#554db7',\n    '#715ab7',\n    '#a53ab7',\n    '#b73560',\n    '#c40c09',\n    '#d5531e',\n    '#d48e01',\n    '#6fab05',\n    '#028014',\n    '#009673',\n    '#0461a9',\n    '#354cb0',\n    '#5747b0',\n    '#6f2da6',\n    '#b74783',\n    '#da392f',\n    '#ee6e1f',\n    '#c39c3b',\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "renderedChart",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "makeChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142
                },
                {
                    "name": "makeChartConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "mapToChartJSDataset",
                    "args": [
                        {
                            "name": "dataset",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "rerenderChart",
                    "args": [
                        {
                            "name": "doDestroy",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "doDestroy",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setChartCallbacks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, OnDestroy, AfterViewInit} from '@angular/core';\n\nimport {Subject} from 'rxjs';\n\nimport { Chart as RenderedChart } from '../../../../../node_modules/chart.js/dist/Chart.js';\n\nimport {Chart} from '../../../models/chart';\n\nimport {ChartType} from '../../../enums/chart-types';\n\nimport {ChartService} from '../../../services/chart.service';\n\n@Component({\n  selector: 'app-chart-display',\n  templateUrl: './chart-display.component.html',\n  styleUrls: ['./chart-display.component.scss']\n})\nexport class ChartDisplayComponent implements OnInit, OnDestroy, AfterViewInit {\n  @Input() public notifier: Subject<any>;\n\n  // in the case of a static display chart it can just be passed into this component.\n  // however, if passing to an edit display than the chart will be retrieved from the service\n  @Input() public chart: Chart;\n\n  public chartConfig: any;\n  public chartCanvasId: string;\n\n  public renderedChart: any;\n\n  private datasetColors = [\n    '#39ab28',\n    '#23c28f',\n    '#3b99ca',\n    '#2b66c4',\n    '#554db7',\n    '#715ab7',\n    '#a53ab7',\n    '#b73560',\n    '#c40c09',\n    '#d5531e',\n    '#d48e01',\n    '#6fab05',\n    '#028014',\n    '#009673',\n    '#0461a9',\n    '#354cb0',\n    '#5747b0',\n    '#6f2da6',\n    '#b74783',\n    '#da392f',\n    '#ee6e1f',\n    '#c39c3b',\n  ];\n\n  constructor(private chartService: ChartService) {\n    this.chartConfig = {};\n  }\n\n  ngOnInit() {\n    if (!this.chart) {\n      this.chart = this.chartService.getChart();\n    }\n\n    this.chartCanvasId = 'chart_canvas_' + this.chart.id;\n\n    // listens for request from the parent component to update that chart\n    if (this.notifier) {\n      this.notifier.subscribe(doDestroy => this.rerenderChart(doDestroy));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.notifier) {\n      this.notifier.unsubscribe();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.makeChart();\n  }\n\n  makeChartConfig() {\n    this.chartConfig.type = this.chart.type;\n    this.chartConfig.data = {};\n\n    this.chartConfig.data.labels = this.chart.labels;\n\n    this.chartConfig.data.datasets = [];\n\n    if (!this.chartConfig.options) {\n      this.chartConfig.options = {};\n      this.chartConfig.options.title = {};\n    }\n\n    this.chartConfig.options.maintainAspectRatio = this.chart.options.maintainAspectRatio;\n    this.chartConfig.options.responsive = this.chart.options.responsive;\n\n    this.chartConfig.options.title = this.chart.options.title;\n    this.chartConfig.options.legend = this.chart.options.legend;\n    this.chartConfig.options.tooltips = this.chart.options.tooltips;\n\n    this.chartConfig.options.scales = {\n\n    };\n\n    if (!this.chartConfig.data) {\n      this.chartConfig.data = {};\n      this.chartConfig.datasets = [];\n    }\n\n    for (const dataset of this.chart.datasets) {\n      this.chartConfig.data.datasets.push(this.mapToChartJSDataset(dataset));\n    }\n\n    this.setChartCallbacks();\n  }\n\n  mapToChartJSDataset(dataset) {\n    let chartJSDataset: any;\n\n    chartJSDataset = {\n      label: dataset.label,\n      data: Object.keys(dataset.data).map(k => dataset.data[k].xData),\n      fill: dataset.fill,\n      backgroundColor: dataset.backgroundColor,\n      borderColor: dataset.borderColor,\n      pointRadius: dataset.pointRadius,\n      pointBackgroundColor: dataset.pointBackgroundColor\n    };\n\n    if (this.chart.type === ChartType.PIE || this.chart.type === ChartType.DOUGHNUT) {\n      chartJSDataset.backgroundColor = [];\n\n      this.chart.labels.forEach(() => {\n        chartJSDataset.backgroundColor.push(this.datasetColors.pop());\n      });\n    }\n\n    return chartJSDataset;\n  }\n\n  makeChart() {\n    const context = document.getElementById(this.chartCanvasId);\n\n    this.makeChartConfig();\n\n    this.renderedChart = new RenderedChart(context, this.chartConfig);\n  }\n\n  setChartCallbacks() {\n    // The data object for values is of type object instead of String[]. The callback will return value into String[];\n    if (this.chartConfig.type === ChartType.LINE || this.chartConfig.type === ChartType.BAR) {\n      if (!this.chartConfig.options.scales) {\n        this.chartConfig.options.scales = {};\n      }\n\n      if (!this.chartConfig.options.scales.xAxes) {\n        this.chartConfig.options.scales.xAxes = [{\n          ticks: {}\n        }];\n      }\n\n      this.chartConfig.options.scales.xAxes[0].ticks.callback = (value, index, values) => value.label;\n\n    } else if (this.chartConfig.type === ChartType.HORIZONTAL_BAR) {\n      if (!this.chartConfig.options.scales) {\n        this.chartConfig.options.scales = {};\n      }\n\n      if (!this.chartConfig.options.scales.yAxes) {\n        this.chartConfig.options.scales.yAxes = [{\n          ticks: {}\n        }];\n      }\n\n      if (this.chartConfig.options.scales) {\n        this.chartConfig.options.scales.yAxes[0].ticks.callback = (value, index, values) => value.label;\n      }\n    } else if (this.chartConfig.type === ChartType.PIE || this.chartConfig.type === ChartType.DOUGHNUT) {\n      this.chartConfig.options.legend.labels.generateLabels = (chart) => {\n        const data = chart.data;\n\n        const theHelp = RenderedChart.helpers;\n\n        if (data.labels.length && data.datasets.length) {\n          return data.labels.map((label, i) => {\n            const meta = chart.getDatasetMeta(0);\n            const ds = data.datasets[0];\n            const arc = meta.data[i];\n            const custom = arc && arc.custom || {};\n            const getValueAtIndexOrDefault = theHelp.getValueAtIndexOrDefault;\n            const arcOpts = chart.options.elements.arc;\n            const fill = custom.backgroundColor ? custom.backgroundColor :\n              getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);\n            const stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);\n            const bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);\n\n            return {\n              // And finally :\n              text: label.label,\n              fillStyle: fill,\n              strokeStyle: stroke,\n              lineWidth: bw,\n              hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n              index: i\n            };\n          });\n        }\n      };\n\n      this.chartConfig.options.tooltips.callbacks = {};\n      this.chartConfig.options.tooltips.callbacks.label = (tooltipItem, data) => {\n        const dataValue = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n        const labelValue = data.labels[tooltipItem.index].label;\n\n        return labelValue + ': ' + dataValue;\n      };\n    }\n  }\n\n  rerenderChart(doDestroy: boolean) {\n    this.chart = this.chartService.getChart();\n\n    if (doDestroy) {\n      this.chartConfig = {};\n\n      this.renderedChart.destroy();\n      this.makeChartConfig();\n\n      const context = document.getElementById(this.chartCanvasId);\n      this.renderedChart = new RenderedChart(context, this.chartConfig);\n\n    } else {\n      this.makeChartConfig();\n\n      this.renderedChart.update(this.chartConfig);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./chart-display.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "chartService",
                        "type": "ChartService"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div>\n  <canvas *ngIf=\"chart\" id=\"{{chartCanvasId}}\"></canvas>\n</div>\n"
        },
        {
            "name": "ChartsComponent",
            "id": "component-ChartsComponent-687b832fecead89c2e2bfe3e1f309046",
            "file": "src/app/manager/charts/charts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-charts",
            "styleUrls": [
                "./charts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./charts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "charts",
                    "type": "Chart[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "getCharts",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "chart",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\n\nimport {ChartService} from '../../services/chart.service';\nimport {Chart} from '../../models/chart';\nimport {AddChartDialogComponent} from '../../utilities/add-chart-dialog/add-chart-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-charts',\n  templateUrl: './charts.component.html',\n  styleUrls: ['./charts.component.scss']\n})\nexport class ChartsComponent implements OnInit {\n  public charts: Chart[];\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  constructor(private chartService: ChartService,\n              private router: Router,\n              public dialog: MatDialog) {\n    this.getCharts('/charts');\n  }\n\n  ngOnInit() {\n\n  }\n\n  getCharts(path) {\n    this.chartService.getApiCharts(path).subscribe((response) => {\n      for (const chart of response.charts) {\n        this.chartService.setChart(chart);\n      }\n\n      this.charts = this.chartService.getCharts();\n\n      this.totalResults = response.total;\n      this.nextPage = response.links.next;\n      this.previousPage = response.links.prev;\n    });\n  }\n\n  createNewChart() {\n    const dialogRef = this.dialog.open(AddChartDialogComponent, {\n      width: '750px',\n      data: {\n        showExisting: false,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(chartResponse => {\n      if (chartResponse.chart.title) {\n        let chart = chartResponse.chart;\n\n        this.chartService.createApiChart(chart).subscribe(response => {\n          chart.id = response.data.id;\n\n          for (const label of chart.labels) {\n            this.chartService.createApiChartLabel(chart, label).subscribe(labelResponse => {\n              label.id = labelResponse.data.id;\n            });\n          }\n\n          for (const dataset of chart.datasets) {\n            this.chartService.createApiChartDataset(chart, dataset).subscribe(datasetResponse => {\n              dataset.id = datasetResponse.data.id;\n\n              for (const data of dataset.data) {\n                this.chartService.createApiChartDatasetData(dataset, data).subscribe(dataResponse => {\n                  data.id = dataResponse.data.id;\n                });\n              }\n            });\n          }\n\n          this.chartService.createApiChartOptions(chart, chart.options).subscribe(optionsResponse => {\n            chart.options.id = optionsResponse.data.id;\n\n            // make the title options\n            this.chartService.createApiChartTitleOptions(chart.options, chart.options.title).subscribe(titleOptionsResponse => {\n              chart.options.title.id = titleOptionsResponse.data.id;\n            });\n\n            // make the legend options\n            this.chartService.createApiChartLegendOptions(chart.options, chart.options.legend).subscribe(legendOptionsResponse => {\n              chart.options.legend.id = legendOptionsResponse.data.id;\n\n              this.chartService.createApiChartLegendLabelOptions(chart.options.legend, chart.options.legend.labels)\n                .subscribe(legendLabelOptionsResponse => {\n                  chart.options.legend.labels.id = legendLabelOptionsResponse.data.id;\n                });\n            });\n\n            // make the tooltip options\n            this.chartService.createApiChartTooltipOptions(chart.options, chart.options.tooltips).subscribe(tooltipOptionsResponse => {\n              chart.options.tooltips.id = tooltipOptionsResponse.data.id;\n            });\n          });\n\n          this.router.navigate(['/manager/charts', response.data.id]).then();\n        });\n      }\n    });\n  }\n\n  turnPage(chart) {\n    if (chart.pageIndex < chart.previousPageIndex) {\n      this.getCharts(this.previousPage);\n    } else if (chart.pageIndex > chart.previousPageIndex) {\n      this.getCharts(this.nextPage);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n",
                    "styleUrl": "./charts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "chartService",
                        "type": "ChartService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\">\n  <div class=\"app-content-toolbar\">\n    <h1>Charts</h1>\n    <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createNewChart()\">add</button>\n  </div>\n\n  <div class=\"app-cards-container cards-large\">\n    <app-chart-card\n      *ngFor=\"let chart of charts\"\n      [chart]=\"chart\"\n      [canDelete]=\"false\"\n      class=\"app-card\">\n    </app-chart-card>\n  </div>\n\n  <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n</div>\n"
        },
        {
            "name": "ConfirmRemovalComponent",
            "id": "component-ConfirmRemovalComponent-8397335f3edcea1f94cd1993bf921401",
            "file": "src/app/utilities/confirm-removal/confirm-removal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-removal",
            "styleUrls": [
                "./confirm-removal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-removal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<ConfirmRemovalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport {MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nexport interface DialogData {\n  label: string;\n  content: string;\n}\n\n@Component({\n  selector: 'app-confirm-removal',\n  templateUrl: './confirm-removal.component.html',\n  styleUrls: ['./confirm-removal.component.scss']\n})\nexport class ConfirmRemovalComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<ConfirmRemovalComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-removal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmRemovalComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmRemovalComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  Are you really sure you want to delete <b>{{data.label}}</b>?\n</p>\n\n<br>\n\n<p [innerHtml]=\"data.content\"></p>\n\n<br>\n\n<form>\n  <button mat-flat-button color=\"primary\" [mat-dialog-close]=\"true\">Delete</button>\n  <button mat-flat-button color=\"secondary\" (click)=\"onNoClick()\">Cancel</button>\n</form>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-36ff13246ec4112daec8fc0fe413e05f",
            "file": "src/app/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dashboard works!</p>\n"
        },
        {
            "name": "EditorComponent",
            "id": "component-EditorComponent-2cde252175dc2bac96fcd253418733a9",
            "file": "src/app/utilities/editor/editor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-editor",
            "styleUrls": [
                "./editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoEdit",
                    "line": 49,
                    "type": "boolean"
                },
                {
                    "name": "canDelete",
                    "line": 51,
                    "type": "boolean"
                },
                {
                    "name": "content",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "isEditable",
                    "line": 52,
                    "type": "boolean"
                },
                {
                    "name": "isNote",
                    "line": 50,
                    "type": "boolean"
                },
                {
                    "name": "sourceNote",
                    "line": 53,
                    "type": "SourceNote"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteNote",
                    "line": 56,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "exportNote",
                    "line": 57,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "saveContent",
                    "line": 55,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "bottomSheet",
                    "type": "MatBottomSheet",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chapter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chart",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartRegex",
                    "defaultValue": "/\\(\\(c (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "displayContent",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "editor",
                    "type": "FroalaEditor",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventRegex",
                    "defaultValue": "/\\(\\(e (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "exportTooltip",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initControls",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pages",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personRegex",
                    "defaultValue": "/\\(\\(p (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "referenceRegex",
                    "defaultValue": "/\\(\\(r (\\d+) &quot;(.*?)&quot; &quot;(.*?)&quot; ([^))]*)\\)\\)/gi",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineRegex",
                    "defaultValue": "/\\(\\(t (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addClickEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 712,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "doDeleteNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 704
                },
                {
                    "name": "doExportNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 708
                },
                {
                    "name": "doSaveContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 696
                },
                {
                    "name": "handleChartClick",
                    "args": [
                        {
                            "name": "chart",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 852,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleEventClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 790,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePersonClick",
                    "args": [
                        {
                            "name": "person",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 811,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleReferenceClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 766,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTimelineClick",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 833,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeEditor",
                    "args": [
                        {
                            "name": "initControls",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "initControls",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "setEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 676
                },
                {
                    "name": "setViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 682
                },
                {
                    "name": "tokenizeCharts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 665
                },
                {
                    "name": "tokenizeEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 632
                },
                {
                    "name": "tokenizePersons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 643
                },
                {
                    "name": "tokenizeReferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 609
                },
                {
                    "name": "tokenizeTimelines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 654
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component, Input, NgZone, OnInit, ElementRef, Renderer2, ViewEncapsulation, EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport FroalaEditor from 'froala-editor/js/froala_editor.min.js';\n\nimport {Sleep} from '../sleep';\n\nimport {EditorSelectSourceComponent} from './editor-select-source/editor-select-source.component';\n\nimport {Source} from '../../models/source';\nimport {MessageDialogComponent} from '../message-dialog/message-dialog.component';\nimport {SourceService} from '../../services/source.service';\nimport {EssayReferenceDetailsComponent} from '../../essays/essay-reference-details/essay-reference-details.component';\nimport {Event} from '../../models/events/event';\nimport {Person} from '../../models/persons/person';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {EditorSelectEventComponent} from './editor-select-event/editor-select-event.component';\nimport {EventService} from '../../services/event.service';\nimport {EssayEventDetailsComponent} from '../../essays/essay-event-details/essay-event-details.component';\nimport {ChartService} from '../../services/chart.service';\nimport {Chart} from '../../models/chart';\nimport {PersonService} from '../../services/person.service';\nimport {TimelineService} from '../../services/timeline.service';\nimport {EditorSelectPersonComponent} from './editor-select-person/editor-select-person.component';\nimport {EssayPersonDetailsComponent} from '../../essays/essay-person-details/essay-person-details.component';\nimport {EditorSelectTimelineComponent} from './editor-select-timeline/editor-select-timeline.component';\nimport {EditorSelectChartComponent} from './editor-select-chart/editor-select-chart.component';\nimport {EssayTimelineDetailsComponent} from '../../essays/essay-timeline-details/essay-timeline-details.component';\nimport {EssayChartDetailsComponent} from '../../essays/essay-chart-details/essay-chart-details.component';\nimport {SourceNote} from '../../models/source-note';\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class EditorComponent implements OnInit {\n  @Input() public content: string;\n  @Input() public autoEdit: boolean;\n  @Input() public isNote: boolean;\n  @Input() public canDelete: boolean;\n  @Input() public isEditable: boolean;\n  @Input() public sourceNote: SourceNote;\n\n  @Output() private saveContent: EventEmitter<string>;\n  @Output() private deleteNote: EventEmitter<boolean>;\n  @Output() private exportNote: EventEmitter<boolean>;\n\n  public displayContent: string;\n\n  public editor: FroalaEditor;\n  public initControls;\n\n  public isEditMode: boolean;\n\n  public source: Source;\n  public chapter: string;\n  public pages: string;\n  public addType: string;\n\n  public event: Event;\n  public person: Person;\n  public timeline: Timeline;\n\n  public exportTooltip: string;\n\n  public chart: Chart;\n\n  private referenceRegex = /\\(\\(r (\\d+) &quot;(.*?)&quot; &quot;(.*?)&quot; ([^))]*)\\)\\)/gi;\n  private eventRegex = /\\(\\(e (\\d+) ([^))]*)\\)\\)/ig;\n  private personRegex = /\\(\\(p (\\d+) ([^))]*)\\)\\)/ig;\n  private timelineRegex = /\\(\\(t (\\d+) ([^))]*)\\)\\)/ig;\n  private chartRegex = /\\(\\(c (\\d+) ([^))]*)\\)\\)/ig;\n\n  constructor(public dialog: MatDialog,\n              public bottomSheet: MatBottomSheet,\n              private ngZone: NgZone,\n              private elementRef: ElementRef,\n              private renderer: Renderer2,\n              private sourceService: SourceService,\n              private eventService: EventService,\n              private personService: PersonService,\n              private timelineService: TimelineService,\n              private chartService: ChartService) {\n\n    this.isEditMode = false;\n\n    this.saveContent = new EventEmitter<string>();\n    this.deleteNote = new EventEmitter<boolean>();\n    this.exportNote = new EventEmitter<boolean>();\n  }\n\n  ngOnInit() {\n    if (this.autoEdit) {\n      this.isEditMode = true;\n    } else {\n      this.displayContent = this.content;\n\n      this.tokenizeReferences();\n      this.tokenizeEvents();\n      this.tokenizePersons();\n      this.tokenizeTimelines();\n      this.tokenizeCharts();\n\n      this.addClickEvents().then();\n    }\n\n    if (this.isNote && this.sourceNote && this.sourceNote.exportBrainstorms && this.sourceNote.exportBrainstorms.length) {\n      this.exportTooltip = '';\n\n      for (const brainstorm of this.sourceNote.exportBrainstorms) {\n        if (!this.exportTooltip.length) {\n          this.exportTooltip = brainstorm.title + ', ';\n        } else {\n          this.exportTooltip = this.exportTooltip + brainstorm.title + ', ';\n        }\n      }\n    }\n  }\n\n  public initializeEditor(initControls) {\n    this.initControls = initControls;\n    this.initControls.initialize();\n    this.editor = this.initControls.getEditor();\n\n    this.editor.opts.toolbarButtons = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'chart',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 5\n      },\n      moreMisc: {\n        buttons: [\n          'generic_add',\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 1\n      }\n    };\n\n    this.editor.opts.toolbarButtonsMD = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'chart',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 5\n      },\n      moreMisc: {\n        buttons: [\n          'generic_add',\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 1\n      }\n    };\n\n    this.editor.opts.toolbarButtonsSM = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'chart',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 5\n      },\n      moreMisc: {\n        buttons: [\n          'generic_add',\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 1\n      }\n    };\n\n    this.editor.opts.toolbarButtonsXS = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'chart',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 5\n      },\n      moreMisc: {\n        buttons: [\n          'generic_add',\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 1\n      }\n    };\n\n    FroalaEditor.DefineIconTemplate('add_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('addIcon', { NAME: 'add', template: 'add_icon'});\n\n    FroalaEditor.DefineIconTemplate('reference_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('referenceIcon', { NAME: 'bookmark', template: 'reference_icon'});\n\n    FroalaEditor.DefineIconTemplate('event_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('eventIcon', {NAME: 'event', template: 'event_icon'});\n\n    FroalaEditor.DefineIconTemplate('person_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('personIcon', {NAME: 'person', template: 'person_icon'});\n\n    FroalaEditor.DefineIconTemplate('timeline_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('timelineIcon', {NAME: 'timeline', template: 'timeline_icon'});\n\n    FroalaEditor.DefineIconTemplate('pie_chart', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('chartIcon', {NAME: 'pie_chart', template: 'pie_chart'});\n\n    FroalaEditor.RegisterCommand('generic_add', {\n      title: 'Add',\n      icon: 'addIcon',\n      undo: false,\n      focus: false,\n      callback: () => {\n        const selectedText = this.editor.selection.text();\n\n        if (!selectedText) {\n          this.ngZone.run(() => {\n            this.dialog.open(MessageDialogComponent, {\n              width: '250px',\n              data: {\n                title: 'Error',\n                message: 'Select the text to be linked.'\n              }\n            });\n          });\n\n        } else {\n          let insertValue = '';\n\n          if (this.addType === 'source') {\n            insertValue = '((r ' + this.source.id + ' \"' + this.chapter + '\" \"' + this.pages + '\" ' + selectedText + '))';\n          } else if (this.addType === 'event') {\n            insertValue = '((e ' + this.event.id + ' ' + selectedText + '))';\n          } else if (this.addType === 'person') {\n            insertValue = '((p ' + this.person.id + ' ' + selectedText + '))';\n          } else if (this.addType === 'timeline') {\n            insertValue = '((t ' + this.timeline.id + ' ' + selectedText + '))';\n          } else if (this.addType === 'chart') {\n            insertValue = '((c ' + this.chart.id + ' ' + selectedText + '))';\n          }\n\n          this.editor.html.insert(insertValue, false);\n        }\n      }\n    });\n\n    FroalaEditor.RegisterCommand('reference', {\n      title: 'Add Reference',\n      icon: 'referenceIcon',\n      undo: false,\n      focus: false,\n      callback: () => {\n        this.ngZone.run(() => {\n          const dialogRef = this.dialog.open(EditorSelectSourceComponent, {\n            width: '750px'\n          });\n\n          dialogRef.afterClosed().subscribe(response => {\n            if (response && response.source) {\n              this.addType = 'source';\n              this.source = response.source;\n\n              if (response.chapter) {\n                this.chapter = response.chapter;\n\n                localStorage.setItem('last_chapter', response.chapter);\n              }\n\n              if (response.startPage) {\n                this.pages = response.startPage.toString();\n              }\n\n              if (response.endPage && response.endPage > response.startPage) {\n                this.pages += ' - ' + response.endPage.toString();\n              }\n            }\n          });\n        });\n      }\n    });\n\n    FroalaEditor.RegisterCommand('event', {\n      title: 'Add Event',\n      icon: 'eventIcon',\n      undo: false,\n      focus: false,\n      callback: () => {\n        this.ngZone.run(() => {\n          const dialogRef = this.dialog.open(EditorSelectEventComponent, {\n            width: '750px'\n          });\n\n          dialogRef.afterClosed().subscribe(response => {\n            if (response && response.event) {\n              this.addType = 'event';\n              this.event = response.event;\n            }\n          });\n        });\n      }\n    });\n\n    FroalaEditor.RegisterCommand('person', {\n      title: 'Add Person',\n      icon: 'personIcon',\n      undo: false,\n      focus: false,\n      callback: () => {\n        this.ngZone.run(() => {\n          const dialogRef = this.dialog.open(EditorSelectPersonComponent, {\n            width: '750px'\n          });\n\n          dialogRef.afterClosed().subscribe(response => {\n            if (response && response.person) {\n              this.addType = 'person';\n              this.person = response.person;\n            }\n          });\n        });\n      }\n    });\n\n    FroalaEditor.RegisterCommand('timeline', {\n      title: 'Add Timeline',\n      icon: 'timelineIcon',\n      undo: false,\n      focus: false,\n      callback: () => {\n        this.ngZone.run(() => {\n          const dialogRef = this.dialog.open(EditorSelectTimelineComponent, {\n            width: '750px'\n          });\n\n          dialogRef.afterClosed().subscribe(response => {\n            if (response && response.timeline) {\n              this.addType = 'timeline';\n              this.timeline = response.timeline;\n            }\n          });\n        });\n      }\n    });\n\n    FroalaEditor.RegisterCommand('chart', {\n      title: 'Add Chart',\n      icon: 'chartIcon',\n      undo: false,\n      focus: false,\n      callback: () => {\n        this.ngZone.run(() => {\n          const dialogRef = this.dialog.open(EditorSelectChartComponent, {\n            width: '750px'\n          });\n\n          dialogRef.afterClosed().subscribe(response => {\n            if (response && response.chart) {\n              this.addType = 'chart';\n              this.chart = response.chart;\n            }\n          });\n        });\n      }\n    });\n  }\n\n  tokenizeReferences() {\n    let match;\n\n    while (match = this.referenceRegex.exec(this.displayContent)) {\n      let chapter = '';\n      let pages = '';\n\n      if (match[2] && match[2] !== 'undefined') {\n        chapter = 'data-chapter=\"' + match[2] + '\"';\n      }\n\n      if (match[3] && match[3] !== 'undefined') {\n        pages = 'data-page=\"' + match[3] + '\"';\n      }\n\n      this.displayContent = this.displayContent.replace(\n        match[0],\n        '<span data-referenceid=\"' + match[1] + '\" ' + chapter + '' + pages +\n        ' class=\"content-reference\">' + match[4] + '</span>'\n      );\n    }\n  }\n\n  tokenizeEvents() {\n    let match;\n\n    while (match = this.eventRegex.exec(this.displayContent)) {\n      this.displayContent = this.displayContent.replace(\n        match[0],\n        '<span data-eventid=\"' + match[1] + '\" class=\"content-event\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  tokenizePersons() {\n    let match;\n\n    while (match = this.personRegex.exec(this.displayContent)) {\n      this.displayContent = this.displayContent.replace(\n        match[0],\n        '<span data-personid=\"' + match[1] + '\" class=\"content-person\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  tokenizeTimelines() {\n    let match;\n\n    while (match = this.timelineRegex.exec(this.displayContent)) {\n      this.displayContent = this.displayContent.replace(\n        match[0],\n        '<span data-timelineid=\"' + match[1] + '\" class=\"content-timeline\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  tokenizeCharts() {\n    let match;\n\n    while (match = this.chartRegex.exec(this.displayContent)) {\n      this.displayContent = this.displayContent.replace(\n        match[0],\n        '<span data-chartid=\"' + match[1] + '\" class=\"content-chart\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  setEditMode() {\n    if (this.isEditable) {\n      this.isEditMode = true;\n    }\n  }\n\n  setViewMode() {\n    this.isEditMode = false;\n\n    this.displayContent = this.content;\n\n    this.tokenizeReferences();\n    this.tokenizeEvents();\n    this.tokenizePersons();\n    this.tokenizeTimelines();\n    this.tokenizeCharts();\n\n    this.addClickEvents().then();\n  }\n\n  doSaveContent() {\n    this.displayContent = this.content;\n\n    this.setViewMode();\n\n    this.saveContent.emit(this.content);\n  }\n\n  doDeleteNote() {\n    this.deleteNote.emit(true);\n  }\n\n  doExportNote() {\n    this.exportNote.emit(true);\n  }\n\n  async addClickEvents() {\n    await Sleep.wait(1000);\n\n    this.elementRef.nativeElement.querySelectorAll('.content-reference').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handleReferenceClick(element);\n        }\n      );\n    });\n\n    this.elementRef.nativeElement.querySelectorAll('.content-event').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handleEventClick(element);\n        }\n      );\n    });\n\n    this.elementRef.nativeElement.querySelectorAll('.content-person').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handlePersonClick(element);\n        }\n      );\n    });\n\n    this.elementRef.nativeElement.querySelectorAll('.content-timeline').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handleTimelineClick(element);\n        }\n      );\n    });\n\n    this.elementRef.nativeElement.querySelectorAll('.content-chart').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handleChartClick(element);\n        }\n      );\n    });\n  }\n\n  handleReferenceClick(event) {\n    let sourceId = null;\n    let chapter = null;\n    let pages = null;\n\n    if (event.toElement.localName === 'sup') {\n      sourceId = event.toElement.parentNode.dataset.referenceid;\n    } else {\n      sourceId = event.toElement.dataset.referenceid;\n      chapter = event.toElement.dataset.chapter;\n      pages = event.toElement.dataset.page;\n    }\n\n    this.sourceService.getApiSource(sourceId).subscribe(source => {\n      this.bottomSheet.open(EssayReferenceDetailsComponent as any, {\n        data: {\n          source,\n          chapter,\n          page: pages\n        }\n      });\n    });\n  }\n\n  handleEventClick(event) {\n    let eventId = null;\n\n    if (event.toElement.localName === 'sup') {\n      eventId = event.toElement.parentNode.dataset.eventid;\n    } else {\n      eventId = event.toElement.dataset.eventid;\n    }\n\n    this.eventService.getApiEvent(eventId).subscribe(returnedEvent => {\n      returnedEvent.formatYears();\n      returnedEvent.formatDates();\n\n      this.bottomSheet.open(EssayEventDetailsComponent as any, {\n        data: {\n          event: returnedEvent\n        }\n      });\n    });\n  }\n\n  handlePersonClick(person) {\n    let personId = null;\n\n    if (person.toElement.localName === 'sup') {\n      personId = person.toElement.parentNode.dataset.personid;\n    } else {\n      personId = person.toElement.dataset.personid;\n    }\n\n    this.personService.getApiPerson(personId).subscribe(returnedPerson => {\n      returnedPerson.formatYears();\n      returnedPerson.formatBirthAndDeath();\n      returnedPerson.setAge();\n\n      this.bottomSheet.open(EssayPersonDetailsComponent as any, {\n        data: {\n          person: returnedPerson\n        }\n      });\n    });\n  }\n\n  handleTimelineClick(timeline) {\n    let timelineId = null;\n\n    if (timeline.toElement.localName === 'sup') {\n      timelineId = timeline.toElement.parentNode.dataset.timelineid;\n    } else {\n      timelineId = timeline.toElement.dataset.timelineid;\n    }\n\n    this.timelineService.getApiTimeline(timelineId).subscribe(returnedTimeline => {\n      this.bottomSheet.open(EssayTimelineDetailsComponent as any, {\n        panelClass: 'timeline-bottomsheet-width',\n        data: {\n          timeline: returnedTimeline\n        }\n      });\n    });\n  }\n\n  handleChartClick(chart) {\n    let chartId = null;\n\n    if (chart.toElement.localName === 'sup') {\n      chartId = chart.toElement.parentNode.dataset.chartid;\n    } else {\n      chartId = chart.toElement.dataset.chartid;\n    }\n\n    this.chartService.getApiChart(chartId).subscribe(returnedChart => {\n      this.bottomSheet.open(EssayChartDetailsComponent as any, {\n        data: {\n          chart: returnedChart\n        }\n      });\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n@import '../../../styles/_cards.scss';\n\np {\n  color: $color-darkest;\n}\n\n// styles for links in essay content\n.content-reference {\n  color: blue;\n}\n\n.content-event {\n  color: green;\n}\n\n.content-person {\n  color: purple;\n}\n\n.content-timeline {\n  color: red;\n}\n\n.content-chart {\n  color: yellow;\n}\n\n\n.app-essay-section {\n  margin-bottom: 1rem;\n\n  h2 .material-icons {\n    font-size: 0.9em;\n  }\n}\n\n.app-essay-edit-mode {\n  background-color: $color-gray-scale-100;\n  margin-left: -3rem;\n  margin-right: -3rem;\n  padding: 1rem 3rem 2rem 3rem;\n\n  .app-content-toolbar {\n    margin-bottom: 0;\n    h2 {\n      flex-grow: 1;\n    }\n  }\n}\n",
                    "styleUrl": "./editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet"
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "personService",
                        "type": "PersonService"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService"
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"isNote\" class=\"app-body-content\">\n  <div class=\"app-card-content\">\n    <div *ngIf=\"!isEditMode && sourceNote\">\n      <button mat-flat-button color=\"secondary\" (click)=\"doExportNote()\">-> Export</button>\n\n      <div style=\"float: right\" *ngIf=\"sourceNote.exportBrainstorms.length\">\n        <mat-icon\n          aria-hidden=\"false\"\n          aria-label=\"Exported to Brainstorms\"\n          matTooltip=\"{{exportTooltip}}\">check_circle</mat-icon>\n      </div>\n    </div>\n\n    <div class=\"app-essay-section essay-content\" *ngIf=\"!isEditMode\"   >\n        <h2>\n          <button *ngIf=\"canDelete\" mat-flat-button class=\"material-icons\" (click)=\"doDeleteNote()\">delete</button>\n        </h2>\n\n      <div (dblclick)=\"setEditMode()\" [innerHtml]=\"displayContent | safeHtml\"></div>\n    </div>\n\n    <div *ngIf=\"isEditMode\" class=\"app-essay-edit-mode\">\n      <div class=\"app-content-toolbar\">\n        <h2>Content</h2>\n        <button mat-flat-button class=\"material-icons\" (click)=\"doSaveContent()\">save</button>\n        <button mat-flat-button class=\"material-icons\" (click)=\"setViewMode()\">close</button>\n      </div>\n\n      <div (froalaInit)=\"initializeEditor($event)\"\n           [(froalaModel)]=\"content\"\n           [froalaEditor]></div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isNote\">\n  <div *ngIf=\"!isEditMode\" (dblclick)=\"setEditMode()\" [innerHtml]=\"displayContent | safeHtml\"></div>\n\n  <div *ngIf=\"isEditMode\" class=\"app-essay-edit-mode\">\n    <div class=\"app-content-toolbar\">\n      <h2>Content</h2>\n      <button mat-flat-button class=\"material-icons\" (click)=\"doSaveContent()\">save</button>\n      <button mat-flat-button class=\"material-icons\" (click)=\"setViewMode()\">close</button>\n    </div>\n\n    <div (froalaInit)=\"initializeEditor($event)\"\n         [(froalaModel)]=\"content\"\n         [froalaEditor]></div>\n  </div>\n</div>\n"
        },
        {
            "name": "EditorSelectChartComponent",
            "id": "component-EditorSelectChartComponent-c8680711aa427ae5eb4d976e350009b0",
            "file": "src/app/utilities/editor/editor-select-chart/editor-select-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-editor-select-chart",
            "styleUrls": [
                "./editor-select-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editor-select-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "charts",
                    "type": "Chart[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartsAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chartsFilteredOptions",
                    "type": "Observable<Chart[]>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditorSelectChartComponent>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadAutoComplete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "responseObject",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterCharts",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Chart[]",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "saveChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Chart} from '../../../models/chart';\n\nimport {ChartService} from '../../../services/chart.service';\n\n@Component({\n  selector: 'app-editor-select-chart',\n  templateUrl: './editor-select-chart.component.html',\n  styleUrls: ['./editor-select-chart.component.scss']\n})\nexport class EditorSelectChartComponent implements OnInit {\n  public charts: Chart[];\n\n  public responseObject: any;\n\n  public loadAutoComplete: boolean;\n\n  public chartsAutocompleteControl = new FormControl();\n  public chartsFilteredOptions: Observable<Chart[]>;\n  public chartFieldDisplayValue: string;\n\n  constructor(public dialogRef: MatDialogRef<EditorSelectChartComponent>, private chartService: ChartService) {\n    this.responseObject = {\n      chart: null\n    };\n\n    this.loadAutoComplete = false;\n\n    this.chartService.getApiCharts('/charts?page[size]=0').subscribe(charts => {\n      for (const chart of charts.charts) {\n        this.chartService.setChart(chart);\n      }\n\n      this.charts = this.chartService.getCharts();\n\n      this.chartsFilteredOptions = this.chartsAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(chart => this._filterCharts(chart))\n      );\n\n      this.loadAutoComplete = true;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveChart() {\n    this.responseObject.chart = this.chartsAutocompleteControl.value;\n  }\n\n  displayChart(chart: Chart) {\n    if (chart) {\n      this.chartFieldDisplayValue = chart.options.title.text;\n    }\n\n    return this.chartFieldDisplayValue;\n  }\n\n  private _filterCharts(filterValue: any): Chart[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.charts.filter(chart => {\n        return chart.options.title.text.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./editor-select-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectChartComponent>"
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectChartComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  Select a chart\n</p>\n\n<br>\n\n<div>\n  <form #chartSelectForm=\"ngForm\">\n    <section>\n      <div>\n        <mat-form-field class=\"app-field-reference\" style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Chart\"\n            aria-label=\"Chart\"\n            matInput\n            [formControl]=\"chartsAutocompleteControl\"\n            [matAutocomplete]=\"auto\">\n\n          <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayChart\" (optionSelected)=\"saveChart()\">\n            <mat-option *ngFor=\"let chart of chartsFilteredOptions | async\" [value]=\"chart\">\n              {{chart.options.title.text}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </div>\n    </section>\n\n    <button mat-flat-button color=\"primary\" [mat-dialog-close]=\"responseObject\">Select</button>\n    <button mat-flat-button color=\"secondary\" (click)=\"onNoClick()\">Cancel</button>\n  </form>\n</div>\n"
        },
        {
            "name": "EditorSelectEventComponent",
            "id": "component-EditorSelectEventComponent-f9b2707a1400a30e62e46ae4df06739b",
            "file": "src/app/utilities/editor/editor-select-event/editor-select-event.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-editor-select-event",
            "styleUrls": [
                "./editor-select-event.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editor-select-event.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditorSelectEventComponent>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "events",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventsAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventsFilteredOptions",
                    "type": "Observable<Event[]>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadAutoComplete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "responseObject",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterEvents",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Event[]",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "saveEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport {Event} from '../../../models/events/event';\n\nimport {EventService} from '../../../services/event.service';\n\n@Component({\n  selector: 'app-editor-select-event',\n  templateUrl: './editor-select-event.component.html',\n  styleUrls: ['./editor-select-event.component.scss']\n})\nexport class EditorSelectEventComponent implements OnInit {\n  public events: Event[];\n\n  public responseObject: any;\n\n  public loadAutoComplete: boolean;\n\n  public eventsAutocompleteControl = new FormControl();\n  public eventsFilteredOptions: Observable<Event[]>;\n  public eventFieldDisplayValue: string;\n\n  constructor(public dialogRef: MatDialogRef<EditorSelectEventComponent>, private eventService: EventService) {\n    this.responseObject = {\n      event: null\n    };\n\n    this.loadAutoComplete = false;\n\n    this.eventService.getApiEvents('/events?page[size]=0&fields[event]=label&sort=label', null, null, false).subscribe(events => {\n      for (const event of events.events) {\n        this.eventService.setEvent(event);\n      }\n\n      this.events = this.eventService.getEvents();\n\n      this.eventsFilteredOptions = this.eventsAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(event => this._filterEvents(event))\n      );\n\n      this.loadAutoComplete = true;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveEvent() {\n    this.responseObject.event = this.eventsAutocompleteControl.value;\n  }\n\n  displayEvent(event: Event) {\n    if (event) {\n      this.eventFieldDisplayValue = event.label;\n    }\n\n    return this.eventFieldDisplayValue;\n  }\n\n  private _filterEvents(filterValue: any): Event[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.events.filter(event => {\n        return event.label.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./editor-select-event.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectEventComponent>"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectEventComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  Select an event\n</p>\n\n<br>\n\n<div>\n  <form #eventSelectForm=\"ngForm\">\n    <section>\n      <div>\n        <mat-form-field class=\"app-field-reference\" style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Event\"\n            aria-label=\"Event\"\n            matInput\n            [formControl]=\"eventsAutocompleteControl\"\n            [matAutocomplete]=\"auto\">\n\n          <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayEvent\" (optionSelected)=\"saveEvent()\">\n            <mat-option *ngFor=\"let event of eventsFilteredOptions | async\" [value]=\"event\">\n              {{event.label}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </div>\n    </section>\n\n    <button mat-flat-button color=\"primary\" [mat-dialog-close]=\"responseObject\">Select</button>\n    <button mat-flat-button color=\"secondary\" (click)=\"onNoClick()\">Cancel</button>\n  </form>\n</div>\n"
        },
        {
            "name": "EditorSelectPersonComponent",
            "id": "component-EditorSelectPersonComponent-ecae74780d0feadfc80d89fd2595b36d",
            "file": "src/app/utilities/editor/editor-select-person/editor-select-person.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-editor-select-person",
            "styleUrls": [
                "./editor-select-person.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editor-select-person.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditorSelectPersonComponent>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadAutoComplete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "persons",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personsAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personsFilteredOptions",
                    "type": "Observable<Person[]>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "responseObject",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterPersons",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person[]",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "savePerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {PersonService} from '../../../services/person.service';\n\nimport {Person} from '../../../models/persons/person';\n\n@Component({\n  selector: 'app-editor-select-person',\n  templateUrl: './editor-select-person.component.html',\n  styleUrls: ['./editor-select-person.component.scss']\n})\nexport class EditorSelectPersonComponent implements OnInit {\n  public persons: Person[];\n\n  public responseObject: any;\n\n  public loadAutoComplete: boolean;\n\n  public personsAutocompleteControl = new FormControl();\n  public personsFilteredOptions: Observable<Person[]>;\n  public personFieldDisplayValue: string;\n\n  constructor(public dialogRef: MatDialogRef<EditorSelectPersonComponent>, private personService: PersonService) {\n    this.responseObject = {\n      person: null\n    };\n\n    this.loadAutoComplete = false;\n\n    this.personService.getApiPersons('/persons?page[size]=0&fields[person]=first_name,middle_name,last_name', null, null, false)\n      .subscribe(persons => {\n\n      for (const person of persons.persons) {\n        this.personService.setPerson(person);\n      }\n\n      this.persons = this.personService.getPersons();\n\n      this.personsFilteredOptions = this.personsAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(event => this._filterPersons(event))\n      );\n\n      this.loadAutoComplete = true;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  savePerson() {\n    this.responseObject.person = this.personsAutocompleteControl.value;\n  }\n\n  displayPerson(person: Person) {\n    if (person) {\n      this.personFieldDisplayValue = person.firstName;\n\n      if (person.middleName) {\n        this.personFieldDisplayValue += ' ' + person.middleName;\n      }\n\n      if (person.lastName) {\n        this.personFieldDisplayValue += ' ' + person.lastName;\n      }\n    }\n\n    return this.personFieldDisplayValue;\n  }\n\n  private _filterPersons(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.persons.filter(person => {\n        return person.firstName.toLowerCase().includes(filterValue) || person.lastName.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./editor-select-person.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectPersonComponent>"
                    },
                    {
                        "name": "personService",
                        "type": "PersonService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectPersonComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  Select a person\n</p>\n\n<br>\n\n<div>\n  <form #eventSelectForm=\"ngForm\">\n    <section>\n      <div>\n        <mat-form-field class=\"app-field-reference\" style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Person\"\n            aria-label=\"Person\"\n            matInput\n            [formControl]=\"personsAutocompleteControl\"\n            [matAutocomplete]=\"auto\">\n\n          <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayPerson\" (optionSelected)=\"savePerson()\">\n            <mat-option *ngFor=\"let person of personsFilteredOptions | async\" [value]=\"person\">\n              {{person.firstName}}\n              <span *ngIf=\"person.middleName\"> {{person.middleName}}</span>\n              <span *ngIf=\"person.lastName\"> {{person.lastName}}</span>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </div>\n    </section>\n\n    <button mat-flat-button color=\"primary\" [mat-dialog-close]=\"responseObject\">Select</button>\n    <button mat-flat-button color=\"secondary\" (click)=\"onNoClick()\">Cancel</button>\n  </form>\n</div>\n"
        },
        {
            "name": "EditorSelectSourceComponent",
            "id": "component-EditorSelectSourceComponent-1138679dfb9b9045974a378568dfabfd",
            "file": "src/app/utilities/editor/editor-select-source/editor-select-source.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-editor-select-source",
            "styleUrls": [
                "./editor-select-source.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editor-select-source.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditorSelectSourceComponent>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadAutoComplete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "responseObject",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesFilteredOptions",
                    "type": "Observable<Source[]>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterSources",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Source[]",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displaySource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "saveSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Source} from '../../../models/source';\n\nimport {SourceService} from '../../../services/source.service';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-editor-select-source',\n  templateUrl: './editor-select-source.component.html',\n  styleUrls: ['./editor-select-source.component.scss']\n})\nexport class EditorSelectSourceComponent implements OnInit {\n  public sources: Source[];\n\n  public responseObject: any;\n\n  public loadAutoComplete: boolean;\n\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  constructor(public dialogRef: MatDialogRef<EditorSelectSourceComponent>,\n              private sourceService: SourceService) {\n    this.responseObject = {\n      source: null,\n      chapter: '',\n      startPage: 0,\n      endPage: 0\n    };\n\n    this.responseObject.chapter = localStorage.getItem('last_chapter') || '';\n\n    this.loadAutoComplete = false;\n\n    this.sourceService.getApiSources('/references?page[size]=0&fields[reference]=title,sub_title&sort=title').subscribe(sources => {\n      for (const source of sources.sources) {\n        this.sourceService.setSource(source);\n      }\n\n      this.sources = this.sourceService.getSources();\n\n      this.sourcesFilteredOptions = this.sourcesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(source => this._filterSources(source))\n      );\n\n      this.loadAutoComplete = true;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveSource() {\n    this.responseObject.source = this.sourcesAutocompleteControl.value;\n  }\n\n  displaySource(source: Source) {\n    if (source) {\n      this.sourceFieldDisplayValue = source.title;\n\n      if (source.subTitle) {\n        this.sourceFieldDisplayValue = this.sourceFieldDisplayValue + ': ' + source.subTitle;\n      }\n    }\n\n    return this.sourceFieldDisplayValue;\n  }\n\n  private _filterSources(filterValue: any): Source[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.sources.filter(source => {\n        return source.title.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./editor-select-source.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectSourceComponent>"
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectSourceComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  Select a source\n</p>\n\n<br>\n\n<div>\n  <form #sourceSelectForm=\"ngForm\">\n    <section>\n      <div>\n        <mat-form-field class=\"app-field-reference\" style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Source\"\n            aria-label=\"Source\"\n            matInput\n            [formControl]=\"sourcesAutocompleteControl\"\n            [matAutocomplete]=\"auto\">\n\n          <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displaySource\" (optionSelected)=\"saveSource()\">\n            <mat-option *ngFor=\"let source of sourcesFilteredOptions | async\" [value]=\"source\">\n              {{source.title}} <span *ngIf=\"source.subTitle\">: {{source.subTitle}}</span>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </div>\n    </section>\n\n    <section>\n      <div>\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Chapter\"\n            name=\"source_chapter\"\n            #chapter=\"ngModel\"\n            matInput\n            [(ngModel)]=\"responseObject.chapter\">\n        </mat-form-field>\n      </div>\n\n      <div>\n        <mat-form-field>\n          <input\n            type=\"number\"\n            placeholder=\"Start Page\"\n            name=\"source_start_page\"\n            matInput\n            #startPage=\"ngModel\"\n            [(ngModel)]=\"responseObject.startPage\">\n        </mat-form-field>\n\n        <mat-form-field>\n          <input\n            type=\"number\"\n            placeholder=\"End Page\"\n            name=\"source_end_page\"\n            matInput\n            #endPage=\"ngModel\"\n            [(ngModel)]=\"responseObject.endPage\">\n        </mat-form-field>\n      </div>\n    </section>\n\n    <button mat-flat-button color=\"primary\" [mat-dialog-close]=\"responseObject\">Select</button>\n    <button mat-flat-button color=\"secondary\" (click)=\"onNoClick()\">Cancel</button>\n  </form>\n</div>\n"
        },
        {
            "name": "EditorSelectTimelineComponent",
            "id": "component-EditorSelectTimelineComponent-ca0a6cfd5989cec4349f70c2b7bfa178",
            "file": "src/app/utilities/editor/editor-select-timeline/editor-select-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-editor-select-timeline",
            "styleUrls": [
                "./editor-select-timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editor-select-timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditorSelectTimelineComponent>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadAutoComplete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "responseObject",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelinesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelinesFilteredOptions",
                    "type": "Observable<Timeline[]>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterTimelines",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Timeline[]",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "saveTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Timeline} from '../../../models/timelines/timeline';\n\nimport {TimelineService} from '../../../services/timeline.service';\n\n@Component({\n  selector: 'app-editor-select-timeline',\n  templateUrl: './editor-select-timeline.component.html',\n  styleUrls: ['./editor-select-timeline.component.scss']\n})\nexport class EditorSelectTimelineComponent implements OnInit {\n  public timelines: Timeline[];\n\n  public responseObject: any;\n\n  public loadAutoComplete: boolean;\n\n  public timelinesAutocompleteControl = new FormControl();\n  public timelinesFilteredOptions: Observable<Timeline[]>;\n  public timelineFieldDisplayValue: string;\n\n  constructor(public dialogRef: MatDialogRef<EditorSelectTimelineComponent>, private timelineService: TimelineService) {\n    this.responseObject = {\n      timeline: null\n    };\n\n    this.loadAutoComplete = false;\n\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['label'], null, null, null, false).subscribe(timelines => {\n      for (const timeline of timelines.timelines) {\n        this.timelineService.setTimeline(timeline);\n      }\n\n      this.timelines = this.timelineService.getTimelines();\n\n      this.timelinesFilteredOptions = this.timelinesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterTimelines(timeline))\n      );\n\n      this.loadAutoComplete = true;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveTimeline() {\n    this.responseObject.timeline = this.timelinesAutocompleteControl.value;\n  }\n\n  displayTimeline(timeline: Timeline) {\n    if (timeline) {\n      this.timelineFieldDisplayValue = timeline.label;\n    }\n\n    return this.timelineFieldDisplayValue;\n  }\n\n  private _filterTimelines(filterValue: any): Timeline[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.timelines.filter(timeline => {\n        return timeline.label.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./editor-select-timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectTimelineComponent>"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditorSelectTimelineComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  Select a timeline\n</p>\n\n<br>\n\n<div>\n  <form #timelineSelectForm=\"ngForm\">\n    <section>\n      <div>\n        <mat-form-field class=\"app-field-reference\" style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Timeline\"\n            aria-label=\"Timeline\"\n            matInput\n            [formControl]=\"timelinesAutocompleteControl\"\n            [matAutocomplete]=\"auto\">\n\n          <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayTimeline\" (optionSelected)=\"saveTimeline()\">\n            <mat-option *ngFor=\"let timeline of timelinesFilteredOptions | async\" [value]=\"timeline\">\n              {{timeline.label}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </div>\n    </section>\n\n    <button mat-flat-button color=\"primary\" [mat-dialog-close]=\"responseObject\">Select</button>\n    <button mat-flat-button color=\"secondary\" (click)=\"onNoClick()\">Cancel</button>\n  </form>\n</div>\n"
        },
        {
            "name": "EssayCardComponent",
            "id": "component-EssayCardComponent-143cf60c75491c730d6f370183f675a7",
            "file": "src/app/essays/essay-card/essay-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-card",
            "styleUrls": [
                "./essay-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "essay",
                    "line": 10,
                    "type": "Essay"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeEssay",
                    "line": 13,
                    "type": "EventEmitter<Essay>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveEssay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Essay} from '../../models/essays/essay';\n\n@Component({\n  selector: 'app-essay-card',\n  templateUrl: './essay-card.component.html',\n  styleUrls: ['./essay-card.component.scss']\n})\nexport class EssayCardComponent implements OnInit {\n  @Input() essay: Essay;\n  @Input() canDelete: boolean;\n\n  @Output() private removeEssay: EventEmitter<Essay>;\n\n  constructor() {\n    this.removeEssay = new EventEmitter<Essay>();\n  }\n\n  ngOnInit() {\n  }\n\n  doRemoveEssay() {\n    this.removeEssay.emit(this.essay);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n\n.essay-card-banner {\n  margin-bottom: 20px;\n  width: 100%;\n}\n",
                    "styleUrl": "./essay-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveEssay()\">delete</button>\n\n  <div routerLink=\"/essay/{{essay.id}}\">\n    <img class=\"essay-card-banner\" src=\"{{essay.banner}}\">\n\n    <mat-card-title>{{essay.title}}</mat-card-title>\n    <mat-card-content [innerHtml]=\"essay.abstract\"></mat-card-content>\n  </div>\n\n</mat-card>\n"
        },
        {
            "name": "EssayChartDetailsComponent",
            "id": "component-EssayChartDetailsComponent-5ea7e8438a9b245a5607a7819feb180b",
            "file": "src/app/essays/essay-chart-details/essay-chart-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-chart-details",
            "styleUrls": [
                "./essay-chart-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-chart-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport {Chart} from '../../models/chart';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  chart: Chart;\n}\n\n@Component({\n  selector: 'app-essay-chart-details',\n  templateUrl: './essay-chart-details.component.html',\n  styleUrls: ['./essay-chart-details.component.scss']\n})\nexport class EssayChartDetailsComponent implements OnInit {\n\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./essay-chart-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-bottom\">\n  <div class=\"app-drawer-bottom-body\">\n    <div class=\"app-drawer-bottom-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Chart</div>\n        <div class=\"app-drawer-heading\">\n          {{data.chart.options.title.text}}\n        </div>\n      </div>\n\n      <app-chart-display [chart]=\"data.chart\"></app-chart-display>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssayComponent",
            "id": "component-EssayComponent-d68d367a43454744b2aef6908f54fa65",
            "file": "src/app/essays/essay/essay.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay",
            "styleUrls": [
                "./essay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bottomSheet",
                    "type": "MatBottomSheet",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essay",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayContent",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayEditor",
                    "type": "FroalaEditor",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayEvent",
                    "type": "EssayEvent",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayNote",
                    "type": "EssayNote",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayNotes",
                    "type": "EssayNote[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayPerson",
                    "type": "EssayPerson",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayReference",
                    "type": "EssayReference",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayScreenSize",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTimeline",
                    "type": "EssayTimeline",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTypes",
                    "type": "EssayType[]",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayUsers",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventRegex",
                    "defaultValue": "/\\(\\(e (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "events",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventsAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventsFilteredOptions",
                    "type": "Observable<Event[]>",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initControls",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAbstractEditMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddEssayEventMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddEssayNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddEssayPersonMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddEssayReferenceMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddEssayTimelineMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEssayEditMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEssayTitleEditMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSavingBanner",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personRegex",
                    "defaultValue": "/\\(\\(p (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "persons",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personsAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personsFilteredOptions",
                    "type": "Observable<Person[]>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "referenceRegex",
                    "defaultValue": "/\\(\\(r (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectedEssayEvent",
                    "type": "EssayEvent",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedEssayPerson",
                    "type": "EssayPerson",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedEssayReference",
                    "type": "EssayReference",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedEssayTimeline",
                    "type": "EssayTimeline",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesFilteredOptions",
                    "type": "Observable<Source[]>",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineRegex",
                    "defaultValue": "/\\(\\(t (\\d+) ([^))]*)\\)\\)/ig",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelinesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelinesFilteredOptions",
                    "type": "Observable<Timeline[]>",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterEvents",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Event[]",
                    "typeParameters": [],
                    "line": 1132,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterPersons",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person[]",
                    "typeParameters": [],
                    "line": 1142,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterSources",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Source[]",
                    "typeParameters": [],
                    "line": 1122,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterTimelines",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Timeline[]",
                    "typeParameters": [],
                    "line": 1164,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addClickEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 982,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 882
                },
                {
                    "name": "addNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 915
                },
                {
                    "name": "addPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 893
                },
                {
                    "name": "addReference",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 871
                },
                {
                    "name": "addTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 904
                },
                {
                    "name": "addUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 624
                },
                {
                    "name": "cancelAddEssayEventMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 967
                },
                {
                    "name": "cancelAddEssayNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 957
                },
                {
                    "name": "cancelAddEssayPersonMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 972
                },
                {
                    "name": "cancelAddEssayReferenceMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 962
                },
                {
                    "name": "cancelAddEssayTimelineMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 977
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "EssayNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 926,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "EssayNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselectAllEssayEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 667
                },
                {
                    "name": "deselectAllEssayPersons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 673
                },
                {
                    "name": "deselectAllEssayReferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 661
                },
                {
                    "name": "deselectAllEssayTimelines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 679
                },
                {
                    "name": "displayEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 1052,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 1060,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displaySource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 1040,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 1076,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEssayTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 850
                },
                {
                    "name": "handleEventClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 719,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePersonClick",
                    "args": [
                        {
                            "name": "person",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 737,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleReferenceClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 701,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTimelineClick",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 755,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeEssayEditor",
                    "args": [
                        {
                            "name": "initControls",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "initControls",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeNewEssayEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 609
                },
                {
                    "name": "initializeNewEssayNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 597
                },
                {
                    "name": "initializeNewEssayPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 614
                },
                {
                    "name": "initializeNewEssayReference",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 604
                },
                {
                    "name": "initializeNewEssayTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 619
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 299,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225
                },
                {
                    "name": "saveAbstractContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 856
                },
                {
                    "name": "saveEssayContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 860
                },
                {
                    "name": "saveEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1088
                },
                {
                    "name": "saveImage",
                    "args": [
                        {
                            "name": "e",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1100,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "savePerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1092
                },
                {
                    "name": "saveSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1084
                },
                {
                    "name": "saveTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1096
                },
                {
                    "name": "selectEssayEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 689,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectEssayPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 693,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectEssayReference",
                    "args": [
                        {
                            "name": "reference",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 685,
                    "jsdoctags": [
                        {
                            "name": "reference",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectEssayTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 697,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectEssayType",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 817,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAbstractEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 825
                },
                {
                    "name": "setAbstractViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 829
                },
                {
                    "name": "setAddEssayEventMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 942
                },
                {
                    "name": "setAddEssayNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 932
                },
                {
                    "name": "setAddEssayPersonMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 947
                },
                {
                    "name": "setAddEssayReferenceMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 937
                },
                {
                    "name": "setAddEssayTimelineMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 952
                },
                {
                    "name": "setEssayContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1026
                },
                {
                    "name": "setEssayEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 833
                },
                {
                    "name": "setEssayTitleEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 843
                },
                {
                    "name": "setEssayTitleViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 846
                },
                {
                    "name": "setEssayViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 837
                },
                {
                    "name": "sleep",
                    "args": [
                        {
                            "name": "ms",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 1118,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleContentPanel",
                    "args": [
                        {
                            "name": "contentPanel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1030,
                    "jsdoctags": [
                        {
                            "name": "contentPanel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tokenizeEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 784
                },
                {
                    "name": "tokenizePeople",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 795
                },
                {
                    "name": "tokenizeReferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 773
                },
                {
                    "name": "tokenizeTimelines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 806
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, OnInit, AfterViewInit, Renderer2, ViewEncapsulation} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport {ActivatedRoute} from '@angular/router';\n\nimport FroalaEditor from 'froala-editor/js/froala_editor.min.js';\n\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\n\nimport {EssayReferenceDetailsComponent} from '../essay-reference-details/essay-reference-details.component';\nimport {EssayEventDetailsComponent} from '../essay-event-details/essay-event-details.component';\nimport {EssayPersonDetailsComponent} from '../essay-person-details/essay-person-details.component';\nimport {EssayTimelineDetailsComponent} from '../essay-timeline-details/essay-timeline-details.component';\n\nimport {Essay} from '../../models/essays/essay';\nimport {EssayNote} from '../../models/essays/essay-note';\nimport {Source} from '../../models/source';\nimport {EssayReference} from '../../models/essays/essay-reference';\nimport {Event} from '../../models/events/event';\nimport {Person} from '../../models/persons/person';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {EssayEvent} from '../../models/essays/essay-event';\nimport {EventService} from '../../services/event.service';\nimport {EssayPerson} from '../../models/essays/essay-person';\nimport {EssayTimeline} from '../../models/essays/essay-timeline';\n\nimport {EssayService} from '../../services/essay.service';\nimport {SourceService} from '../../services/source.service';\nimport {TimelineService} from '../../services/timeline.service';\nimport {PersonService} from '../../services/person.service';\nimport {EssayType} from '../../models/essays/essay-type';\nimport {EssayUser} from '../../models/essays/essay-user';\nimport {AddUserDialogComponent} from '../../utilities/add-user-dialog/add-user-dialog.component';\nimport {MessageDialogComponent} from '../../utilities/message-dialog/message-dialog.component';\nimport {User} from '../../models/user';\nimport {MatDialog} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-essay',\n  templateUrl: './essay.component.html',\n  styleUrls: ['./essay.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class EssayComponent implements OnInit, AfterViewInit {\n  public isSavingBanner: boolean;\n\n  public essayEditor: FroalaEditor;\n  public initControls;\n\n  public essay: Essay;\n\n  public essayUsers: User[];\n  public essayTypes: EssayType[];\n\n  public selectedEssayReference: EssayReference;\n  public selectedEssayEvent: EssayEvent;\n  public selectedEssayPerson: EssayPerson;\n  public selectedEssayTimeline: EssayTimeline;\n\n  public isEssayTitleEditMode: boolean;\n  public isAbstractEditMode: boolean;\n  public isEssayEditMode: boolean;\n\n  public title: string;\n\n  public essayContent: string;\n\n  public essayNotes: EssayNote[];\n\n  public essayNote: EssayNote;\n  public essayReference: EssayReference;\n  public essayEvent: EssayEvent;\n  public essayPerson: EssayPerson;\n  public essayTimeline: EssayTimeline;\n\n  public essayScreenSize: string;\n\n  public isAddEssayNoteMode: boolean;\n  public isAddEssayReferenceMode: boolean;\n  public isAddEssayEventMode: boolean;\n  public isAddEssayPersonMode: boolean;\n  public isAddEssayTimelineMode: boolean;\n\n  public source: Source;\n  public sources: Source[] = [];\n\n  public event: Event;\n  public events: Event[];\n\n  public person: Person;\n  public persons: Person[];\n\n  public timeline: Timeline;\n  public timelines: Timeline[];\n\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  public eventsAutocompleteControl = new FormControl();\n  public eventsFilteredOptions: Observable<Event[]>;\n  public eventFieldDisplayValue: string;\n\n  public personsAutocompleteControl = new FormControl();\n  public personsFilteredOptions: Observable<Person[]>;\n  public personFieldDisplayValue: string;\n\n  public timelinesAutocompleteControl = new FormControl();\n  public timelinesFilteredOptions: Observable<Timeline[]>;\n  public timelineFieldDisplayValue: string;\n\n  private referenceRegex = /\\(\\(r (\\d+) ([^))]*)\\)\\)/ig;\n  private eventRegex = /\\(\\(e (\\d+) ([^))]*)\\)\\)/ig;\n  private personRegex = /\\(\\(p (\\d+) ([^))]*)\\)\\)/ig;\n  private timelineRegex = /\\(\\(t (\\d+) ([^))]*)\\)\\)/ig;\n\n  constructor(private elementRef: ElementRef,\n              public dialog: MatDialog,\n              private renderer: Renderer2,\n              private route: ActivatedRoute,\n              private essayService: EssayService,\n              private sourceService: SourceService,\n              private eventService: EventService,\n              private personService: PersonService,\n              private timelineService: TimelineService,\n              public bottomSheet: MatBottomSheet) {\n\n    const essayId = this.route.snapshot.paramMap.get('id');\n\n    this.isSavingBanner = false;\n\n    this.essayTypes = [];\n    this.essayUsers = [];\n\n    this.isEssayTitleEditMode = false;\n    this.isAbstractEditMode = false;\n    this.isEssayEditMode = false;\n\n    this.isAddEssayNoteMode = false;\n\n    this.essayScreenSize = 'fullscreen_exit';\n\n    this.essay = new Essay();\n    this.essay.initializeNewEssay();\n\n    this.initializeNewEssayNote();\n\n    this.essayService.getApiEssay(essayId).subscribe(essay => {\n      this.essay = essay;\n\n      this.essayService.getApiEssayUsers(null, this.essay).subscribe((response) => {\n        for (const user of response.users) {\n          this.essayUsers.push(user);\n        }\n      });\n\n      this.essayNotes = essay.essayNotes;\n\n      this.setEssayContent();\n\n      // once the raw content has been retrieved tokenize the content\n      this.tokenizeReferences();\n      this.tokenizeEvents();\n      this.tokenizePeople();\n      this.tokenizeTimelines();\n    });\n\n    this.essayService.getApiEssayTypes().subscribe((response) => {\n      for (const type of response.data) {\n        const newType = new EssayType();\n        newType.initializeNewEssayType();\n\n        newType.mapEssayType(type);\n\n        this.essayService.setEssayType(newType);\n      }\n\n      this.essayTypes = this.essayService.getEssayTypes();\n    });\n\n    this.sourceService.getApiSources('/references?page[size]=0&fields[reference]=title,sub_title&sort=title').subscribe(response => {\n      this.sources = response.sources;\n\n      this.sourcesFilteredOptions = this.sourcesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(source => this._filterSources(source))\n      );\n    });\n\n    this.eventService.getApiEvents('/events?page[size]=0&fields[event]=label', null, null, false).subscribe(response => {\n      this.events = response.events;\n\n      this.eventsFilteredOptions = this.eventsAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(event => this._filterEvents(event))\n      );\n    });\n\n    this.personService.getApiPersons('/persons?page[size]=0&fields[person]=first_name,middle_name,last_name', null, null, false)\n      .subscribe(response => {\n\n      this.persons = response.persons;\n\n      this.personsFilteredOptions = this.personsAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersons(person))\n      );\n    });\n\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['label'], null, null, null, false).subscribe(response => {\n      this.timelines = response.timelines;\n\n      this.timelinesFilteredOptions = this.timelinesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterTimelines(timeline))\n      );\n    });\n  }\n\n  ngOnInit() {\n    FroalaEditor.DefineIconTemplate('reference_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('referenceIcon', {NAME: 'bookmark', template: 'reference_icon'});\n\n    FroalaEditor.DefineIconTemplate('event_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('eventIcon', {NAME: 'event', template: 'event_icon'});\n\n    FroalaEditor.DefineIconTemplate('person_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('personIcon', {NAME: 'person', template: 'person_icon'});\n\n    FroalaEditor.DefineIconTemplate('timeline_icon', '<i class=\"material-icons\">[NAME]</i>');\n    FroalaEditor.DefineIcon('timelineIcon', {NAME: 'timeline', template: 'timeline_icon'});\n\n    FroalaEditor.RegisterCommand('reference', {\n      title: 'Add Reference',\n      focus: true,\n      undo: true,\n      refreshAfterCallback: true,\n      icon: 'referenceIcon',\n      callback: () => {\n        const selectedText = this.essayEditor.selection.text();\n        const referenceId = this.selectedEssayReference.id;\n        const insertValue = '((r ' + referenceId + ' ' + selectedText + '))';\n\n        this.essayEditor.html.insert(insertValue, false);\n      }\n    });\n\n    FroalaEditor.RegisterCommand('event', {\n      title: 'Add Event',\n      focus: true,\n      undo: true,\n      refreshAfterCallback: true,\n      icon: 'eventIcon',\n      callback: () => {\n        const selectedText = this.essayEditor.selection.text();\n        const eventId = this.selectedEssayEvent.id;\n        const insertValue = '((e ' + eventId + ' ' + selectedText + '))';\n\n        this.essayEditor.html.insert(insertValue, false);\n      }\n    });\n\n    FroalaEditor.RegisterCommand('person', {\n      title: 'Add Person',\n      focus: true,\n      undo: true,\n      refreshAfterCallback: true,\n      icon: 'personIcon',\n      callback: () => {\n        const selectedText = this.essayEditor.selection.text();\n        const personId = this.selectedEssayPerson.id;\n        const insertValue = '((p ' + personId + ' ' + selectedText + '))';\n\n        this.essayEditor.html.insert(insertValue, false);\n      }\n    });\n\n    FroalaEditor.RegisterCommand('timeline', {\n      title: 'Add Timeline',\n      focus: true,\n      undo: true,\n      refreshAfterCallback: true,\n      icon: 'timelineIcon',\n      callback: () => {\n        const selectedText = this.essayEditor.selection.text();\n        const timelineId = this.selectedEssayTimeline.id;\n        const insertValue = '((t ' + timelineId + ' ' + selectedText + '))';\n\n        this.essayEditor.html.insert(insertValue, false);\n      }\n    });\n  }\n\n  async ngAfterViewInit() {\n    this.addClickEvents().then();\n  }\n\n  public initializeEssayEditor(initControls) {\n    this.initControls = initControls;\n    this.initControls.initialize();\n    this.essayEditor = this.initControls.getEditor();\n\n    this.essayEditor.opts.toolbarButtons = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 4\n      },\n      moreMisc: {\n        buttons: [\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 2\n      }\n    };\n\n    this.essayEditor.opts.toolbarButtonsMD = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 4\n      },\n      moreMisc: {\n        buttons: [\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 2\n      }\n    };\n\n    this.essayEditor.opts.toolbarButtonsSM = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 4\n      },\n      moreMisc: {\n        buttons: [\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 2\n      }\n    };\n\n    this.essayEditor.opts.toolbarButtonsXS = {\n      moreText: {\n        buttons: [\n          'bold',\n          'italic',\n          'underline',\n          'strikeThrough',\n          'subscript',\n          'superscript',\n          'fontFamily',\n          'fontSize',\n          'textColor',\n          'backgroundColor',\n          'inlineClass',\n          'inlineStyle',\n          'clearFormatting'\n        ],\n        align: 'left',\n        buttonsVisible: 0\n      },\n      moreParagraph: {\n        buttons: [\n          'alignLeft',\n          'alignCenter',\n          'alignRight',\n          'alignJustify',\n          'formatOLSimple',\n          'formatOL',\n          'formatUL',\n          'paragraphFormat',\n          'paragraphStyle',\n          'lineHeight',\n          'outdent',\n          'indent',\n          'quote'\n        ],\n        buttonsVisible: 0\n      },\n      moreRich: {\n        buttons: [\n          'reference',\n          'event',\n          'person',\n          'timeline',\n          'insertLink',\n          'insertImage',\n          'insertVideo',\n          'insertTable',\n          'fontAwesome',\n          'specialCharacters',\n          'insertFile',\n          'insertHR'\n        ],\n        buttonsVisible: 4\n      },\n      moreMisc: {\n        buttons: [\n          'undo',\n          'redo',\n          'fullscreen',\n          'print',\n          'getPDF',\n          'spellChecker',\n          'selectAll',\n          'html',\n          'help'\n        ],\n        align: 'right',\n        buttonsVisible: 2\n      }\n    };\n  }\n\n  initializeNewEssayNote() {\n    this.sourceFieldDisplayValue = '';\n\n    this.essayNote = new EssayNote();\n    this.essayNote.initializeNewEssayNote();\n  }\n\n  initializeNewEssayReference() {\n    this.essayReference = new EssayReference();\n    this.essayReference.initializeNewEssayReference();\n  }\n\n  initializeNewEssayEvent() {\n    this.essayEvent = new EssayEvent();\n    this.essayEvent.initializeNewEssayEvent();\n  }\n\n  initializeNewEssayPerson() {\n    this.essayPerson = new EssayPerson();\n    this.essayPerson.initializeNewEssayPerson();\n  }\n\n  initializeNewEssayTimeline() {\n    this.essayTimeline = new EssayTimeline();\n    this.essayTimeline.initializeNewEssayTimeline();\n  }\n\n  addUser() {\n    const dialogRef = this.dialog.open(AddUserDialogComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(user => {\n      let userExists = false;\n\n      for (const currentUser of this.essayUsers) {\n        if (user.id === currentUser.id) {\n          userExists = true;\n          break;\n        }\n      }\n\n      if (userExists) {\n        this.dialog.open(MessageDialogComponent, {\n          width: '250px',\n          data: {\n            title: 'Could Not Add User',\n            message: 'User is already part of the essay.'\n          }\n        });\n      } else {\n        let essayUser: EssayUser = new EssayUser();\n        essayUser.initializeNewEssayUser();\n\n        essayUser.essay = this.essay;\n        essayUser.user = user;\n\n        this.essayService.addApiUserToEssay(essayUser).subscribe(() => {\n          this.essayUsers.push(user);\n        });\n      }\n    });\n  }\n\n  deselectAllEssayReferences() {\n    this.elementRef.nativeElement.querySelectorAll('.essay-reference-selected').forEach(item => {\n      this.renderer.removeClass(item, 'essay-reference-selected');\n    });\n  }\n\n  deselectAllEssayEvents() {\n    this.elementRef.nativeElement.querySelectorAll('.essay-event-selected').forEach(item => {\n      this.renderer.removeClass(item, 'essay-event-selected');\n    });\n  }\n\n  deselectAllEssayPersons() {\n    this.elementRef.nativeElement.querySelectorAll('.essay-person-selected').forEach(item => {\n      this.renderer.removeClass(item, 'essay-person-selected');\n    });\n  }\n\n  deselectAllEssayTimelines() {\n    this.elementRef.nativeElement.querySelectorAll('.essay-timeline-selected').forEach(item => {\n      this.renderer.removeClass(item, 'essay-timeline-selected');\n    });\n  }\n\n  selectEssayReference(reference) {\n    this.selectedEssayReference = reference;\n  }\n\n  selectEssayEvent(event) {\n    this.selectedEssayEvent = event;\n  }\n\n  selectEssayPerson(person) {\n    this.selectedEssayPerson = person;\n  }\n\n  selectEssayTimeline(timeline) {\n    this.selectedEssayTimeline = timeline;\n  }\n\n  handleReferenceClick(event) {\n    let referenceId = null;\n\n    if (event.toElement.localName === 'sup') {\n      referenceId = event.toElement.parentNode.dataset.referenceid;\n    } else {\n      referenceId = event.toElement.dataset.referenceid;\n    }\n\n    const thisReference = this.essay.essayReferences.find(reference => reference.id === referenceId);\n\n    this.bottomSheet.open(EssayReferenceDetailsComponent as any, {\n      data: {\n        ref: thisReference\n      }\n    });\n  }\n\n  handleEventClick(event) {\n    let eventId = null;\n\n    if (event.toElement.localName === 'sup') {\n      eventId = event.toElement.parentNode.dataset.eventid;\n    } else {\n      eventId = event.toElement.dataset.eventid;\n    }\n\n    const thisEvent = this.essay.essayEvents.find(foundEvent => foundEvent.id === eventId);\n\n    this.bottomSheet.open(EssayEventDetailsComponent as any, {\n      data: {\n        event: thisEvent.event\n      }\n    });\n  }\n\n  handlePersonClick(person) {\n    let personId = null;\n\n    if (person.toElement.localName === 'sup') {\n      personId = person.toElement.parentNode.dataset.personid;\n    } else {\n      personId = person.toElement.dataset.personid;\n    }\n\n    const thisPerson = this.essay.essayPeople.find(foundPerson => foundPerson.id === personId);\n\n    this.bottomSheet.open(EssayPersonDetailsComponent as any, {\n      data: {\n        person: thisPerson.person\n      }\n    });\n  }\n\n  handleTimelineClick(timeline): void {\n    let timelineId = null;\n\n    if (timeline.toElement.localName === 'sup') {\n      timelineId = timeline.toElement.parentNode.dataset.timelineid;\n    } else {\n      timelineId = timeline.toElement.dataset.timelineid;\n    }\n\n    const thisTimeline = this.essay.essayTimelines.find(foundTimeline => foundTimeline.id === timelineId);\n\n    this.bottomSheet.open(EssayTimelineDetailsComponent as any, {\n      data: {\n        timeline: thisTimeline.timeline\n      }\n    });\n  }\n\n  tokenizeReferences() {\n    let match;\n\n    while ((match = this.referenceRegex.exec(this.essayContent))) {\n      this.essayContent = this.essayContent.replace(\n        match[0],\n        '<span data-referenceid=\"' + match[1] + '\" class=\"essay-reference\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  tokenizeEvents() {\n    let match;\n\n    while (match = this.eventRegex.exec(this.essayContent)) {\n      this.essayContent = this.essayContent.replace(\n        match[0],\n        '<span data-eventid=\"' + match[1] + '\" class=\"essay-event\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  tokenizePeople() {\n    let match;\n\n    while (match = this.personRegex.exec(this.essayContent)) {\n      this.essayContent = this.essayContent.replace(\n        match[0],\n        '<span data-personid=\"' + match[1] + '\" class=\"essay-person\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  tokenizeTimelines() {\n    let match;\n\n    while (match = this.timelineRegex.exec(this.essayContent)) {\n      this.essayContent = this.essayContent.replace(\n        match[0],\n        '<span data-timelineid=\"' + match[1] + '\" class=\"essay-timeline\">' + match[2] + '</span>'\n      );\n    }\n  }\n\n  selectEssayType(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  setAbstractEditMode() {\n    this.isAbstractEditMode = true;\n  }\n\n  setAbstractViewMode() {\n    this.isAbstractEditMode = false;\n  }\n\n  setEssayEditMode() {\n    this.isEssayEditMode = true;\n  }\n\n  setEssayViewMode() {\n    this.isEssayEditMode = false;\n\n    this.addClickEvents().then();\n  }\n\n  setEssayTitleEditMode() {\n    this.isEssayTitleEditMode = true;\n  }\n  setEssayTitleViewMode() {\n    this.isEssayTitleEditMode = false;\n  }\n\n  editEssayTitle() {\n    this.essayService.patchApiEssay(this.essay).subscribe();\n\n    this.setEssayTitleViewMode();\n  }\n\n  saveAbstractContent() {\n    this.essayService.patchApiEssay(this.essay).subscribe();\n  }\n\n  saveEssayContent() {\n      this.essayService.patchApiEssay(this.essay).subscribe(() => {\n      this.setEssayContent();\n\n      this.tokenizeReferences();\n      this.tokenizeEvents();\n      this.tokenizePeople();\n      this.tokenizeTimelines();\n    });\n  }\n\n  addReference() {\n    this.essayReference.source = this.source;\n\n    this.essayService.createApiEssayReference(this.essay, this.essayReference).subscribe(response => {\n      this.essayReference.id = response.data.id;\n      this.essay.essayReferences.push(this.essayReference);\n\n      this.cancelAddEssayReferenceMode();\n    });\n  }\n\n  addEvent() {\n    this.essayEvent.event = this.event;\n\n    this.essayService.createApiEssayEvent(this.essay, this.essayEvent).subscribe(response => {\n      this.essayEvent.id = response.data.id;\n      this.essay.essayEvents.push(this.essayEvent);\n\n      this.cancelAddEssayEventMode();\n    });\n  }\n\n  addPerson() {\n    this.essayPerson.person = this.person;\n\n    this.essayService.createApiEssayPerson(this.essay, this.essayPerson).subscribe(response => {\n      this.essayPerson.id = response.data.id;\n      this.essay.essayPeople.push(this.essayPerson);\n\n      this.cancelAddEssayPersonMode();\n    });\n  }\n\n  addTimeline() {\n    this.essayTimeline.timeline = this.timeline;\n\n    this.essayService.createApiEssayTimeline(this.essay, this.essayTimeline).subscribe(response => {\n      this.essayTimeline.id = response.data.id;\n      this.essay.essayTimelines.push(this.essayTimeline);\n\n      this.cancelAddEssayTimelineMode();\n    });\n  }\n\n  addNote() {\n    this.essayNote.source = this.source;\n\n    this.essayService.createApiEssayNote(this.essay, this.essayNote).subscribe(response => {\n      this.essayNote.id = response.data.id;\n      this.essay.essayNotes.push(this.essayNote);\n\n      this.cancelAddEssayNoteMode();\n    });\n  }\n\n  deleteNote(note: EssayNote) {\n    this.essayService.removeApiNote(note).subscribe(() => {\n      EssayService.removeNote(this.essay, note);\n    });\n  }\n\n  setAddEssayNoteMode() {\n    this.isAddEssayNoteMode = true;\n    this.initializeNewEssayNote();\n  }\n\n  setAddEssayReferenceMode() {\n    this.isAddEssayReferenceMode = true;\n    this.initializeNewEssayReference();\n  }\n\n  setAddEssayEventMode() {\n    this.isAddEssayEventMode = true;\n    this.initializeNewEssayEvent();\n  }\n\n  setAddEssayPersonMode() {\n    this.isAddEssayPersonMode = true;\n    this.initializeNewEssayPerson();\n  }\n\n  setAddEssayTimelineMode() {\n    this.isAddEssayTimelineMode = true;\n    this.initializeNewEssayTimeline();\n  }\n\n  cancelAddEssayNoteMode() {\n    this.initializeNewEssayNote();\n    this.isAddEssayNoteMode = false;\n  }\n\n  cancelAddEssayReferenceMode() {\n    this.initializeNewEssayReference();\n    this.isAddEssayReferenceMode = false;\n  }\n\n  cancelAddEssayEventMode() {\n    this.initializeNewEssayEvent();\n    this.isAddEssayEventMode = false;\n  }\n\n  cancelAddEssayPersonMode() {\n    this.initializeNewEssayPerson();\n    this.isAddEssayPersonMode = false;\n  }\n\n  cancelAddEssayTimelineMode() {\n    this.initializeNewEssayTimeline();\n    this.isAddEssayTimelineMode = false;\n  }\n\n  async addClickEvents() {\n    await this.sleep(3000);\n\n    this.elementRef.nativeElement.querySelectorAll('.essay-reference').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handleReferenceClick(element);\n        }\n      );\n    });\n\n    this.elementRef.nativeElement.querySelectorAll('.essay-event').forEach(item => {\n        this.renderer.listen(\n          item,\n          'click',\n          (element) => {\n            this.handleEventClick(element);\n          }\n        );\n      });\n\n    this.elementRef.nativeElement.querySelectorAll('.essay-person').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handlePersonClick(element);\n        }\n      );\n    });\n\n    this.elementRef.nativeElement.querySelectorAll('.essay-timeline').forEach(item => {\n      this.renderer.listen(\n        item,\n        'click',\n        (element) => {\n          this.handleTimelineClick(element);\n        }\n      );\n    });\n  }\n\n  setEssayContent() {\n    this.essayContent = this.essay.essay;\n  }\n\n  toggleContentPanel(contentPanel) {\n    if (contentPanel.opened) {\n      this.essayScreenSize = 'fullscreen_exit';\n      contentPanel.close();\n    } else {\n      this.essayScreenSize = 'fullscreen';\n      contentPanel.open();\n    }\n  }\n\n  displaySource(source: Source) {\n    if (source) {\n      this.sourceFieldDisplayValue = source.title;\n\n      if (source.subTitle) {\n        this.sourceFieldDisplayValue = this.sourceFieldDisplayValue + ': ' + source.subTitle;\n      }\n    }\n\n    return this.sourceFieldDisplayValue;\n  }\n\n  displayEvent(event: Event) {\n    if (event) {\n      this.eventFieldDisplayValue = event.label;\n\n      return this.eventFieldDisplayValue;\n    }\n  }\n\n  displayPerson(person: Person) {\n    if (person) {\n      this.personFieldDisplayValue = person.firstName;\n\n      if (person.middleName) {\n        this.personFieldDisplayValue = this.personFieldDisplayValue + ' ' + person.middleName;\n      }\n\n      if (person.lastName) {\n        this.personFieldDisplayValue = this.personFieldDisplayValue + ' ' + person.lastName;\n      }\n\n      return this.personFieldDisplayValue;\n    }\n  }\n\n  displayTimeline(timeline: Timeline) {\n    if (timeline) {\n      this.timelineFieldDisplayValue = timeline.label;\n\n      return this.timelineFieldDisplayValue;\n    }\n  }\n\n  saveSource() {\n    this.source = this.sourcesAutocompleteControl.value;\n  }\n\n  saveEvent() {\n    this.event = this.eventsAutocompleteControl.value;\n  }\n\n  savePerson() {\n    this.person = this.personsAutocompleteControl.value;\n  }\n\n  saveTimeline() {\n    this.timeline = this.timelinesAutocompleteControl.value;\n  }\n\n  saveImage(e: File[]) {\n    if (e.length) {\n      this.isSavingBanner = true;\n\n      const file = e[0];\n      const imageForm = new FormData();\n      imageForm.append('image', file);\n\n      this.essayService.createApiEssayBanner(imageForm).subscribe((essayBannerResponse) => {\n        this.essay.banner = essayBannerResponse;\n\n        this.essayService.patchApiEssay(this.essay).subscribe(() => {\n          this.isSavingBanner = false;\n        });\n      });\n    }\n  }\n\n  private sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private _filterSources(filterValue: string): Source[] {\n    if (typeof filterValue === 'string' ) {\n      filterValue = filterValue.toLowerCase();\n\n      return this.sources.filter(source => {\n        return source.title.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n\n  private _filterEvents(filterValue: string): Event[] {\n    if (typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.events.filter(event => {\n        return event.label.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n\n  private _filterPersons(filterValue: string): Person[] {\n    if (typeof filterValue === 'string') {\n      let valueToFilterOn = filterValue;\n\n      valueToFilterOn = valueToFilterOn.toLowerCase();\n\n      return this.persons.filter(person => {\n        let personFullName = person.firstName;\n\n        if (person.middleName) {\n          personFullName = personFullName + ' ' + person.middleName;\n        }\n\n        if (person.lastName) {\n          personFullName = personFullName + ' ' + person.lastName;\n        }\n\n        return personFullName.toLowerCase().includes(valueToFilterOn);\n      });\n    }\n  }\n\n  private _filterTimelines(filterValue: any): Timeline[] {\n    if (typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.timelines.filter(timeline => {\n        return timeline.label.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "//@import '../../../styles/_variables.scss';\n@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n@import '../../../styles/_cards.scss';\n\np {\n  color: $color-darkest;\n}\n\n.essay-image {\n  width: 100%;\n  margin-bottom: 30px;\n}\n\n// styles for links in essay content\n.essay-reference {\n  color: $color-highlight;\n}\n\n.essay-event {\n  color: green;\n}\n\n.essay-person {\n  color: purple;\n}\n\n.essay-timeline {\n  color: red;\n}\n\n\n.app-essay-section {\n  margin-bottom: 1rem;\n\n  h2 .material-icons {\n    font-size: 0.9em;\n  }\n}\n\n.app-essay-edit-mode {\n  background-color: $color-gray-scale-100;\n  margin-left: -3rem;\n  margin-right: -3rem;\n  padding: 1rem 3rem 2rem 3rem;\n\n  .app-content-toolbar {\n    margin-bottom: 0;\n    h2 {\n      flex-grow: 1;\n    }\n  }\n}\n",
                    "styleUrl": "./essay.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService"
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "personService",
                        "type": "PersonService"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet"
                    }
                ],
                "line": 120,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<mat-sidenav-container>\n  <div class=\"app-body-content\">\n    <div class=\"app-card-content\">\n      <div>\n        <img class=\"essay-image\" src=\"{{essay.banner}}\" />\n\n        <div class=\"app-content-toolbar\" *ngIf=\"!isEssayTitleEditMode\">\n          <h1 *ngIf=\"essay.title\">{{essay.title}} <span *ngIf=\"essay.type && essay.type.label\">({{essay.type.label}})</span></h1>\n          <button mat-flat-button class=\"material-icons\" (click)=\"setEssayTitleEditMode()\">edit</button>\n          <button mat-flat-button class=\"material-icons\" (click)=\"toggleContentPanel(essayManager)\">{{essayScreenSize}}</button>\n        </div>\n\n        <!-- IF THE ESSAY TITLE IS IN EDIT MODE -->\n        <div *ngIf=\"isEssayTitleEditMode\">\n          <section class=\"app-section\">\n              <label>Banner</label>\n\n              <div>\n                <mat-spinner *ngIf=\"isSavingBanner\" mode=\"indeterminate\" diameter=\"20\"></mat-spinner>\n\n                <input type=\"file\" (change)=\"saveImage($event.target.files)\" />\n              </div>\n            </section>\n\n          <mat-form-field style=\"width: 100%\">\n            <input\n              matInput\n              placeholder=\"Title\"\n              required\n              name=\"essay_title\"\n              #essayTitle=\"ngModel\"\n              [(ngModel)]=\"essay.title\" />\n          </mat-form-field>\n\n          <mat-form-field class=\"app-field-era\">\n            <mat-label>Essay Type</mat-label>\n            <mat-select [(ngModel)]=\"essay.type\" name=\"essay_type\" [compareWith]=\"selectEssayType\">\n              <mat-option [value]=\"null\"></mat-option>\n              <mat-option *ngFor=\"let type of essayTypes\" [value]=\"type\">{{type.label}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <button mat-icon-button class=\"material-icons\" (click)=\"editEssayTitle()\">\n            save\n          </button>\n\n          <button mat-icon-button class=\"material-icons\" (click)=\"setEssayTitleViewMode()\">close</button>\n        </div>\n      </div>\n\n      <div *ngFor=\"let user of essayUsers\">\n        <span>{{user.firstName}}</span> <span> {{user.lastName}}</span>\n      </div>\n\n      <button mat-flat-button class=\"material-icons\" color=\"secondary\" (click)=\"addUser()\">+</button>\n\n      <!-- ABSTRACT VIEW-->\n      <div class=\"app-essay-section\" *ngIf=\"!isAbstractEditMode\">\n          <h2>Abstract\n              <button mat-flat-button class=\"material-icons\" *ngIf=\"!isAbstractEditMode\" (click)=\"setAbstractEditMode()\">edit</button>\n          </h2>\n        <div class=\"text-intro\"><span *ngIf=\"essay.abstract\" [innerHtml]=\"essay.abstract | safeHtml\"></span></div>\n\n      </div>\n\n      <!-- ABSTRACT EDIT-->\n      <div *ngIf=\"isAbstractEditMode\" class=\"app-essay-edit-mode\">\n        <div class=\"app-content-toolbar\">\n          <h2>Abstract</h2>\n          <button mat-flat-button class=\"material-icons\" *ngIf=\"isAbstractEditMode\" (click)=\"saveAbstractContent()\">save</button>\n          <button mat-flat-button class=\"material-icons\" *ngIf=\"isAbstractEditMode\" (click)=\"setAbstractViewMode()\">close</button>\n        </div>\n\n        <div [(froalaModel)]=\"essay.abstract\"\n             [froalaEditor]></div>\n      </div>\n\n\n      <!-- ESSAY CONTENT VIEW-->\n      <div class=\"app-essay-section essay-content\" *ngIf=\"!isEssayEditMode\" >\n          <h2>Content\n              <button mat-flat-button class=\"material-icons\" *ngIf=\"!isEssayEditMode\" (click)=\"setEssayEditMode()\">edit</button>\n          </h2>\n        <div *ngIf=\"essayContent\" [innerHtml]=\"essayContent | safeHtml\"></div>\n      </div>\n\n\n      <!-- ESSAY CONTENT EDIT-->\n      <div *ngIf=\"isEssayEditMode\" class=\"app-essay-edit-mode\">\n        <div class=\"app-content-toolbar\">\n          <h2>Content</h2>\n          <button mat-flat-button class=\"material-icons\" *ngIf=\"isEssayEditMode\" (click)=\"saveEssayContent()\">save</button>\n          <button mat-flat-button class=\"material-icons\" *ngIf=\"isEssayEditMode\" (click)=\"setEssayViewMode()\">close</button>\n        </div>\n\n        <div id=\"essay-editor\"\n             (froalaInit)=\"initializeEssayEditor($event)\"\n             [(froalaModel)]=\"essay.essay\"\n             [froalaEditor]></div>\n      </div>\n    </div>\n  </div>\n\n\n  <!-- ESSAY RESEARCH -->\n  <mat-sidenav #essayManager mode=\"side\" position=\"end\" class=\"app-drawer\">\n    <mat-accordion>\n      <mat-expansion-panel>\n        <!-- Add a new note CTA-->\n        <div class=\"app-section-cta\">\n            <button mat-flat-button color=\"secondary\" (click)=\"setAddEssayNoteMode()\">+ Add a Note</button>\n        </div>\n\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            Notes\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <!-- Add a new note FORM-->\n        <div class=\"app-card-note\" *ngIf=\"isAddEssayNoteMode\">\n          <form (ngSubmit)=\"addNote()\" #noteForm=\"ngForm\" class=\"app-card-note-edit\">\n\n            <div class=app-card-note-body-meta>\n              <h3>New Note</h3>\n              <div class=\"app-card-note-toolbar\">\n                  <button mat-flat-button color=\"primary\">Save</button>\n                  <button mat-flat-button color=\"secondary\" (click)=\"cancelAddEssayNoteMode()\">Cancel</button>\n              </div>\n            </div>\n\n            <div class=\"app-card-note-body-content\">\n              <div id=\"essay_note\" [(froalaModel)]=\"essayNote.note\"\n                [froalaEditor]></div>\n              </div>\n\n              <section class=\"app-section horizontal\">\n                <section class=\"app-subsection\">\n                  <mat-form-field class=\"app-field-reference\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Select Source\"\n                      aria-label=\"Source\"\n                      matInput\n                      [formControl]=\"sourcesAutocompleteControl\"\n                      [matAutocomplete]=\"auto\">\n\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displaySource\" (optionSelected)=\"saveSource()\">\n                      <mat-option *ngFor=\"let source of sourcesFilteredOptions | async\" [value]=\"source\">\n                        {{source.title}} <span *ngIf=\"source.subTitle\">: {{source.subTitle}}</span>\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n                </section>\n\n                <section class=\"app-subsection\">\n                  <mat-form-field>\n                      <input\n                        matInput\n                        type=\"text\"\n                        placeholder=\"Chapter\"\n                        name=\"reference_chapter\"\n                        [(ngModel)]=\"essayNote.chapter\" />\n                    </mat-form-field>\n                </section>\n\n                <section class=\"app-subsection\">\n                  <mat-form-field class=\"app-field-page\">\n                      <input\n                        matInput\n                        type=\"number\"\n                        placeholder=\"Page\"\n                        name=\"reference_page\"\n                        [(ngModel)]=\"essayNote.page\" />\n                    </mat-form-field>\n                </section>\n\n              </section>\n\n          </form>\n        </div>\n\n        <app-essay-note\n          *ngFor=\"let note of essay.essayNotes\"\n          [note]=\"note\" [essay]=\"essay\"\n          [showToolbar]=\"true\"\n          (removeNote)=\"deleteNote($event)\">\n        </app-essay-note>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel>\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            References\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <!-- Add a new reference CTA-->\n        <div class=\"app-section-cta\">\n          <button mat-flat-button color=\"secondary\" (click)=\"setAddEssayReferenceMode()\">+ Add a Reference</button>\n        </div>\n\n        <!-- Add a new reference FORM-->\n        <div class=\"app-card-note\" *ngIf=\"isAddEssayReferenceMode\">\n          <form (ngSubmit)=\"addReference()\" #referenceForm=\"ngForm\">\n            <div class=app-card-note-body-meta>\n              <h3>New Reference</h3>\n              <div class=\"app-card-note-toolbar\">\n                <button type=\"submit\" mat-flat-button color=\"primary\">Save</button>\n                <button type=\"button\" mat-flat-button color=\"secondary\" (click)=\"cancelAddEssayReferenceMode()\">Cancel</button>\n              </div>\n            </div>\n\n            <div class=\"app-card-note-body-content\">\n              <section class=\"app-section\">\n                <section class=\"app-subsection\">\n                  <mat-form-field style=\"width: 100%\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Select Source\"\n                      aria-label=\"Source\"\n                      matInput\n                      [formControl]=\"sourcesAutocompleteControl\"\n                      [matAutocomplete]=\"autoReference\">\n\n                    <mat-autocomplete #autoReference=\"matAutocomplete\" [displayWith]=\"displaySource\" (optionSelected)=\"saveSource()\">\n                      <mat-option *ngFor=\"let source of sourcesFilteredOptions | async\" [value]=\"source\">\n                        {{source.title}} <span *ngIf=\"source.subTitle\">: {{source.subTitle}}</span>\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n                </section>\n\n                <section class=\"app-subsection\">\n                  <mat-form-field style=\"width: 100%\">\n                    <input\n                      matInput\n                      type=\"text\"\n                      placeholder=\"Chapter\"\n                      name=\"reference_chapter\"\n                      [(ngModel)]=\"essayReference.sourceChapter\" />\n                  </mat-form-field>\n                </section>\n\n                <section class=\"app-subsection\">\n                  <mat-form-field class=\"app-field-page\">\n                    <input\n                      matInput\n                      type=\"number\"\n                      placeholder=\"Page\"\n                      name=\"reference_page\"\n                      [(ngModel)]=\"essayReference.sourcePage\" />\n                  </mat-form-field>\n                </section>\n              </section>\n            </div>\n          </form>\n        </div>\n\n        <div>\n          <app-essay-reference\n            *ngFor=\"let essayReference of essay.essayReferences\"\n            [essayReference]=\"essayReference\"\n            (referenceSelected)=\"selectEssayReference(essayReference)\"\n            (delselectAllEssayReferences)=\"deselectAllEssayReferences()\">\n          </app-essay-reference>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel>\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            Events\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <div class=\"app-section-cta\">\n          <button mat-flat-button color=\"secondary\" (click)=\"setAddEssayEventMode()\">+ Add an Event</button>\n        </div>\n\n        <div class=\"app-card-note\" *ngIf=\"isAddEssayEventMode\">\n          <form (ngSubmit)=\"addEvent()\" #eventForm=\"ngForm\">\n            <div class=app-card-note-body-meta>\n              <h3>New Event</h3>\n              <div class=\"app-card-note-toolbar\">\n                <button type=\"submit\" mat-flat-button color=\"primary\">Save</button>\n                <button type=\"button\" mat-flat-button color=\"secondary\" (click)=\"cancelAddEssayEventMode()\">Cancel</button>\n              </div>\n            </div>\n\n            <div class=\"app-card-note-body-content\">\n              <section class=\"app-section\">\n                <section class=\"app-subsection\">\n                  <mat-form-field style=\"width: 100%\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Select Event\"\n                      aria-label=\"Event\"\n                      matInput\n                      [formControl]=\"eventsAutocompleteControl\"\n                      [matAutocomplete]=\"autoEvent\">\n\n                    <mat-autocomplete #autoEvent=\"matAutocomplete\" [displayWith]=\"displayEvent\" (optionSelected)=\"saveEvent()\">\n                      <mat-option *ngFor=\"let event of eventsFilteredOptions | async\" [value]=\"event\">\n                        {{event.label}}\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n                </section>\n              </section>\n            </div>\n          </form>\n        </div>\n\n        <div>\n          <app-essay-event\n            *ngFor=\"let essayEvent of essay.essayEvents\"\n            [essayEvent]=\"essayEvent\"\n            (eventSelected)=\"selectEssayEvent(essayEvent)\"\n            (delselectAllEssayEvents)=\"deselectAllEssayEvents()\">\n          </app-essay-event>\n        </div>\n      </mat-expansion-panel>\n\n      <!-- PEOPLE PANEL -->\n      <mat-expansion-panel>\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            People\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <div class=\"app-section-cta\">\n          <button mat-flat-button color=\"secondary\" (click)=\"setAddEssayPersonMode()\">+ Add a Person</button>\n        </div>\n\n        <div class=\"app-card-note\" *ngIf=\"isAddEssayPersonMode\">\n          <form (ngSubmit)=\"addPerson()\" #personForm=\"ngForm\">\n            <div class=app-card-note-body-meta>\n              <h3>New Person</h3>\n              <div class=\"app-card-note-toolbar\">\n                <button type=\"submit\" mat-flat-button color=\"primary\">Save</button>\n                <button type=\"button\" mat-flat-button color=\"secondary\" (click)=\"cancelAddEssayPersonMode()\">Cancel</button>\n              </div>\n            </div>\n\n            <div class=\"app-card-note-body-content\">\n              <section class=\"app-section\">\n                <section class=\"app-subsection\">\n                  <mat-form-field style=\"width: 100%\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Select Person\"\n                      aria-label=\"Person\"\n                      matInput\n                      [formControl]=\"personsAutocompleteControl\"\n                      [matAutocomplete]=\"autoPerson\">\n\n                    <mat-autocomplete #autoPerson=\"matAutocomplete\" [displayWith]=\"displayPerson\" (optionSelected)=\"savePerson()\">\n                      <mat-option *ngFor=\"let person of personsFilteredOptions | async\" [value]=\"person\">\n                        {{person.firstName}}\n                        <span *ngIf=\"person.middleName\"> {{person.middleName}}</span>\n                        <span *ngIf=\"person.lastName\"> {{person.lastName}}</span>\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n                </section>\n              </section>\n            </div>\n          </form>\n        </div>\n\n        <div>\n          <app-essay-person\n            *ngFor=\"let essayPerson of essay.essayPeople\"\n            [essayPerson]=\"essayPerson\"\n            (personSelected)=\"selectEssayPerson(essayPerson)\"\n            (delselectAllEssayPersons)=\"deselectAllEssayPersons()\">\n          </app-essay-person>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel>\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            Timelines\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <div class=\"app-section-cta\">\n          <button mat-flat-button color=\"secondary\" (click)=\"setAddEssayTimelineMode()\">+ Add a Timeline</button>\n        </div>\n\n        <div class=\"app-card-note\" *ngIf=\"isAddEssayTimelineMode\">\n          <form (ngSubmit)=\"addTimeline()\" #timelineForm=\"ngForm\">\n            <div class=app-card-note-body-meta>\n              <h3>New Timeline</h3>\n              <div class=\"app-card-note-toolbar\">\n                <button type=\"submit\" mat-flat-button color=\"primary\">Save</button>\n                <button type=\"button\" mat-flat-button color=\"secondary\" (click)=\"cancelAddEssayTimelineMode()\">Cancel</button>\n              </div>\n            </div>\n\n            <div class=\"app-card-note-body-content\">\n              <section class=\"app-section\">\n                <section class=\"app-subsection\">\n                  <mat-form-field style=\"width: 100%\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Select Timeline\"\n                      aria-label=\"Timeline\"\n                      matInput\n                      [formControl]=\"timelinesAutocompleteControl\"\n                      [matAutocomplete]=\"autoTimeline\">\n\n                    <mat-autocomplete #autoTimeline=\"matAutocomplete\" [displayWith]=\"displayTimeline\" (optionSelected)=\"saveTimeline()\">\n                      <mat-option *ngFor=\"let timeline of timelinesFilteredOptions | async\" [value]=\"timeline\">\n                        {{timeline.label}}\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n                </section>\n              </section>\n            </div>\n          </form>\n        </div>\n\n        <div>\n          <app-essay-timeline\n            *ngFor=\"let essayTimeline of essay.essayTimelines\"\n            [essayTimeline]=\"essayTimeline\"\n            (timelineSelected)=\"selectEssayTimeline(essayTimeline)\"\n            (delselectAllEssayTimelines)=\"deselectAllEssayTimelines()\">\n          </app-essay-timeline>\n        </div>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </mat-sidenav>\n</mat-sidenav-container>\n"
        },
        {
            "name": "EssayEventComponent",
            "id": "component-EssayEventComponent-2f1d43d291b649bcccda369e281f95a3",
            "file": "src/app/essays/essay-event/essay-event.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-event",
            "styleUrls": [
                "./essay-event.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-event.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "essayEvent",
                    "line": 10,
                    "type": "EssayEvent"
                }
            ],
            "outputsClass": [
                {
                    "name": "delselectAllEssayEvents",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "eventSelected",
                    "line": 12,
                    "type": "EventEmitter<EssayEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "eventIsSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedEvent",
                    "type": "EssayEvent",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applySelectState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onSelectEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sleep",
                    "args": [
                        {
                            "name": "ms",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2} from '@angular/core';\nimport {EssayEvent} from '../../models/essays/essay-event';\n\n@Component({\n  selector: 'app-essay-event',\n  templateUrl: './essay-event.component.html',\n  styleUrls: ['./essay-event.component.scss']\n})\nexport class EssayEventComponent implements OnInit {\n  @Input() public essayEvent: EssayEvent;\n\n  @Output() private eventSelected: EventEmitter<EssayEvent>;\n  @Output() private delselectAllEssayEvents: EventEmitter<any>;\n\n  public selectedEvent: EssayEvent;\n  public eventIsSelected: boolean;\n\n  constructor(private elementRef: ElementRef,\n              private renderer: Renderer2) {\n    this.eventSelected = new EventEmitter<EssayEvent>();\n    this.delselectAllEssayEvents = new EventEmitter<any>();\n    this.eventIsSelected = false;\n  }\n\n  ngOnInit() {\n  }\n\n  applySelectState() {\n    const el = this.elementRef.nativeElement.querySelector('#event-container');\n\n    this.renderer.addClass(el, 'essay-event-selected');\n  }\n\n  async onSelectEvent() {\n    this.eventIsSelected = !this.eventIsSelected;\n    this.delselectAllEssayEvents.emit();\n\n    await this.sleep(200);\n\n    this.applySelectState();\n    this.eventSelected.emit(this.selectedEvent);\n  }\n\n  private sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.list-item {\n  margin: 5px;\n}\n\n.essay-event-selected {\n  background-color: $color-gray-scale-50;\n  .app-section {\n    color: $color-darkest;\n  }\n}\n",
                    "styleUrl": "./essay-event.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"event-container\" (click)=\"onSelectEvent().then()\">\n  <div class=\"app-section list-item\">\n    <div class=\"app-label\">\n        <span>\n          {{essayEvent.event.label}}\n        </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssayEventDetailsComponent",
            "id": "component-EssayEventDetailsComponent-7f88b9a9cd28bcdbcef09500eaf4d1c7",
            "file": "src/app/essays/essay-event-details/essay-event-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-event-details",
            "styleUrls": [
                "./essay-event-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-event-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatBottomSheetRef<EssayEventDetailsComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {Event} from '../../models/events/event';\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  event: Event;\n}\n\n@Component({\n  selector: 'app-essay-event-details',\n  templateUrl: './essay-event-details.component.html',\n  styleUrls: ['./essay-event-details.component.scss']\n})\nexport class EssayEventDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<EssayEventDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./essay-event-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<EssayEventDetailsComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<EssayEventDetailsComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-bottom\">\n  <div class=\"app-drawer-bottom-body\">\n    <div class=\"app-drawer-bottom-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Event</div>\n        <div class=\"app-drawer-heading\">{{data.event.label}}</div>\n        <div class=\"app-drawer-year\">\n          <span>{{data.event.formattedStartYear}}</span>\n          <span *ngIf=\"!data.event.isSinglePointEvent\">- {{data.event.formattedEndYear}} ({{data.event.eventLength}} years)</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <app-editor class=\"app-drawer-description\" [content]=\"data.event.description\"></app-editor>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssayNoteComponent",
            "id": "component-EssayNoteComponent-a7993c29e8cbd5ccbbbde0a0645d6444",
            "file": "src/app/essays/essay-note/essay-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-note",
            "styleUrls": [
                "./essay-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "essay",
                    "line": 18,
                    "type": "Essay"
                },
                {
                    "name": "note",
                    "line": 17,
                    "type": "EssayNote"
                },
                {
                    "name": "showToolbar",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeNote",
                    "line": 21,
                    "type": "EventEmitter<EssayNote>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateEditNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "doDeleteNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "saveNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "setNoteViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {EssayService} from '../../services/essay.service';\n\nimport {EssayNote} from '../../models/essays/essay-note';\nimport {Essay} from '../../models/essays/essay';\n\nimport {ConfirmRemovalComponent} from '../../utilities/confirm-removal/confirm-removal.component';\n\n@Component({\n  selector: 'app-essay-note',\n  templateUrl: './essay-note.component.html',\n  styleUrls: ['./essay-note.component.scss']\n})\nexport class EssayNoteComponent implements OnInit {\n  @Input() public note: EssayNote;\n  @Input() public essay: Essay;\n  @Input() public showToolbar: boolean;\n\n  @Output() private removeNote: EventEmitter<EssayNote>;\n\n  public isEditNoteMode: boolean;\n\n  constructor(public dialog: MatDialog, private essayService: EssayService) {\n    this.isEditNoteMode = false;\n\n    this.removeNote = new EventEmitter<EssayNote>();\n  }\n\n  ngOnInit() { }\n\n  activateEditNoteMode() {\n    this.isEditNoteMode = true;\n  }\n\n  setNoteViewMode() {\n    this.isEditNoteMode = false;\n  }\n\n  saveNote() {\n    this.essayService.patchApiEssayNote(this.essay, this.note).subscribe(() => {\n      this.setNoteViewMode();\n    });\n  }\n\n  doDeleteNote() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the note '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.removeNote.emit(this.note);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_sections.scss';\n@import '../../../styles/_cards.scss';\n\np {\n  color: $color-darkest;\n}\n\n.app-essay-section {\n  h2 .material-icons {\n    font-size: 0.9em;\n  }\n}\n\n.app-essay-edit-mode {\n  background-color: $color-gray-scale-50;\n  margin-left: -3rem;\n  margin-right: -3rem;\n  padding: 1rem 3rem 2rem 3rem;\n\n  .app-content-toolbar {\n    margin-bottom: 0;\n    h2 {\n      flex-grow: 1;\n    }\n  }\n}\n",
                    "styleUrl": "./essay-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"app-card-note\">\n    <!--VIEW MODE -->\n    <div class=\"app-card-note-view\" *ngIf=\"!isEditNoteMode\">\n        <div class=\"app-card-note-toolbar\" *ngIf=\"showToolbar\">\n          <button mat-flat-button class=\"material-icons\" (click)=\"activateEditNoteMode()\">edit</button>\n        </div>\n\n        <div class=\"app-card-note-body-content\">\n          <span *ngIf=\"note.note\" [innerHtml]=\"note.note | safeHtml\"></span>\n        </div>\n\n        <section *ngIf=\"note.source\" class=\"app-section\">\n          <label>Reference</label>\n          <section class=\"app-subsection\">\n              <i>{{note.source.title}}</i>,\n              <span *ngIf=\"note.chapter\">chapter {{note.chapter}}</span>,\n              <span *ngIf=\"note.page\">pg {{note.page}}</span>.\n          </section>\n        </section>\n    </div>\n\n    <!--EDIT MODE -->\n    <div class=\"app-card-note-edit\" *ngIf=\"isEditNoteMode\" >\n      <div class=app-card-note-body-meta>\n        <h3>Edit Note</h3>\n        <div class=\"app-card-note-toolbar\">\n          <button mat-flat-button class=\"material-icons\" (click)=\"doDeleteNote()\">delete</button>\n          <button mat-flat-button class=\"material-icons\" (click)=\"saveNote()\">save</button>\n          <button mat-flat-button class=\"material-icons\" (click)=\"setNoteViewMode()\">close</button>\n        </div>\n      </div>\n\n      <div class=\"app-card-note-body-content\">\n        <div [(froalaModel)]=\"note.note\"\n             [froalaEditor]>\n        </div>\n        <section class=\"app-section horizontal\">\n          <section class=\"app-subsection\">\n            <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Chapter\"\n                  name=\"reference_chapter\"\n                  #eventLabel=\"ngModel\"\n                  [(ngModel)]=\"note.chapter\">\n              </mat-form-field>\n          </section>\n          <section class=\"app-subsection\">\n            <mat-form-field class=\"app-field-page\">\n                <input\n                  matInput\n                  type=\"number\"\n                  placeholder=\"Page\"\n                  name=\"reference_page\"\n                  #eventLabel=\"ngModel\"\n                  [(ngModel)]=\"note.page\">\n              </mat-form-field>\n          </section>\n        </section>\n      </div>\n\n    </div>\n</div>\n\n\n\n"
        },
        {
            "name": "EssayPersonComponent",
            "id": "component-EssayPersonComponent-12e83d951aa995148a6563b0dff39cef",
            "file": "src/app/essays/essay-person/essay-person.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-person",
            "styleUrls": [
                "./essay-person.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-person.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "essayPerson",
                    "line": 10,
                    "type": "EssayPerson"
                }
            ],
            "outputsClass": [
                {
                    "name": "delselectAllEssayPersons",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "personSelected",
                    "line": 12,
                    "type": "EventEmitter<EssayPerson>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "personIsSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedPerson",
                    "type": "EssayPerson",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applySelectState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onSelectPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sleep",
                    "args": [
                        {
                            "name": "ms",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2} from '@angular/core';\nimport {EssayPerson} from '../../models/essays/essay-person';\n\n@Component({\n  selector: 'app-essay-person',\n  templateUrl: './essay-person.component.html',\n  styleUrls: ['./essay-person.component.scss']\n})\nexport class EssayPersonComponent implements OnInit {\n  @Input() public essayPerson: EssayPerson;\n\n  @Output() private personSelected: EventEmitter<EssayPerson>;\n  @Output() private delselectAllEssayPersons: EventEmitter<any>;\n\n  public selectedPerson: EssayPerson;\n  public personIsSelected: boolean;\n\n  constructor(private elementRef: ElementRef,\n              private renderer: Renderer2) {\n\n    this.personSelected = new EventEmitter<EssayPerson>();\n    this.delselectAllEssayPersons = new EventEmitter<any>();\n    this.personIsSelected = false;\n  }\n\n  ngOnInit() {\n  }\n\n  applySelectState() {\n    const el = this.elementRef.nativeElement.querySelector('#person-container');\n\n    this.renderer.addClass(el, 'essay-person-selected');\n  }\n\n  async onSelectPerson() {\n    this.personIsSelected = !this.personIsSelected;\n    this.delselectAllEssayPersons.emit();\n\n    await this.sleep(200);\n\n    this.applySelectState();\n    this.personSelected.emit(this.selectedPerson);\n  }\n\n  private sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.list-item {\n  margin: 5px;\n}\n\n.essay-person-selected {\n  background-color: $color-gray-scale-50;\n  .app-section {\n    color: $color-darkest;\n  }\n}\n",
                    "styleUrl": "./essay-person.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"person-container\" (click)=\"onSelectPerson().then()\">\n  <div class=\"app-section list-item\">\n    <div class=\"app-label\">\n        <span>\n          {{essayPerson.person.firstName}}\n          <span *ngIf=\"essayPerson.person.middleName\"> {{essayPerson.person.middleName}}</span>\n          <span *ngIf=\"essayPerson.person.lastName\"> {{essayPerson.person.lastName}}</span>\n        </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssayPersonDetailsComponent",
            "id": "component-EssayPersonDetailsComponent-1a11aeb4e9bd9be199f54ecb54eaa40b",
            "file": "src/app/essays/essay-person-details/essay-person-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-person-details",
            "styleUrls": [
                "./essay-person-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-person-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatBottomSheetRef<EssayPersonDetailsComponent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {Person} from '../../models/persons/person';\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  person: Person;\n}\n\n\n@Component({\n  selector: 'app-essay-person-details',\n  templateUrl: './essay-person-details.component.html',\n  styleUrls: ['./essay-person-details.component.scss']\n})\nexport class EssayPersonDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<EssayPersonDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n    this.data.person.formatYears();\n    this.data.person.formatBirthAndDeath();\n    this.data.person.setAge();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./essay-person-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<EssayPersonDetailsComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<EssayPersonDetailsComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-bottom\">\n  <div class=\"app-drawer-bottom-body\">\n    <div class=\"app-drawer-bottom-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Person</div>\n        <div class=\"app-drawer-heading\">{{data.person.firstName}}\n          <span *ngIf=\"data.person.middleName\">{{data.person.middleName}} </span>\n          <span *ngIf=\"data.person.lastName\">{{data.person.lastName}}</span>\n        </div>\n        <div class=\"app-drawer-year\">\n          <span>{{data.person.formattedBirth}}</span>\n          <span> - {{data.person.formattedDeath}} ({{data.person.age}} years)</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <app-editor class=\"app-drawer-description\" [content]=\"data.person.description\"></app-editor>\n      <!--<div *ngIf=\"data.person.description\" class=\"app-drawer-description\">-->\n        <!--{{data.person.description}}-->\n      <!--</div>-->\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssayReferenceComponent",
            "id": "component-EssayReferenceComponent-af0868035bffe77ebb73da8eec6a55ce",
            "file": "src/app/essays/essay-reference/essay-reference.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-reference",
            "styleUrls": [
                "./essay-reference.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-reference.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "essayReference",
                    "line": 10,
                    "type": "EssayReference"
                }
            ],
            "outputsClass": [
                {
                    "name": "delselectAllEssayReferences",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "referenceSelected",
                    "line": 12,
                    "type": "EventEmitter<EssayReference>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "referenceIsSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedReference",
                    "type": "EssayReference",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applySelectState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onSelectReference",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sleep",
                    "args": [
                        {
                            "name": "ms",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input, EventEmitter, Output, Renderer2, ElementRef} from '@angular/core';\nimport {EssayReference} from '../../models/essays/essay-reference';\n\n@Component({\n  selector: 'app-essay-reference',\n  templateUrl: './essay-reference.component.html',\n  styleUrls: ['./essay-reference.component.scss']\n})\nexport class EssayReferenceComponent implements OnInit {\n  @Input() essayReference: EssayReference;\n\n  @Output() private referenceSelected: EventEmitter<EssayReference>;\n  @Output() private delselectAllEssayReferences: EventEmitter<any>;\n\n  public selectedReference: EssayReference;\n  public referenceIsSelected: boolean;\n\n  constructor(private elementRef: ElementRef,\n              private renderer: Renderer2) {\n\n    this.referenceSelected = new EventEmitter<EssayReference>();\n    this.delselectAllEssayReferences = new EventEmitter<any>();\n    this.referenceIsSelected = false;\n  }\n\n  ngOnInit() {\n  }\n\n  applySelectState() {\n    const el = this.elementRef.nativeElement.querySelector('#reference-container');\n\n    this.renderer.addClass(el, 'essay-reference-selected');\n  }\n\n  async onSelectReference() {\n    this.referenceIsSelected = !this.referenceIsSelected;\n    this.delselectAllEssayReferences.emit();\n\n    await this.sleep(200);\n\n    this.applySelectState();\n    this.referenceSelected.emit(this.selectedReference);\n  }\n\n  private sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.list-item {\n  margin: 5px;\n}\n\n.essay-reference-selected {\n  background-color: $color-gray-scale-50;\n  .app-section {\n    color: $color-darkest;\n  }\n}\n",
                    "styleUrl": "./essay-reference.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"reference-container\" (click)=\"onSelectReference().then()\">\n  <div class=\"app-section list-item\">\n    <div class=\"app-label\">\n        <span>\n          <i>{{essayReference.source.title}}</i>\n        </span>\n\n        <span *ngIf=\"essayReference.source.subTitle\">\n          <i>: {{essayReference.source.subTitle}}</i>\n        </span>\n\n        <span *ngIf=\"essayReference.source.publishedYear\">\n          ({{essayReference.source.publishedYear}}),\n        </span>\n\n        <span *ngIf=\"essayReference.sourceChapter\">\n          chapter {{essayReference.sourceChapter}},\n        </span>\n\n        <span *ngIf=\"essayReference.sourcePage\">\n          pg {{essayReference.sourcePage}}\n        </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssayReferenceDetailsComponent",
            "id": "component-EssayReferenceDetailsComponent-fbec4e557330db7a4a4f2ddfafac16e9",
            "file": "src/app/essays/essay-reference-details/essay-reference-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-reference-details",
            "styleUrls": [
                "./essay-reference-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-reference-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatBottomSheetRef<EssayReferenceDetailsComponent>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport {EssayReference} from '../../models/essays/essay-reference';\nimport {Source} from '../../models/source';\n\nexport interface DialogData {\n  ref: EssayReference;\n  source: Source;\n  chapter: string;\n  page: string;\n}\n\n@Component({\n  selector: 'app-essay-reference-details',\n  templateUrl: './essay-reference-details.component.html',\n  styleUrls: ['./essay-reference-details.component.scss']\n})\n\nexport class EssayReferenceDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<EssayReferenceDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA)\n              public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./essay-reference-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<EssayReferenceDetailsComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<EssayReferenceDetailsComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-bottom\">\n  <div class=\"app-drawer-bottom-body\">\n    <div class=\"app-drawer-bottom-header\">\n      <!-- For an essay specific reference -->\n      <div class=\"app-drawer-title\" *ngIf=\"data.ref\">\n        <div class=\"app-drawer-subheading\">Reference</div>\n        <div class=\"app-drawer-heading\">{{data.ref.source.title}}</div>\n        <div *ngIf=\"data.ref.source.subTitle\" class=\"app-drawer-year\">{{data.ref.source.subTitle}}</div>\n\n        <div>\n          <p>\n            <span *ngIf=\"data.ref.sourceChapter\">\n              <a *ngIf=\"data.ref.sourceChapter.startsWith('http'); else justLink\" target=\"_blank\" href=\"{{data.ref.sourceChapter}}\">\n                {{data.ref.sourceChapter}}\n              </a>\n\n              <ng-template #justLink>\n                {{data.ref.sourceChapter}}\n              </ng-template>\n            </span>\n\n            <span *ngIf=\"data.ref.sourcePage\">, page {{data.ref.sourcePage}}</span>\n          </p>\n        </div>\n      </div>\n\n      <!-- For a general source -->\n      <div class=\"app-drawer-title\" *ngIf=\"data.source\">\n        <div class=\"app-drawer-subheading\">Reference</div>\n        <div class=\"app-drawer-heading\">{{data.source.title}}</div>\n        <div *ngIf=\"data.source.subTitle\" class=\"app-drawer-year\">{{data.source.subTitle}}</div>\n\n        <div>\n          <p>\n            <span *ngIf=\"data.chapter\">\n              <a *ngIf=\"data.chapter.startsWith('http'); else justLink\" target=\"_blank\" href=\"{{data.chapter}}\">\n                {{data.chapter}}\n              </a>\n\n              <ng-template #justLink>\n                {{data.chapter}}\n              </ng-template>\n            </span>\n            <span *ngIf=\"data.page\">, pages {{data.page}}</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssaysComponent",
            "id": "component-EssaysComponent-71079bc85203aada2c080599495d49fe",
            "file": "src/app/essays/essays.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essays",
            "styleUrls": [
                "./essays.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essays.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allEssays",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essay",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essays",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isCreateEssayMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isCreateTimelineMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loggedInUser",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAllToggleChecked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAllToggleColor",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userEssays",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createEssay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "getAllEssays",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserEssays",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeNewEssay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "toggleEssays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "essay",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\nimport {Essay} from '../models/essays/essay';\n\nimport {EssayService} from '../services/essay.service';\nimport {QuickEssayComponent} from './quick-essay/quick-essay.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {EssayUser} from '../models/essays/essay-user';\nimport {User} from '../models/user';\nimport {UserService} from '../services/user.service';\nimport {ThemePalette} from '@angular/material/core';\n\n@Component({\n  selector: 'app-essays',\n  templateUrl: './essays.component.html',\n  styleUrls: ['./essays.component.scss']\n})\n\nexport class EssaysComponent implements OnInit {\n  public essays: Essay[];\n  public essay: Essay;\n\n  private userEssays: Essay[];\n  private allEssays: Essay[];\n\n  public isCreateEssayMode: boolean;\n  public isCreateTimelineMode: boolean;\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  public loggedInUser: User;\n\n  public showAllToggleColor: ThemePalette;\n  public showAllToggleChecked: boolean;\n\n  constructor(private essayService: EssayService, private userService: UserService, public dialog: MatDialog) {\n    this.showAllToggleChecked = false;\n    this.showAllToggleColor = 'primary';\n\n    this.essays = [];\n    this.allEssays = [];\n    this.userEssays = [];\n\n    this.loggedInUser = this.userService.getLoggedInUser();\n\n    this.isCreateEssayMode = false;\n\n    this.getUserEssays(null, false);\n  }\n\n  ngOnInit() { }\n\n  initializeNewEssay() {\n    this.essay = new Essay();\n    this.essay.initializeNewEssay();\n  }\n\n  getAllEssays(path: string, isAnotherPage: boolean) {\n    if (!this.allEssays.length || isAnotherPage) {\n      this.essayService.getApiEssays(path, null, null, ['title', 'abstract', 'banner'], null, false, null, isAnotherPage).subscribe(response => {\n\n        for (const essay of response.essays) {\n          this.essayService.setEssay(essay);\n        }\n\n        this.essays = this.essayService.getEssays();\n        this.allEssays = this.essayService.getEssays();\n\n        this.totalResults = response.total;\n        this.nextPage = response.links.next;\n        this.previousPage = response.links.prev;\n      });\n\n    } else {\n      this.essays = this.allEssays;\n    }\n  }\n\n  getUserEssays(path: string, isAnotherPage: boolean) {\n    if (!this.userEssays.length || isAnotherPage) {\n      this.essayService.getApiEssays(path, this.loggedInUser.id, null, ['title', 'abstract', 'banner'], null, false, null, isAnotherPage).subscribe(response => {\n        for (const essay of response.essays) {\n          this.essayService.setEssay(essay);\n        }\n\n        this.essays = this.essayService.getEssays();\n        this.userEssays = this.essayService.getEssays();\n\n        this.totalResults = response.total;\n        this.nextPage = response.links.next;\n        this.previousPage = response.links.prev;\n      });\n\n    } else {\n      this.essays = this.userEssays;\n    }\n  }\n\n  toggleEssays() {\n    if (this.showAllToggleChecked) {\n      this.getAllEssays(null, false);\n    } else {\n      this.getUserEssays(null, false);\n    }\n  }\n\n  createEssay() {\n    const dialogRef = this.dialog.open(QuickEssayComponent, {\n      width: '750px',\n      data: {\n        showExisting: false,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let essay = returnObject.essay;\n\n        if (!isExisting) {\n          this.essayService.createApiEssay(essay).subscribe(response => {\n            essay.id = response.data.id;\n\n            let essayUser = new EssayUser();\n\n            essayUser.essay = essay;\n            essayUser.user = this.userService.getLoggedInUser();\n\n\n            this.essayService.addApiUserToEssay(essayUser).subscribe((response) => {\n              essayUser.id = response.id;\n\n              essay.essayUsers.push(essayUser);\n            });\n\n            this.essays.unshift(essay);\n          });\n        }\n      }\n    });\n  }\n\n  turnPage(essay) {\n    if (essay.pageIndex < essay.previousPageIndex) {\n      if (this.showAllToggleChecked) {\n        this.getAllEssays(this.previousPage, true);\n      } else {\n        this.getUserEssays(this.previousPage, true);\n      }\n\n    } else if (essay.pageIndex > essay.previousPageIndex) {\n      if (this.showAllToggleChecked) {\n        this.getAllEssays(this.nextPage, true);\n      } else {\n        this.getUserEssays(this.nextPage, true);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/_cards.scss';\n@import '../../styles/_drawer-side.scss';\n@import '../../styles/_sections.scss';\n\n.essay-container {\n  display: flex;\n  flex-direction: column;\n  margin: 35px auto;\n  width: 1000px;\n\n  .app-card {\n    background-color: $color-lightest;\n    border: $border-light;\n    margin-bottom: 40px;\n    text-align: center;\n    box-shadow: $shadow-light;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./essays.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "essayService",
                        "type": "EssayService"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "essayService",
                        "type": "EssayService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\">\n  <div class=\"app-content-toolbar\">\n    <h1>Essays</h1>\n\n    <mat-slide-toggle\n        [color]=\"showAllToggleColor\"\n        [(ngModel)]=\"showAllToggleChecked\"\n        (ngModelChange)=\"toggleEssays()\">\n      Show All Essays\n    </mat-slide-toggle>\n\n    <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createEssay()\">add</button>\n  </div>\n\n  <div class=\"essay-container\">\n    <app-essay-card\n      *ngFor=\"let essay of essays\" [essay]=\"essay\"\n      class=\"app-card\">\n    </app-essay-card>\n  </div>\n\n  <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n</div>\n\n\n\n"
        },
        {
            "name": "EssayTimelineComponent",
            "id": "component-EssayTimelineComponent-a68012662005142fd1832b6cfe3f1e19",
            "file": "src/app/essays/essay-timeline/essay-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-timeline",
            "styleUrls": [
                "./essay-timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "essayTimeline",
                    "line": 10,
                    "type": "EssayTimeline"
                }
            ],
            "outputsClass": [
                {
                    "name": "delselectAllEssayTimelines",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "timelineSelected",
                    "line": 12,
                    "type": "EventEmitter<EssayTimeline>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedTimeline",
                    "type": "EssayTimeline",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineIsSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applySelectState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onSelectTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sleep",
                    "args": [
                        {
                            "name": "ms",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2} from '@angular/core';\nimport {EssayTimeline} from '../../models/essays/essay-timeline';\n\n@Component({\n  selector: 'app-essay-timeline',\n  templateUrl: './essay-timeline.component.html',\n  styleUrls: ['./essay-timeline.component.scss']\n})\nexport class EssayTimelineComponent implements OnInit {\n  @Input() public essayTimeline: EssayTimeline;\n\n  @Output() private timelineSelected: EventEmitter<EssayTimeline>;\n  @Output() private delselectAllEssayTimelines: EventEmitter<any>;\n\n  public selectedTimeline: EssayTimeline;\n  public timelineIsSelected: boolean;\n\n  constructor(private elementRef: ElementRef,\n              private renderer: Renderer2) {\n    this.timelineSelected = new EventEmitter<EssayTimeline>();\n    this.delselectAllEssayTimelines = new EventEmitter<any>();\n    this.timelineIsSelected = false;\n  }\n\n  ngOnInit() {\n  }\n\n  applySelectState() {\n    const el = this.elementRef.nativeElement.querySelector('#timeline-container');\n\n    this.renderer.addClass(el, 'essay-timeline-selected');\n  }\n\n  async onSelectTimeline() {\n    this.timelineIsSelected = !this.timelineIsSelected;\n    this.delselectAllEssayTimelines.emit();\n\n    await this.sleep(200);\n\n    this.applySelectState();\n    this.timelineSelected.emit(this.selectedTimeline);\n  }\n\n  private sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.list-item {\n  margin: 5px;\n}\n\n.essay-timeline-selected {\n  background-color: $color-gray-scale-50;\n  .app-section {\n    color: $color-darkest;\n  }\n}\n",
                    "styleUrl": "./essay-timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"timeline-container\" (click)=\"onSelectTimeline().then()\">\n  <div class=\"app-section list-item\">\n    <div class=\"app-label\">\n        <span>\n          {{essayTimeline.timeline.label}}\n        </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EssayTimelineDetailsComponent",
            "id": "component-EssayTimelineDetailsComponent-b422e602f1329c91dfebcdb867013df0",
            "file": "src/app/essays/essay-timeline-details/essay-timeline-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-essay-timeline-details",
            "styleUrls": [
                "./essay-timeline-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./essay-timeline-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {Timeline} from '../../models/timelines/timeline';\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nexport interface DialogData {\n  timeline: Timeline;\n}\n\n@Component({\n  selector: 'app-essay-timeline-details',\n  templateUrl: './essay-timeline-details.component.html',\n  styleUrls: ['./essay-timeline-details.component.scss']\n})\nexport class EssayTimelineDetailsComponent implements OnInit {\n  public timelineLink: string;\n\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n    this.timelineLink = '/timeline/' + this.data.timeline.id.toString();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./essay-timeline-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-bottom\">\n  <div class=\"app-drawer-bottom-body\">\n    <div class=\"app-drawer-bottom-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Timeline</div>\n        <div class=\"app-drawer-heading\">\n          {{data.timeline.label}}\n\n          <a href=\"{{timelineLink}}\" target=\"_blank\">\n            <span class=\"material-icons mat-icon-button mat-button-base\">\n              launch\n            </span>\n          </a>\n        </div>\n      </div>\n\n      <app-timeline-display\n        *ngIf=\"data.timeline\"\n        [timeline]=\"data.timeline\">\n      </app-timeline-display>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "EventCardComponent",
            "id": "component-EventCardComponent-5cc55117ad30f4b5c79c0c5fcb13dc07",
            "file": "src/app/manager/events/event-card/event-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-card",
            "styleUrls": [
                "./event-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "event",
                    "line": 11,
                    "type": "Event"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeEvent",
                    "line": 14,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Event } from '../../../models/events/event';\n\n@Component({\n  selector: 'app-event-card',\n  templateUrl: './event-card.component.html',\n  styleUrls: ['./event-card.component.scss']\n})\nexport class EventCardComponent implements OnInit {\n  @Input() public event: Event;\n  @Input() public canDelete: boolean;\n\n  @Output() private removeEvent: EventEmitter<Event>;\n\n  constructor() {\n    this.removeEvent = new EventEmitter<Event>();\n  }\n\n  ngOnInit() { }\n\n  doRemoveEvent() {\n    this.removeEvent.emit(this.event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_cards.scss';\n\n.event-image {\n  width: 100%;\n  margin-bottom: 20px;\n}\n",
                    "styleUrl": "./event-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveEvent()\">delete</button>\n\n  <div routerLink=\"/manager/events/{{event.id}}\">\n    <img class=\"event-image\" src=\"{{event.image}}\">\n\n    <mat-card-title>{{event.label}}</mat-card-title>\n    <mat-card-content>\n      <div class=\"mat-card-subtitle\">\n        <span>{{event.formattedStartYear}}</span>\n        <span *ngIf=\"event.formattedStartYear != event.formattedEndYear\"> - {{event.formattedEndYear}}</span>\n      </div>\n    </mat-card-content>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "EventDetailsAddTimelineComponent",
            "id": "component-EventDetailsAddTimelineComponent-fff03aa3118fb8a2c7b7036993e66fe0",
            "file": "src/app/manager/events/event-details/event-details-add-timeline/event-details-add-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-details-add-timeline",
            "styleUrls": [
                "./event-details-add-timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-details-add-timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EventDetailsAddTimelineComponent>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchTimelines",
                    "defaultValue": "[]",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineNameFilteredOptions",
                    "type": "Observable<Timeline[]>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterTimelinesName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Timeline[]",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "saveTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MatDialogRef} from '@angular/material/dialog';\n\nimport {map, startWith} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\nimport {TimelineService} from '../../../../services/timeline.service';\nimport {Timeline} from '../../../../models/timelines/timeline';\n\n\n@Component({\n  selector: 'app-event-details-add-timeline',\n  templateUrl: './event-details-add-timeline.component.html',\n  styleUrls: ['./event-details-add-timeline.component.scss']\n})\nexport class EventDetailsAddTimelineComponent implements OnInit {\n  public timelines: Timeline[];\n\n  public searchTimelines: Timeline[] = [];\n\n  public timelineNameAutocompleteControl = new FormControl();\n  public timelineNameFilteredOptions: Observable<Timeline[]>;\n\n  constructor(private timelineService: TimelineService,\n              public dialogRef: MatDialogRef<EventDetailsAddTimelineComponent>) {\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['label'], ['label'], false, null, false).subscribe(response => {\n\n      this.searchTimelines = response.timelines;\n\n      this.timelineNameFilteredOptions = this.timelineNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterTimelinesName(timeline))\n      );\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  saveTimeline(timeline) {\n    this.dialogRef.close(timeline);\n  }\n\n  private _filterTimelinesName(filterValue: any): Timeline[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchTimelines.filter(timeline => {\n        if (timeline.label) {\n          return timeline.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./event-details-add-timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EventDetailsAddTimelineComponent>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EventDetailsAddTimelineComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form #eventTimelineForm=\"ngForm\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-title\">\n      <div class=\"app-drawer-subheading\">Timelines</div>\n    </div>\n  </div>\n\n  <div class=\"app-add-object-overlay\">\n    <section class=\"app-section\">\n      <mat-form-field style=\"width: 100%\">\n        <input\n          type=\"text\"\n          placeholder=\"Timeline\"\n          matInput\n          #timelineLabelField\n          name=\"timeline_label\"\n          id=\"timeline_label\"\n          [formControl]=\"timelineNameAutocompleteControl\"\n          [matAutocomplete]=\"timelineNameAutoComplete\">\n\n        <mat-autocomplete autoActiveFirstOption #timelineNameAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveTimeline($event.option.value)\">\n          <mat-option *ngFor=\"let timeline of timelineNameFilteredOptions | async\" [value]=\"timeline\">\n            {{timeline.label}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </section>\n  </div>\n</form>\n"
        },
        {
            "name": "EventDetailsComponent",
            "id": "component-EventDetailsComponent-96c37cd45a0014ebb7fb86a3d6834736",
            "file": "src/app/manager/events/event-details/event-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-details",
            "styleUrls": [
                "./event-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eras",
                    "defaultValue": "[]",
                    "type": "Era[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventTimelines",
                    "type": "EventTimeline[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddTimelineMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditEventMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSavingImage",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "note",
                    "type": "EventNote",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesFilteredOptions",
                    "type": "Observable<Source[]>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterSources",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Source[]",
                    "typeParameters": [],
                    "line": 271,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateAddNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139
                },
                {
                    "name": "activateEditEventMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "addEventTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169
                },
                {
                    "name": "deactivateAddNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "deactivateEditEventMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "EventNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "EventNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displaySource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 259,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163
                },
                {
                    "name": "initializeNewNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                },
                {
                    "name": "saveDescription",
                    "args": [
                        {
                            "name": "content",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveImage",
                    "args": [
                        {
                            "name": "e",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192
                },
                {
                    "name": "saveSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153
                },
                {
                    "name": "selectEra",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectMonth",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Event} from '../../../models/events/event';\nimport {EventNote} from '../../../models/events/event-note';\nimport {Timeline} from '../../../models/timelines/timeline';\nimport {Source} from '../../../models/source';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\n\nimport {EventService} from '../../../services/event.service';\nimport {TimelineService} from '../../../services/timeline.service';\nimport {SourceService} from '../../../services/source.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\nimport {ConfirmRemovalComponent} from '../../../utilities/confirm-removal/confirm-removal.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {EventTimeline} from '../../../models/events/event-timeline';\nimport {AddTimelineDialogComponent} from '../../../utilities/add-timeline-dialog/add-timeline-dialog.component';\n\n@Component({\n  selector: 'app-event-details',\n  templateUrl: './event-details.component.html',\n  styleUrls: ['./event-details.component.scss']\n})\nexport class EventDetailsComponent implements OnInit {\n  public event: Event;\n  public note: EventNote;\n  public eventTimelines: EventTimeline[];\n\n  public sources: Source[] = [];\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n\n  public isAddNoteMode: boolean;\n  public isAddTimelineMode: boolean;\n  public isEditEventMode: boolean;\n\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  public isSavingImage: boolean;\n\n  constructor(private route: ActivatedRoute,\n              private eventService: EventService,\n              private timelineService: TimelineService,\n              private sourceService: SourceService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              public dialog: MatDialog,) {\n\n    const eventId = this.route.snapshot.paramMap.get('id');\n\n    this.eventTimelines = [];\n\n    this.isSavingImage = false;\n\n    this.eventService.getApiEvent(eventId).subscribe(event => {\n      this.event = event;\n\n      if (!this.event.description.length) {\n        this.event.description = 'Needs a description.';\n      }\n\n      this.eventService.setEvent(this.event);\n\n      this.sourcesAutocompleteControl.setValue(this.event.source);\n\n      // LOAD REMAINING DATA AFTER THE INITIAL EVENT HAS BEEN RETRIEVED\n      this.eraService.getEras().subscribe(eras => {\n        for (const era of eras.data) {\n          this.eras.push(new Era().mapEra(era));\n        }\n      });\n\n      this.monthService.getMonths().subscribe(months => {\n        for (const month of months.data) {\n          this.months.push(new Month().mapMonth(month));\n        }\n      });\n\n      // GET THE TIMELINES THE EVENT IS ATTACHED TO\n      this.eventService.getApiEventTimelines(this.event).subscribe((response) => {\n        this.eventTimelines = response.eventTimelines;\n      });\n\n      this.sourceService.getApiSources('/references?page[size]=0&fields[reference]=title,sub_title&sort=title').subscribe(sources => {\n        for (const source of sources.sources) {\n          this.sourceService.setSource(source);\n        }\n\n        this.sources = this.sourceService.getSources();\n\n        this.sourcesFilteredOptions = this.sourcesAutocompleteControl.valueChanges.pipe(\n          startWith(''),\n          map(source => this._filterSources(source))\n        );\n      });\n    });\n\n    this.isEditEventMode = false;\n    this.isAddNoteMode = false;\n    this.isAddTimelineMode = false;\n  }\n\n  ngOnInit() { }\n\n  initializeNewNote() {\n    this.note = new EventNote();\n    this.note.initializeNote();\n  }\n\n  selectEra(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  selectMonth(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  activateEditEventMode() {\n    this.isEditEventMode = true;\n  }\n\n  activateAddNoteMode() {\n    this.isAddNoteMode = true;\n\n    this.initializeNewNote();\n  }\n\n  deactivateEditEventMode() {\n    this.isEditEventMode = false;\n  }\n\n  deactivateAddNoteMode() {\n    this.isAddNoteMode = false;\n  }\n\n  saveSource() {\n    this.event.source = this.sourcesAutocompleteControl.value;\n  }\n\n  saveDescription(content) {\n    this.event.description = content;\n\n    this.editEvent();\n  }\n\n  editEvent() {\n    return this.eventService.patchApiEvent(this.event).subscribe(() => {\n      this.isEditEventMode = false;\n    });\n  }\n\n  addEventTimeline() {\n    const dialogRef = this.dialog.open(AddTimelineDialogComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(timeline => {\n      let eventTimeline = new EventTimeline();\n      eventTimeline.initializeNewEventTimeline();\n\n      this.eventService.createTimelineApiEvent(eventTimeline, this.event).subscribe(response => {\n        eventTimeline.id = response.data.id;\n\n        // get the full timeline now that we have it to show on the card. The previous timeline was a\n        // truncated version for selection purposes only.\n        this.timelineService.getApiTimeline(timeline.id).subscribe(timeline => {\n          eventTimeline.timeline = timeline;\n\n          this.eventTimelines.unshift(eventTimeline);\n        });\n      });\n    });\n  }\n\n  saveNote() {\n    this.eventService.createApiEventNote(this.note, this.event).subscribe(response => {\n      this.note.id = response.data.id;\n      this.event.notes.push(this.note);\n\n      this.initializeNewNote();\n\n      this.isAddNoteMode = false;\n    });\n  }\n\n  saveImage(e: File[]) {\n    if (e.length) {\n      this.isSavingImage = true;\n\n      const file = e[0];\n      const imageForm = new FormData();\n      imageForm.append('image', file);\n\n      this.eventService.createApiEventImage(imageForm).subscribe((eventImageResponse) => {\n        this.event.image = eventImageResponse;\n\n        this.eventService.patchApiEvent(this.event).subscribe(() => {\n          this.isSavingImage = false;\n        });\n      });\n    }\n  }\n\n  deleteNote(note: EventNote) {\n    this.eventService.removeApiNote(note).subscribe(() => {\n      EventService.removeEventNote(this.event, note);\n    });\n  }\n\n  deleteTimeline(timeline: Timeline) {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the timeline ' + timeline.label\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        let eventTimelineToDelete: EventTimeline = null;\n\n        for (const eventTimeline of this.eventTimelines) {\n          if (eventTimeline.timeline.id === timeline.id) {\n            eventTimelineToDelete = eventTimeline;\n            break;\n          }\n        }\n\n        if (eventTimelineToDelete) {\n          this.eventService.removeTimelineApiEvent(eventTimelineToDelete).subscribe(() => {\n            for (let i = 0; i < this.eventTimelines.length; i++) {\n              if (this.eventTimelines[i].id === eventTimelineToDelete.id) {\n                this.eventTimelines.splice(i, 1);\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  displaySource(source: Source) {\n    if (source) {\n      this.sourceFieldDisplayValue = source.title;\n\n      if (source.subTitle) {\n        this.sourceFieldDisplayValue = this.sourceFieldDisplayValue + ': ' + source.subTitle;\n      }\n    }\n\n    return this.sourceFieldDisplayValue;\n  }\n\n  private _filterSources(filterValue: any): Source[] {\n    // when a source is actually selected the value is changed to the source itself. Do not filter if that is the case.\n    if (!filterValue.id) {\n      filterValue = filterValue.toLowerCase();\n\n      return this.sources.filter(source => {\n        return source.title.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_sections.scss';\n@import '../../../../styles/_cards.scss';\n",
                    "styleUrl": "./event-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    },
                    {
                        "name": "eraService",
                        "type": "EraService"
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eraService",
                        "type": "EraService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"event\">\n  <div class=\"app-body-content app-body-darker-canvas\">\n    <div class=\"app-body-content-narrow\">\n      <div class=\"subheading\">\n        Event\n        <button *ngIf=\"!isEditEventMode\" mat-icon-button class=\"material-icons\" type=\"button\" (click)=\"activateEditEventMode()\">edit</button>\n      </div>\n\n      <div *ngIf=\"!isEditEventMode\">\n        <h1 class=\"no-margin-bottom margin-top\">{{event.label}}</h1>\n\n        <div class=\"heading-meta\">\n          {{event.formattedStartDate}} <span *ngIf=\"!event.isSinglePointEvent\">- {{event.formattedEndDate}} • {{event.eventLength}} years</span>\n        </div>\n\n        <app-editor\n          [content]=\"event.description\"\n          (saveContent)=\"saveDescription($event)\"\n          [isEditable]=\"true\">\n        </app-editor>\n      </div>\n\n      <div *ngIf=\"isEditEventMode\">\n        <form (ngSubmit)=\"editEvent()\" #editEventForm=\"ngForm\">\n          <div class=\"app-drawer-header\">\n            <div class=\"app-drawer-tools\">\n              <button mat-icon-button type=\"submit\" class=\"material-icons\">save</button>\n              <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"deactivateEditEventMode()\">close</button>\n            </div>\n          </div>\n\n          <div class=\"app-drawer-content\">\n            <section class=\"app-section\">\n              <label>Image</label>\n\n              <div>\n                <mat-spinner *ngIf=\"isSavingImage\" mode=\"indeterminate\" diameter=\"20\"></mat-spinner>\n\n                <input type=\"file\" (change)=\"saveImage($event.target.files)\" />\n              </div>\n            </section>\n\n            <section class=\"app-section\">\n              <mat-form-field style=\"width: 100%\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Title\"\n                  matInput\n                  #evenLabelField\n                  required\n                  name=\"event_label\"\n                  [(ngModel)]=\"event.label\">\n              </mat-form-field>\n            </section>\n\n            <section class=\"app-section inline\">\n              <label>Beginning</label>\n\n              <div class=\"app-field-group\">\n                <mat-form-field class=\"app-field-era\">\n                  <mat-label>Era</mat-label>\n                  <mat-select [(ngModel)]=\"event.startEra\" name=\"event_start_era\" required [compareWith]=\"selectEra\">\n                    <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-year\">\n                  <input\n                    matInput\n                    placeholder=\"Year\"\n                    name=\"event_start_year\"\n                    required\n                    [(ngModel)]=\"event.startYear\"/>\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-day\">\n                  <input\n                    matInput\n                    placeholder=\"Day\"\n                    name=\"event_start_day\"\n                    [(ngModel)]=\"event.startDay\"/>\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-month\">\n                  <mat-label>Month</mat-label>\n                  <mat-select [(ngModel)]=\"event.startMonth\" name=\"event_start_month\" [compareWith]=\"selectMonth\">\n                    <mat-option [value]=\"null\"></mat-option>\n                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{month.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n\n            </section>\n\n            <section class=\"app-section inline\">\n              <label>Ending</label>\n              <div class=\"app-field-group\">\n                <mat-form-field class=\"app-field-era\">\n                  <mat-label>Era</mat-label>\n                  <mat-select [(ngModel)]=\"event.endEra\" name=\"event_end_era\" [compareWith]=\"selectEra\">\n                    <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-year\">\n                  <input\n                    matInput\n                    placeholder=\"Year\"\n                    name=\"event_end_year\"\n                    [(ngModel)]=\"event.endYear\" />\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-day\">\n                  <input\n                    matInput\n                    placeholder=\"Day\"\n                    name=\"event_end_day\"\n                    [(ngModel)]=\"event.endDay\" />\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-month\">\n                  <mat-label>Month</mat-label>\n                  <mat-select [(ngModel)]=\"event.endMonth\" name=\"event_end_month\" [compareWith]=\"selectMonth\">\n                    <mat-option [value]=\"null\"></mat-option>\n                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{month.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n            </section>\n\n            <section class=\"app-section inline\">\n              <mat-form-field class=\"app-field-reference\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Source\"\n                  aria-label=\"Source\"\n                  matInput\n                  [formControl]=\"sourcesAutocompleteControl\"\n                  [matAutocomplete]=\"auto\">\n\n                <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displaySource\" (optionSelected)=\"saveSource()\">\n                  <mat-option *ngFor=\"let source of sourcesFilteredOptions | async\" [value]=\"source\">\n                    {{source.title}} <span *ngIf=\"source.subTitle\">: {{source.subTitle}}</span>\n                  </mat-option>\n                </mat-autocomplete>\n              </mat-form-field>\n            </section>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"app-body-content\">\n    <div>\n      <!-- Add a timeline CTA-->\n      <div class=\"app-content-toolbar margin-bottom\">\n          <h2>Timelines</h2>\n          <button mat-flat-button color=\"secondary\" (click)=\"addEventTimeline()\">+ Add a Timeline</button>\n      </div>\n\n<!-- TIMELINES -->\n      <div class=\"app-cards-container cards-large\" *ngIf=\"eventTimelines && eventTimelines.length\">\n        <app-timeline-card\n          class=\"app-card\"\n          *ngFor=\"let timelineEvent of eventTimelines\"\n          [timeline]=\"timelineEvent.timeline\"\n          [canDelete]=\"true\"\n          (removeTimeline)=\"deleteTimeline(timelineEvent.timeline)\"></app-timeline-card>\n      </div>\n\n<!-- NOTES -->\n      <!-- Add a note CTA-->\n      <div class=\"app-content-toolbar margin-bottom margin-top\">\n          <h2>Notes</h2>\n          <button mat-flat-button color=\"secondary\" (click)=\"activateAddNoteMode()\">+ Add a Note</button>\n      </div>\n\n      <!-- Add New Note -->\n      <div *ngIf=\"isAddNoteMode\" class=\"app-card-note\">\n        <app-event-details-note\n          [note]=\"note\"\n          [event]=\"event\"\n          [showToolbar]=\"true\"\n          [autoEdit]=\"true\"\n          [isCreate]=\"true\"\n          (createNote)=\"deactivateAddNoteMode()\">\n        </app-event-details-note>\n      </div>\n\n      <!-- Display Notes-->\n      <app-event-details-note\n        *ngFor=\"let note of event.notes\"\n        [note]=\"note\"\n        [event]=\"event\"\n        [showToolbar]=\"true\"\n        (removeNote)=\"deleteNote($event)\">\n      </app-event-details-note>\n\n      <!-- Add a note CTA-->\n      <!--<div class=\"app-content-toolbar margin-bottom margin-top\">-->\n          <!--<h2>Notes</h2>-->\n          <!--<button mat-flat-button color=\"secondary\" (click)=\"activateAddNoteMode()\">+ Add a Note</button>-->\n      <!--</div>-->\n\n      <!--&lt;!&ndash; Add New Note &ndash;&gt;-->\n      <!--<div *ngIf=\"isAddNoteMode\" class=\"app-card-note\">-->\n        <!--<form class=\"app-card-note-edit\">-->\n          <!--<div class=app-card-note-body-meta>-->\n            <!--<h3>New Note</h3>-->\n            <!--<div class=\"app-card-note-toolbar\">-->\n              <!--<button mat-flat-button color=\"primary\" (click)=\"saveNote()\">Save</button>-->\n              <!--<button mat-flat-button color=\"secondary\" (click)=\"deactivateAddNoteMode()\">Cancel</button>-->\n            <!--</div>-->\n          <!--</div>-->\n\n          <!--<div class=\"app-card-note-body-content\">-->\n            <!--<div [(froalaModel)]=\"note.note\"-->\n                <!--[froalaEditor]></div>-->\n          <!--</div>-->\n        <!--</form>-->\n      <!--</div>-->\n\n      <!--&lt;!&ndash; Display Notes&ndash;&gt;-->\n      <!--<app-event-details-note *ngFor=\"let note of event.notes\" [note]=\"note\" [event]=\"event\" [showToolbar]=\"true\" (removeNote)=\"deleteNote($event)\"></app-event-details-note>-->\n\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "EventDetailsNoteComponent",
            "id": "component-EventDetailsNoteComponent-4ffd835b900651f76a8aa5fccd823617",
            "file": "src/app/manager/events/event-details/event-details-note/event-details-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-details-note",
            "styleUrls": [
                "./event-details-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-details-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoEdit",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "event",
                    "line": 19,
                    "type": "Event"
                },
                {
                    "name": "isCreate",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "note",
                    "line": 18,
                    "type": "EventNote"
                },
                {
                    "name": "showToolbar",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "createNote",
                    "line": 25,
                    "type": "EventEmitter<EventNote>"
                },
                {
                    "name": "removeNote",
                    "line": 24,
                    "type": "EventEmitter<EventNote>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateEditNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "doDeleteNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "saveNote",
                    "args": [
                        {
                            "name": "content",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNoteViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {EventNote} from '../../../../models/events/event-note';\nimport {Event} from '../../../../models/events/event';\n\nimport {EventService} from '../../../../services/event.service';\n\nimport {ConfirmRemovalComponent} from '../../../../utilities/confirm-removal/confirm-removal.component';\n\n@Component({\n  selector: 'app-event-details-note',\n  templateUrl: './event-details-note.component.html',\n  styleUrls: ['./event-details-note.component.scss']\n})\nexport class EventDetailsNoteComponent implements OnInit {\n  @Input() public note: EventNote;\n  @Input() public event: Event;\n  @Input() public autoEdit: boolean;\n  @Input() public showToolbar: boolean;\n  @Input() public isCreate: boolean;\n\n  @Output() private removeNote: EventEmitter<EventNote>;\n  @Output() private createNote: EventEmitter<EventNote>;\n\n  public isEditNoteMode: boolean;\n\n  constructor(public dialog: MatDialog, private eventService: EventService) {\n    this.isEditNoteMode = false;\n\n    this.removeNote = new EventEmitter<EventNote>();\n    this.createNote = new EventEmitter<EventNote>();\n  }\n\n  ngOnInit() { }\n\n  activateEditNoteMode() {\n    this.isEditNoteMode = true;\n  }\n\n  setNoteViewMode() {\n    this.isEditNoteMode = false;\n  }\n\n  saveNote(content) {\n    if (this.isCreate) {\n      this.note.note = content;\n\n      this.eventService.createApiEventNote(this.note, this.event).subscribe(response => {\n        this.note.id = response.data.id;\n\n        this.event.notes.unshift(this.note);\n\n        this.isCreate = false;\n\n        this.setNoteViewMode();\n\n        this.createNote.emit();\n      });\n\n    } else {\n      this.eventService.patchApiEventNote(this.note, this.event).subscribe(() => {\n        this.setNoteViewMode();\n      });\n    }\n  }\n\n  doDeleteNote() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the note '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.removeNote.emit(this.note);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../styles/_sections.scss';\n@import '../../../../../styles/_cards.scss';\n\np {\n  color: $color-darkest;\n}\n\n.app-essay-section {\n  // display: flex;\n  // align-items: flex-start;\n  margin: 2rem 0 1rem 0;\n\n  .essay-content {\n    line-height: 1.5rem;\n  }\n}\n\n.app-essay-edit-mode {\n  background-color: $color-gray-scale-50;\n  margin-left: -3rem;\n  margin-right: -3rem;\n  padding: 1rem 3rem 2rem 3rem;\n\n  .app-content-toolbar {\n    margin-bottom: 0;\n    h2 {\n      flex-grow: 1;\n    }\n  }\n}\n",
                    "styleUrl": "./event-details-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-editor [content]=\"note.note\"\n            (saveContent)=\"saveNote($event)\"\n            (deleteNote)=\"doDeleteNote()\"\n            [autoEdit]=\"autoEdit\"\n            [isEditable]=\"true\"\n            [isNote]=\"true\"\n            [canDelete]=\"true\">\n</app-editor>\n\n<!--<div class=\"app-card-note\">-->\n  <!---->\n  <!--&lt;!&ndash;VIEW MODE &ndash;&gt;  -->\n  <!--<div class=\"app-card-note-view\" *ngIf=\"!isEditNoteMode\">-->\n\n    <!--<div class=\"app-card-note-toolbar\" *ngIf=\"showToolbar\">-->\n      <!--<button mat-flat-button class=\"material-icons\" (click)=\"activateEditNoteMode()\">edit</button>-->\n    <!--</div>-->\n    <!---->\n    <!--<div class=\"app-card-note-body-content\">-->\n        <!--<span *ngIf=\"note.note\" [innerHtml]=\"note.note | safeHtml\"></span>-->\n    <!--</div>-->\n    <!---->\n  <!--</div>-->\n\n  <!--&lt;!&ndash;EDIT MODE &ndash;&gt;-->\n  <!--<div *ngIf=\"isEditNoteMode\" class=\"app-card-note-edit\">-->\n    <!--<div class=app-card-note-body-meta>-->\n      <!--<h3>Edit Note</h3>-->\n      <!--<div class=\"app-card-note-toolbar\">-->\n        <!--<button mat-flat-button class=\"material-icons\" (click)=\"doDeleteNote()\">delete</button>-->\n        <!--<button mat-flat-button class=\"material-icons\" (click)=\"saveNote()\">save</button>-->\n        <!--<button mat-flat-button class=\"material-icons\" (click)=\"setNoteViewMode()\">close</button>-->\n      <!--</div>-->\n    <!--</div>-->\n\n    <!--<div class=\"app-card-note-body-content\">-->\n      <!--<div [(froalaModel)]=\"note.note\"-->\n           <!--[froalaEditor]>-->\n      <!--</div>-->\n    <!--</div>-->\n  <!--</div>-->\n<!--</div>-->\n\n"
        },
        {
            "name": "EventNoteComponent",
            "id": "component-EventNoteComponent-3938bc9fa117b44d41bda3bd66473aa6",
            "file": "src/app/manager/events/event-note/event-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-note",
            "styleUrls": [
                "./event-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "note",
                    "line": 11,
                    "type": "EventNote"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeNote",
                    "line": 13,
                    "type": "EventEmitter<EventNote>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { EventNote } from '../../../models/events/event-note';\n\n@Component({\n  selector: 'app-event-note',\n  templateUrl: './event-note.component.html',\n  styleUrls: ['./event-note.component.scss']\n})\nexport class EventNoteComponent implements OnInit {\n  @Input() public note: EventNote;\n\n  @Output() private removeNote: EventEmitter<EventNote>;\n\n  constructor() {\n    this.removeNote = new EventEmitter<EventNote>();\n  }\n\n  ngOnInit() {\n  }\n\n  doRemoveNote() {\n    this.removeNote.emit(this.note);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./event-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-section list-item\">\n  <div>{{note.note}}</div>\n\n  <button mat-icon-button class=\"material-icons\" (click)=\"doRemoveNote()\">delete</button>\n</div>\n\n\n"
        },
        {
            "name": "EventsComponent",
            "id": "component-EventsComponent-8330392e502a734128c73bc9b075024a",
            "file": "src/app/manager/events/events.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-events",
            "styleUrls": [
                "./events.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./events.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventLayout",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "events",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterQuery",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedEvents",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedTimeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "staticSelectedEvents",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineEvent",
                    "type": "TimelineEvent",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addToTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198
                },
                {
                    "name": "createEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "filterResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146
                },
                {
                    "name": "getEvents",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "filterTerm",
                            "type": ""
                        },
                        {
                            "name": "dateFilter",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterTerm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dateFilter",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "removeDuplicatesFromSelectedEventsList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220
                },
                {
                    "name": "removeEvent",
                    "args": [
                        {
                            "name": "contentPanel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "contentPanel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectEvent",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 228,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Event } from '../../models/events/event';\n\nimport { EventService } from '../../services/event.service';\n\nimport {ConfirmRemovalComponent} from '../../utilities/confirm-removal/confirm-removal.component';\nimport {QuickEventComponent} from './quick-event/quick-event.component';\nimport {TimelineService} from '../../services/timeline.service';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {TimelineEvent} from '../../models/timelines/timeline-event';\n\n@Component({\n  selector: 'app-events',\n  templateUrl: './events.component.html',\n  styleUrls: ['./events.component.scss']\n})\n\nexport class EventsComponent implements OnInit {\n  public events: Event[];\n  public event: Event;\n  public selectedEvents: Event[];\n  public staticSelectedEvents: Event[];\n\n  public timelines: Timeline[];\n  public selectedTimeline: Timeline;\n\n  public timelineEvent: TimelineEvent;\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  public filterQuery: string;\n\n  public eventLink: string;\n\n  public eventLayout: string;\n\n  constructor(private eventService: EventService,\n              private timelineService: TimelineService,\n              public dialog: MatDialog) {\n    this.eventLayout = 'card';\n\n    this.events = [];\n    this.selectedEvents = [];\n    this.staticSelectedEvents = [];\n\n    this.timelines = [];\n\n    this.getEvents(\n      '/events?sort=-created&page%5Bnumber%5D=1&fields[event]=label,description,image,event_start_day,event_start_month,event_start_year,' +\n      'event_start_era,event_end_day,event_end_month,event_end_year,event_end_era,reference',\n      null, null);\n\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['label'], ['label'], true, null, false).subscribe((response) => {\n      for (const timeline of response.timelines) {\n        this.timelineService.setTimeline(timeline);\n      }\n\n      this.timelines = this.timelineService.getTimelines();\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  getEvents(path, filterTerm, dateFilter) {\n    if (this.selectedEvents.length) {\n      if (!this.staticSelectedEvents.length) {\n        this.staticSelectedEvents = [...this.selectedEvents];\n      } else {\n        this.staticSelectedEvents = this.staticSelectedEvents.concat(this.selectedEvents);\n\n        this.removeDuplicatesFromSelectedEventsList();\n      }\n    }\n\n    this.eventService.getApiEvents(path, filterTerm, dateFilter, false).subscribe(response => {\n      for (const event of response.events) {\n        this.eventService.setEvent(event);\n      }\n\n      this.events = this.eventService.getEvents();\n\n      this.totalResults = response.total;\n      this.nextPage = response.links.next;\n      this.previousPage = response.links.prev;\n\n      this.selectedEvents = this.staticSelectedEvents;\n    });\n  }\n\n  createEvent() {\n    const dialogRef = this.dialog.open(QuickEventComponent, {\n      width: '750px',\n      data: {\n        showExisting: false,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(event => {\n      if (event) {\n        this.eventService.createApiEvent(event).subscribe(response => {\n          event.id = response.data.id;\n\n          event.formatDates();\n          event.formatYears();\n\n          this.events.unshift(event);\n        });\n      }\n    });\n  }\n\n  removeEvent(contentPanel) {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the event ',\n        content: '' +\n        '<li>' + this.event.notes.length.toString() + ' notes will be removed.</li>'\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.eventService.removeApiEvent(this.event).subscribe(() => {\n          this.eventService.removeEvent(this.event);\n        });\n      }\n    });\n  }\n\n  turnPage(event) {\n    if (event.pageIndex < event.previousPageIndex) {\n      this.getEvents(this.previousPage, null, null);\n    } else if (event.pageIndex > event.previousPageIndex) {\n      this.getEvents(this.nextPage, null, null);\n    }\n  }\n\n  filterResults() {\n    const dateFilter = [];\n    let stringFilter = '';\n\n    if (this.filterQuery.split('-').length === 2) {\n      let startDateEra = 'AD';\n      let endDateEra = 'AD';\n\n      let startDateYear = null;\n      let endDateYear = null;\n\n      const startDateInfo = [];\n      const endDateInfo = [];\n\n      let startDate = this.filterQuery.split('-')[0].trim();\n      let endDate = this.filterQuery.split('-')[1].trim();\n\n      if (startDate.split(' ').length === 2) {\n        if (startDate.split(' ')[1] === 'AD' || startDate.split(' ')[1] === 'BC') {\n          startDateEra = startDate.split(' ')[1];\n          startDateYear = startDate.split(' ')[0];\n        } else {\n          startDateYear = startDate;\n        }\n      } else {\n        startDateYear = startDate;\n      }\n\n      if (endDate.split(' ').length === 2) {\n        if (endDate.split(' ')[1].toUpperCase() === 'AD' || endDate.split(' ')[1].toUpperCase() === 'BC') {\n          endDateEra = endDate.split(' ')[1];\n          endDateYear = endDate.split(' ')[0];\n        } else {\n          endDateYear = endDate;\n        }\n      } else {\n        endDateYear = endDate;\n      }\n\n      startDateInfo.push(startDateYear, startDateEra);\n      endDateInfo.push(endDateYear, endDateEra);\n\n      dateFilter.push(startDateInfo);\n      dateFilter.push(endDateInfo);\n\n    } else if (this.filterQuery) {\n      stringFilter = this.filterQuery;\n    }\n\n    this.getEvents('/events?sort=-created', stringFilter, dateFilter);\n  }\n\n  addToTimeline() {\n    this.removeDuplicatesFromSelectedEventsList();\n\n    this.selectedEvents = this.selectedEvents.concat(this.staticSelectedEvents);\n\n    // removes the duplicates from the final list\n    this.selectedEvents = this.selectedEvents.filter((event, index, self) =>\n      index === self.findIndex((t) => (\n        t.id === event.id\n      ))\n    );\n\n    for (const event of this.selectedEvents) {\n      // create the event for the timeline\n      this.timelineEvent = new TimelineEvent();\n      this.timelineEvent.event = event;\n\n      // call service\n      this.timelineService.createEventApiTimeline(this.timelineEvent, this.selectedTimeline).subscribe(() => { });\n    }\n  }\n\n  removeDuplicatesFromSelectedEventsList() {\n    this.staticSelectedEvents = this.staticSelectedEvents.filter((event, index, self) =>\n      index === self.findIndex((t) => (\n        t.id === event.id\n      ))\n    );\n  }\n\n  selectEvent(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n\n\n",
                    "styleUrl": "./events.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\">\n  <div class=\"app-content-toolbar\">\n    <h1>Events</h1>\n\n    <div>\n      <mat-button-toggle-group [(ngModel)]=\"eventLayout\" appearance=\"legacy\" name=\"eventLayoutStyle\" aria-label=\"Event Layout Style\">\n        <mat-button-toggle value=\"card\">Card</mat-button-toggle>\n        <mat-button-toggle value=\"list\">List</mat-button-toggle>\n      </mat-button-toggle-group>\n    </div>\n\n    <div class=\"app-search-box\">\n      <mat-form-field>\n        <input matInput\n               placeholder=\"Search...\"\n               name=\"eventFilter\"\n               [(ngModel)]=\"filterQuery\"\n               (keyup.enter)=\"filterResults()\" />\n      </mat-form-field>\n\n      <button mat-icon-button class=\"material-icons mat-icon-button mat-button-base\" (click)=\"filterResults()\">search</button>\n    </div>\n\n    <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createEvent()\">add</button>\n  </div>\n\n  <div *ngIf=\"eventLayout === 'card'\" class=\"app-cards-container\">\n    <app-event-card\n      *ngFor=\"let event of events\"\n      [event]=\"event\"\n      [canDelete]=\"false\"\n      class=\"app-card\">\n    </app-event-card>\n  </div>\n\n  <div *ngIf=\"eventLayout === 'list'\">\n    <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addToTimeline()\">add</button>\n\n    <mat-form-field class=\"app-field-month\">\n      <mat-label>Timelines</mat-label>\n      <mat-select [(ngModel)]=\"selectedTimeline\" name=\"selected_timeline\">\n        <mat-option [value]=\"null\"></mat-option>\n        <mat-option *ngFor=\"let timeline of timelines\" [value]=\"timeline\">{{timeline.label}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-selection-list [(ngModel)]=\"selectedEvents\" [compareWith]=\"selectEvent\">\n      <mat-list-option *ngFor=\"let event of events\" [value]=\"event\">\n        <div>\n          <b>{{event.label}}</b> ({{event.formattedStartYear}}<span *ngIf=\"event.formattedStartYear !== event.formattedEndYear\"> - {{event.formattedEndYear}}</span>)\n        </div>\n      </mat-list-option>\n    </mat-selection-list>\n  </div>\n\n  <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n</div>\n"
        },
        {
            "name": "EventTimelineComponent",
            "id": "component-EventTimelineComponent-704b1406ff211f4ef559bb7598944fc4",
            "file": "src/app/manager/events/event-timeline/event-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-timeline",
            "styleUrls": [
                "./event-timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./event-timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "timeline",
                    "line": 11,
                    "type": "Timeline"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeTimeline",
                    "line": 13,
                    "type": "EventEmitter<Timeline>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Timeline } from '../../../models/timelines/timeline';\n\n@Component({\n  selector: 'app-event-timeline',\n  templateUrl: './event-timeline.component.html',\n  styleUrls: ['./event-timeline.component.scss']\n})\nexport class EventTimelineComponent implements OnInit {\n  @Input() public timeline: Timeline;\n\n  @Output() private removeTimeline: EventEmitter<Timeline>;\n\n  constructor() {\n    this.removeTimeline = new EventEmitter<Timeline>();\n  }\n\n  ngOnInit() { }\n\n  doRemoveTimeline() {\n    this.removeTimeline.emit(this.timeline);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./event-timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-section list-item\">\n  <div>{{timeline.label}}</div>\n  <button mat-icon-button class=\"material-icons\" (click)=\"doRemoveTimeline()\">delete</button>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-5165cc2a5b884bf43264b282204551d4",
            "file": "src/app/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "attemptLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {Auth} from '../../models/auth';\nimport {Router} from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport {MessageDialogComponent} from '../../utilities/message-dialog/message-dialog.component';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public username: string;\n  public password: string;\n\n  constructor(private authService: AuthService,\n              private router: Router,\n              public dialog: MatDialog) { }\n\n  ngOnInit() {\n  }\n\n  attemptLogin() {\n    let auth = new Auth();\n\n    auth.user = this.username;\n    auth.password = this.password;\n\n    this.authService.checkAuth(auth).subscribe((response) => {\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('token', response.token);\n\n      this.authService.setToken(response.token);\n\n      this.router.navigate(['/user']).then();\n\n    }, error => {\n      this.dialog.open(MessageDialogComponent, {\n        width: '250px',\n        data: {\n          title: 'Login Failed',\n          message: 'Keep trying.'\n        }\n      });\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form #loginForm=\"ngForm\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-title\">\n      <div class=\"app-drawer-subheading\">Login</div>\n    </div>\n  </div>\n\n  <div class=\"app-drawer-content\">\n    <section class=\"app-section\">\n      <mat-form-field>\n        <input\n          type=\"text\"\n          [(ngModel)]=\"username\"\n          placeholder=\"Username\"\n          matInput\n          #userNameField\n          name=\"user_name\"\n          id=\"user_name\">\n      </mat-form-field>\n    </section>\n\n    <section class=\"app-section\">\n      <mat-form-field>\n        <input\n          type=\"password\"\n          [(ngModel)]=\"password\"\n          placeholder=\"Password\"\n          matInput\n          #passwordField\n          name=\"user_password\"\n          id=\"user_password\">\n      </mat-form-field>\n    </section>\n\n    <section class=\"app-section\">\n      <button mat-flat-button type=\"button\" (click)=\"attemptLogin()\">\n        Login\n      </button>\n    </section>\n  </div>\n</form>\n"
        },
        {
            "name": "MessageDialogComponent",
            "id": "component-MessageDialogComponent-bb6c10debdb875419589349674003f9d",
            "file": "src/app/utilities/message-dialog/message-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-message-dialog",
            "styleUrls": [
                "./message-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<MessageDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nexport interface DialogData {\n  title: string;\n  message: string;\n}\n\n@Component({\n  selector: 'app-message-dialog',\n  templateUrl: './message-dialog.component.html',\n  styleUrls: ['./message-dialog.component.scss']\n})\nexport class MessageDialogComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<MessageDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  ngOnInit() {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./message-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MessageDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<MessageDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>{{data.title}}</h2>\n\n<br>\n\n<p>{{data.message}}</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PersonCardComponent",
            "id": "component-PersonCardComponent-6b4c5fff0daaae1a4acee5cbac982622",
            "file": "src/app/manager/persons/person-card/person-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person-card",
            "styleUrls": [
                "./person-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./person-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "person",
                    "line": 11,
                    "type": "Person"
                }
            ],
            "outputsClass": [
                {
                    "name": "removePerson",
                    "line": 14,
                    "type": "EventEmitter<Person>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemovePerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Person } from '../../../models/persons/person';\n\n@Component({\n  selector: 'app-person-card',\n  templateUrl: './person-card.component.html',\n  styleUrls: ['./person-card.component.scss']\n})\nexport class PersonCardComponent implements OnInit {\n  @Input() public person: Person;\n  @Input() public canDelete: boolean;\n\n  @Output() private removePerson: EventEmitter<Person>;\n\n  constructor() {\n    this.removePerson = new EventEmitter<Person>();\n  }\n\n  ngOnInit() {\n  }\n\n  doRemovePerson() {\n    this.removePerson.emit(this.person);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_cards.scss';\n\n.person-image {\n  width: 100%;\n  margin-bottom: 20px;\n}\n",
                    "styleUrl": "./person-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemovePerson()\">delete</button>\n\n  <div routerLink=\"/manager/persons/{{person.id}}\">\n    <img class=\"person-image\" src=\"{{person.image}}\">\n\n    <mat-card-title>{{person.firstName}} {{person.lastName}}</mat-card-title>\n    <mat-card-content>\n      <div class=\"mat-card-subtitle\">\n        <span>{{person.formattedBirthYear}} - <span>{{person.formattedDeathYear}}</span>\n        </span>\n      </div>\n    </mat-card-content>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "PersonDetailsAddBiographyComponent",
            "id": "component-PersonDetailsAddBiographyComponent-d3ac077f8cf880f02109c723911d429f",
            "file": "src/app/manager/persons/person-details/person-details-add-biography/person-details-add-biography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person-details-add-biography",
            "styleUrls": [
                "./person-details-add-biography.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./person-details-add-biography.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "biographies",
                    "type": "PersonBiography[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "biographyTitleAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "biographyTitleFilteredOptions",
                    "type": "Observable<Essay[]>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<PersonDetailsAddBiographyComponent>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchBiographies",
                    "defaultValue": "[]",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterBiographies",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Essay[]",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "saveBiography",
                    "args": [
                        {
                            "name": "biography",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "biography",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\n\nimport {map, startWith} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\nimport {PersonBiography} from '../../../../models/persons/person-biography';\nimport {Essay} from '../../../../models/essays/essay';\nimport {EssayService} from '../../../../services/essay.service';\n\n@Component({\n  selector: 'app-person-details-add-biography',\n  templateUrl: './person-details-add-biography.component.html',\n  styleUrls: ['./person-details-add-biography.component.scss']\n})\nexport class PersonDetailsAddBiographyComponent implements OnInit {\n  public biographies: PersonBiography[];\n\n  public searchBiographies: Essay[] = [];\n\n  public biographyTitleAutocompleteControl = new FormControl();\n  public biographyTitleFilteredOptions: Observable<Essay[]>;\n\n  public userId: string;\n\n  constructor(private essayService: EssayService,\n              public dialogRef: MatDialogRef<PersonDetailsAddBiographyComponent>) {\n    this.userId = localStorage.getItem('user.id');\n\n    this.essayService.getApiEssays(\n      '/essays',\n      null,\n      '0',\n      null,\n      null,\n      false,\n      [EssayService.getBiographyFilter()],\n      false).subscribe(response => {\n\n      this.searchBiographies = response.essays;\n\n      this.biographyTitleFilteredOptions = this.biographyTitleAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterBiographies(timeline))\n      );\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  saveBiography(biography) {\n    this.dialogRef.close(biography);\n  }\n\n  private _filterBiographies(filterValue: any): Essay[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchBiographies.filter(biography => {\n        if (biography.title) {\n          return biography.title.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./person-details-add-biography.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "essayService",
                        "type": "EssayService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PersonDetailsAddBiographyComponent>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "essayService",
                        "type": "EssayService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PersonDetailsAddBiographyComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form #personBiographyForm=\"ngForm\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-title\">\n      <div class=\"app-drawer-subheading\">Biographies</div>\n    </div>\n  </div>\n\n  <div class=\"app-add-object-overlay\">\n    <section class=\"app-section\">\n      <mat-form-field style=\"width: 100%\">\n        <input\n          type=\"text\"\n          placeholder=\"Biography\"\n          matInput\n          #biographyTitleField\n          name=\"biography_title\"\n          id=\"biography_title\"\n          [formControl]=\"biographyTitleAutocompleteControl\"\n          [matAutocomplete]=\"biographyTitleAutoComplete\">\n\n        <mat-autocomplete autoActiveFirstOption #biographyTitleAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveBiography($event.option.value)\">\n          <mat-option *ngFor=\"let biography of biographyTitleFilteredOptions | async\" [value]=\"biography\">\n            {{biography.title}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </section>\n  </div>\n</form>\n"
        },
        {
            "name": "PersonDetailsAddTimelineComponent",
            "id": "component-PersonDetailsAddTimelineComponent-bdce1237368b5f7ba489d611d17ddae3",
            "file": "src/app/manager/persons/person-details/person-details-add-timeline/person-details-add-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person-details-add-timeline",
            "styleUrls": [
                "./person-details-add-timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./person-details-add-timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<PersonDetailsAddTimelineComponent>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchTimelines",
                    "defaultValue": "[]",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineNameFilteredOptions",
                    "type": "Observable<Timeline[]>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterTimelinesName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Timeline[]",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "saveTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Timeline} from '../../../../models/timelines/timeline';\nimport {TimelineService} from '../../../../services/timeline.service';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-person-details-add-timeline',\n  templateUrl: './person-details-add-timeline.component.html',\n  styleUrls: ['./person-details-add-timeline.component.scss']\n})\nexport class PersonDetailsAddTimelineComponent implements OnInit {\n  public timelines: Timeline[];\n\n  public searchTimelines: Timeline[] = [];\n\n  public timelineNameAutocompleteControl = new FormControl();\n  public timelineNameFilteredOptions: Observable<Timeline[]>;\n\n  constructor(private timelineService: TimelineService,\n              public dialogRef: MatDialogRef<PersonDetailsAddTimelineComponent>) {\n    this.timelineService.getApiTimelines('/timelines', null, '0', null, ['label'], ['label'], false, null, false).subscribe(response => {\n\n      this.searchTimelines = response.timelines;\n\n      this.timelineNameFilteredOptions = this.timelineNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(timeline => this._filterTimelinesName(timeline))\n      );\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  saveTimeline(timeline) {\n    this.dialogRef.close(timeline);\n  }\n\n  private _filterTimelinesName(filterValue: any): Timeline[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchTimelines.filter(timeline => {\n        if (timeline.label) {\n          return timeline.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./person-details-add-timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PersonDetailsAddTimelineComponent>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PersonDetailsAddTimelineComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form #personTimelineForm=\"ngForm\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-title\">\n      <div class=\"app-drawer-subheading\">Timelines</div>\n    </div>\n  </div>\n\n  <div class=\"app-add-object-overlay\">\n    <section class=\"app-section\">\n      <mat-form-field style=\"width: 100%\">\n        <input\n          type=\"text\"\n          placeholder=\"Timeline\"\n          matInput\n          #timelineLabelField\n          name=\"timeline_label\"\n          id=\"timeline_label\"\n          [formControl]=\"timelineNameAutocompleteControl\"\n          [matAutocomplete]=\"timelineNameAutoComplete\">\n\n        <mat-autocomplete autoActiveFirstOption #timelineNameAutoComplete=\"matAutocomplete\" (optionSelected)=\"saveTimeline($event.option.value)\">\n          <mat-option *ngFor=\"let timeline of timelineNameFilteredOptions | async\" [value]=\"timeline\">\n            {{timeline.label}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </section>\n  </div>\n</form>\n"
        },
        {
            "name": "PersonDetailsComponent",
            "id": "component-PersonDetailsComponent-753e4db1c5a89d3e110978f4fb23b501",
            "file": "src/app/manager/persons/person-details/person-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person-details",
            "styleUrls": [
                "./person-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./person-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableBiographies",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "biography",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eras",
                    "defaultValue": "[]",
                    "type": "Era[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddBiographyMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditPersonMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSavingImage",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "note",
                    "type": "PersonNote",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personBiographies",
                    "type": "PersonBiography[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personBiography",
                    "type": "PersonBiography",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFirstNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFirstNameFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFirstNameFilteredOptions",
                    "type": "Observable<Person[]>",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personLastNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personLastNameFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personLastNameFilteredOptions",
                    "type": "Observable<Person[]>",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personTimelines",
                    "type": "PersonTimeline[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchPersons",
                    "defaultValue": "[]",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesFilteredOptions",
                    "type": "Observable<Source[]>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelines",
                    "defaultValue": "[]",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterPersonsFirstName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person[]",
                    "typeParameters": [],
                    "line": 422,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterPersonsLastName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person[]",
                    "typeParameters": [],
                    "line": 436,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateAddNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "activateEditPersonMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179
                },
                {
                    "name": "addPersonBiography",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253
                },
                {
                    "name": "addTimelinePerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228
                },
                {
                    "name": "deactivateAddNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193
                },
                {
                    "name": "deactivateEditPersonMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189
                },
                {
                    "name": "deleteBiography",
                    "args": [
                        {
                            "name": "biography",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "jsdoctags": [
                        {
                            "name": "biography",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "PersonNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "PersonNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTimeline",
                    "args": [
                        {
                            "name": "timeline",
                            "type": "Timeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 334,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "Timeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayPersonFirstName",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 398,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayPersonLastName",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 410,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 219
                },
                {
                    "name": "initializeNewNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153
                },
                {
                    "name": "initializeNewTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "removePerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 308
                },
                {
                    "name": "saveDescription",
                    "args": [
                        {
                            "name": "content",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveImage",
                    "args": [
                        {
                            "name": "e",
                            "type": "File[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "File[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279
                },
                {
                    "name": "savePersonFirstName",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "savePersonLastName",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectEra",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectMonth",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport {map, startWith} from 'rxjs/operators';\n\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {FormControl} from '@angular/forms';\nimport {Source} from '../../../models/source';\nimport {Month} from '../../../models/month';\nimport {Era} from '../../../models/era';\nimport {Timeline} from '../../../models/timelines/timeline';\nimport {TimelineService} from '../../../services/timeline.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\nimport {Person} from '../../../models/persons/person';\nimport {PersonNote} from '../../../models/persons/person-note';\nimport {PersonService} from '../../../services/person.service';\nimport {PersonBiography} from '../../../models/persons/person-biography';\nimport {EssayService} from '../../../services/essay.service';\nimport {Essay} from '../../../models/essays/essay';\nimport {ConfirmRemovalComponent} from '../../../utilities/confirm-removal/confirm-removal.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {PersonTimeline} from '../../../models/persons/person-timeline';\nimport {PersonDetailsAddBiographyComponent} from './person-details-add-biography/person-details-add-biography.component';\nimport {AddTimelineDialogComponent} from '../../../utilities/add-timeline-dialog/add-timeline-dialog.component';\n\n@Component({\n  selector: 'app-person-details',\n  templateUrl: './person-details.component.html',\n  styleUrls: ['./person-details.component.scss']\n})\nexport class PersonDetailsComponent implements OnInit {\n  public person: Person;\n  public note: PersonNote;\n  public timeline: Timeline;\n  public personTimelines: PersonTimeline[];\n  public personBiographies: PersonBiography[];\n  public biography: Essay;\n  public personBiography: PersonBiography;\n  public availableBiographies: Essay[];\n\n  public sources: Source[] = [];\n  public timelines: Timeline[] = [];\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n\n  public isAddNoteMode: boolean;\n  public isAddBiographyMode: boolean;\n  public isEditPersonMode: boolean;\n\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  public searchPersons: Person[] = [];\n\n  public personFirstNameAutocompleteControl = new FormControl();\n  public personFirstNameFilteredOptions: Observable<Person[]>;\n  public personFirstNameFieldDisplayValue: string;\n\n  public personLastNameAutocompleteControl = new FormControl();\n  public personLastNameFilteredOptions: Observable<Person[]>;\n  public personLastNameFieldDisplayValue: string;\n\n  public isSavingImage: boolean;\n\n  public userId: string;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              public dialog: MatDialog,\n              private personService: PersonService,\n              private timelineService: TimelineService,\n              private essayService: EssayService,\n              private eraService: EraService,\n              private monthService: MonthService) {\n\n    const personId = this.route.snapshot.paramMap.get('id');\n\n    this.userId = localStorage.getItem('user.id');\n\n    this.personTimelines = [];\n    this.personBiographies = [];\n\n    this.isSavingImage = false;\n\n    this.personService.getApiPerson(personId).subscribe(person => {\n      this.person = person;\n\n      if (!this.person.description.length) {\n        this.person.description = 'This person needs a description.';\n      }\n\n      this.personService.setPerson(this.person);\n\n      this.sourcesAutocompleteControl.setValue(this.person.source);\n\n      // GET THE TIMELINES THE PERSON IS ATTACHED TO\n      this.personService.getApiPersonTimelines(this.person).subscribe((response) => {\n        this.personTimelines = response.personTimelines;\n      });\n\n      // GET THE BIOGRAPHIES THE PERSON IS ATTACHED TO\n      this.personService.getApiPersonBiographies(this.person).subscribe((response) => {\n        this.personBiographies = response.personBiographies;\n      });\n\n      // LOAD REMAINING DATA AFTER THE INITIAL PERSON HAS BEEN RETRIEVED\n      this.eraService.getEras().subscribe(eras => {\n        for (const era of eras.data) {\n          this.eras.push(new Era().mapEra(era));\n        }\n      });\n\n      this.monthService.getMonths().subscribe(months => {\n        for (const month of months.data) {\n          this.months.push(new Month().mapMonth(month));\n        }\n      });\n\n      this.personService.getApiPersons('/persons?page[size]=0&fields[person]=first_name,last_name&sort=last_name', null, null, false)\n      .subscribe(response => {\n        this.searchPersons = response.persons;\n\n        this.personFirstNameFilteredOptions = this.personFirstNameAutocompleteControl.valueChanges.pipe(\n          startWith(''),\n          map(filteredPerson => this._filterPersonsFirstName(filteredPerson))\n        );\n\n        this.personLastNameFilteredOptions = this.personLastNameAutocompleteControl.valueChanges.pipe(\n          startWith(''),\n          map(filteredPerson => this._filterPersonsLastName(filteredPerson))\n        );\n      });\n\n      this.timelineService.getApiTimelines('/timelines', null, '0', null, ['label'], ['modified'], false, null, false).subscribe(response => {\n        for (const timeline of response.timelines) {\n          this.timelineService.setTimeline(timeline);\n        }\n\n        this.timelines = this.timelineService.getTimelines();\n      });\n    });\n\n    this.isEditPersonMode = false;\n    this.isAddNoteMode = false;\n    this.isAddBiographyMode = false;\n  }\n\n  ngOnInit() { }\n\n  initializeNewNote() {\n    this.note = new PersonNote();\n    this.note.initializeNote();\n  }\n\n  initializeNewTimeline() {\n    this.timeline = new Timeline();\n    this.timeline.initializeNewTimeline();\n  }\n\n  selectEra(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  selectMonth(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  activateEditPersonMode() {\n    this.isEditPersonMode = true;\n  }\n\n  activateAddNoteMode() {\n    this.isAddNoteMode = true;\n\n    this.initializeNewNote();\n  }\n\n  deactivateEditPersonMode() {\n    this.isEditPersonMode = false;\n  }\n\n  deactivateAddNoteMode() {\n    this.isAddNoteMode = false;\n  }\n\n  savePersonFirstName(value) {\n    if (value) {\n      this.person.firstName = value;\n    } else {\n      this.person.firstName = this.personFirstNameAutocompleteControl.value;\n    }\n  }\n\n  savePersonLastName(value) {\n    if (value) {\n      this.person.lastName = value;\n    } else {\n      this.person.lastName = this.personFirstNameAutocompleteControl.value;\n    }\n  }\n\n  saveDescription(content) {\n    this.person.description = content;\n\n    this.editPerson();\n  }\n\n  editPerson() {\n    return this.personService.patchApiPerson(this.person).subscribe(() => {\n      this.isEditPersonMode = false;\n\n      this.person.formatBirthAndDeath();\n      this.person.setAge();\n    });\n  }\n\n  addTimelinePerson() {\n    const dialogRef = this.dialog.open(AddTimelineDialogComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(timeline => {\n      let personTimeline = new PersonTimeline();\n      personTimeline.initializeNewPersonTimeline();\n\n      personTimeline.person = this.person;\n\n      this.timelineService.createPersonApiTimeline(personTimeline).subscribe(response => {\n        personTimeline.id = response.data.id;\n\n        // get the full timeline now that we have it to show on the card. The previous timeline was a\n        // truncated version for selection purposes only.\n        this.timelineService.getApiTimeline(timeline.id).subscribe(timeline => {\n          personTimeline.timeline = timeline;\n\n          this.personTimelines.unshift(personTimeline);\n        });\n      });\n    });\n  }\n\n  addPersonBiography() {\n    const dialogRef = this.dialog.open(PersonDetailsAddBiographyComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(biography => {\n      let personBiography = new PersonBiography();\n      personBiography.initializeBiography();\n\n      personBiography.biography = biography;\n      personBiography.person = this.person;\n\n      this.personService.createPersonBiography(personBiography).subscribe(response => {\n        personBiography.id = response.data.id;\n\n        // get the full timeline now that we have it to show on the card. The previous timeline was a\n        // truncated version for selection purposes only.\n        this.essayService.getApiEssay(biography.id).subscribe(essay => {\n          personBiography.biography = essay;\n\n          this.personBiographies.unshift(personBiography);\n        });\n      });\n    });\n  }\n\n  saveNote() {\n    this.personService.createApiPersonNote(this.note, this.person).subscribe(response => {\n      this.note.id = response.data.id;\n      this.person.notes.push(this.note);\n\n      this.initializeNewNote();\n\n      this.deactivateAddNoteMode();\n    });\n  }\n\n  saveImage(e: File[]) {\n    if (e.length) {\n      this.isSavingImage = true;\n\n      const file = e[0];\n      const imageForm = new FormData();\n      imageForm.append('image', file);\n\n      this.personService.createApiPersonImage(imageForm).subscribe((personImageResponse) => {\n        this.person.image = personImageResponse;\n\n        this.personService.patchApiPerson(this.person).subscribe(() => {\n          this.isSavingImage = false;\n        });\n      });\n    }\n  }\n\n  removePerson() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the person ' + this.person.firstName + ' ' + this.person.lastName,\n        content: 'It will be deleted from all essays, timelines, and projects it may be associated with.'\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.personService.removeApiPerson(this.person).subscribe(() => {\n          this.personService.removePerson(this.person);\n\n          this.router.navigate(['/manager/persons']).then();\n        });\n      }\n    });\n  }\n\n  deleteNote(note: PersonNote) {\n    this.personService.removeApiNote(note).subscribe(() => {\n      PersonService.removePersonNote(this.person, note);\n    });\n  }\n\n  deleteTimeline(timeline: Timeline) {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the timeline ' + timeline.label\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        let personTimelineToDelete: PersonTimeline = null;\n\n        for (const personTimeline of this.personTimelines) {\n          if (personTimeline.timeline.id === timeline.id) {\n            personTimelineToDelete = personTimeline;\n            break;\n          }\n        }\n\n        if (personTimelineToDelete) {\n          this.personService.removeApiPersonTimeline(personTimelineToDelete).subscribe(() => {\n            for (let i = 0; i < this.personTimelines.length; i++) {\n              if (this.personTimelines[i].id === personTimelineToDelete.id) {\n                this.personTimelines.splice(i, 1);\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  deleteBiography(biography: Essay) {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the biography ' + biography.title\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        let personBiographyToDelete: PersonBiography = null;\n\n        for (const personBiography of this.personBiographies) {\n          if (personBiography.biography.id === biography.id) {\n            personBiographyToDelete = personBiography;\n            break;\n          }\n        }\n\n        if (personBiographyToDelete) {\n          this.personService.removeApiPersonBiography(personBiographyToDelete).subscribe(() => {\n            for (let i = 0; i < this.personBiographies.length; i++) {\n              if (this.personBiographies[i].id === personBiographyToDelete.id) {\n                this.personBiographies.splice(i, 1);\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  displayPersonFirstName(person: Person) {\n    if (person) {\n      this.personFirstNameFieldDisplayValue = '';\n\n      if (person.firstName) {\n        this.personFirstNameFieldDisplayValue = person.firstName;\n      }\n    }\n\n    return this.personFirstNameFieldDisplayValue;\n  }\n\n  displayPersonLastName(person: Person) {\n    if (person) {\n      this.personLastNameFieldDisplayValue = '';\n\n      if (person.lastName) {\n        this.personLastNameFieldDisplayValue = person.lastName;\n      }\n    }\n\n    return this.personLastNameFieldDisplayValue;\n  }\n\n  private _filterPersonsFirstName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.firstName) {\n          return person.firstName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterPersonsLastName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.lastName) {\n          return person.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./person-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "personService",
                        "type": "PersonService"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService"
                    },
                    {
                        "name": "eraService",
                        "type": "EraService"
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eraService",
                        "type": "EraService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"person\">\n  <div class=\"app-body-content app-body-darker-canvas\">\n    <div class=\"app-body-content-narrow\">\n      <div class=\"subheading\">\n        Person\n        <button *ngIf=\"!isEditPersonMode\" mat-icon-button class=\"material-icons\" type=\"button\" (click)=\"activateEditPersonMode()\">edit</button>\n      </div>\n\n      <div *ngIf=\"!isEditPersonMode\">\n        <img src=\"{{person.image}}\">\n\n        <h1 class=\"no-margin-bottom margin-top\">\n          {{person.firstName}}\n          <span *ngIf=\"person.middleName\"> {{person.middleName}}</span>\n          <span *ngIf=\"person.lastName\"> {{person.lastName}}</span>\n        </h1>\n\n        <div class=\"heading-meta\">\n          {{person.formattedBirth}} - {{person.formattedDeath}} ({{person.age}} years old)\n        </div>\n\n        <app-editor\n          [content]=\"person.description\"\n          (saveContent)=\"saveDescription($event)\"\n          [isEditable]=\"true\">\n        </app-editor>\n      </div>\n\n      <div *ngIf=\"isEditPersonMode\">\n        <form (ngSubmit)=\"editPerson()\" #editPersonForm=\"ngForm\">\n          <div class=\"app-drawer-header\">\n            <div class=\"app-drawer-tools\">\n              <button mat-icon-button type=\"submit\" class=\"material-icons\">save</button>\n              <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"removePerson()\">delete</button>\n              <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"deactivateEditPersonMode()\">close</button>\n\n            </div>\n          </div>\n\n          <div class=\"app-drawer-content\">\n            <section class=\"app-section\">\n              <label>Image</label>\n\n              <div>\n                <mat-spinner *ngIf=\"isSavingImage\" mode=\"indeterminate\" diameter=\"20\"></mat-spinner>\n\n                <input type=\"file\" (change)=\"saveImage($event.target.files)\" />\n              </div>\n            </section>\n\n            <section class=\"app-section\">\n              <mat-form-field>\n                <input\n                  placeholder=\"First Name\"\n                  matInput\n                  #firstNameField\n                  name=\"person_first_name_search\"\n                  [(ngModel)]=\"person.firstName\" />\n              </mat-form-field>\n\n              <mat-form-field style=\"width: 30%\">\n                <input\n                  matInput\n                  placeholder=\"Middle Name\"\n                  name=\"person_middle_name\"\n                  #personFirstName=\"ngModel\"\n                  [(ngModel)]=\"person.middleName\" />\n              </mat-form-field>\n\n              <mat-form-field>\n                <input\n                  placeholder=\"Last Name\"\n                  matInput\n                  name=\"person_last_name_search\"\n                  #lastNameField\n                  [(ngModel)]=\"person.lastName\">\n              </mat-form-field>\n            </section>\n\n            <section class=\"app-section inline\">\n              <label>Birth Date</label>\n\n              <div class=\"app-field-group\">\n                <mat-form-field class=\"app-field-era\">\n                  <mat-label>Era</mat-label>\n                  <mat-select [(ngModel)]=\"person.birthEra\" name=\"person_birth_era\" required [compareWith]=\"selectEra\">\n                    <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-year\">\n                  <input\n                    matInput\n                    placeholder=\"Year\"\n                    name=\"person_birth_year\"\n                    required\n                    [(ngModel)]=\"person.birthYear\" />\n                </mat-form-field>\n\n\n                <mat-form-field class=\"app-field-day\">\n                  <input\n                    matInput\n                    placeholder=\"Day\"\n                    name=\"person_birth_day\"\n                    [(ngModel)]=\"person.birthDay\" />\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-month\">\n                  <mat-label>Month</mat-label>\n                  <mat-select [(ngModel)]=\"person.birthMonth\" name=\"person_birth_month\" [compareWith]=\"selectMonth\">\n                    <mat-option [value]=\"null\"></mat-option>\n                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{month.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n            </section>\n\n            <section class=\"app-section inline\">\n              <label>Death Date</label>\n\n              <div class=\"app-field-group\">\n                <mat-form-field class=\"app-field-era\">\n                  <mat-label>Era</mat-label>\n                  <mat-select [(ngModel)]=\"person.deathEra\" name=\"person_death_era\" [compareWith]=\"selectEra\">\n                    <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-year\">\n                  <input\n                    matInput\n                    placeholder=\"Year\"\n                    name=\"person_death_year\"\n                    [(ngModel)]=\"person.deathYear\" />\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-day\">\n                  <input\n                    matInput\n                    placeholder=\"Day\"\n                    name=\"person_death_day\"\n                    [(ngModel)]=\"person.deathDay\" />\n                </mat-form-field>\n\n                <mat-form-field class=\"app-field-month\">\n                  <mat-label>Month</mat-label>\n                  <mat-select [(ngModel)]=\"person.deathMonth\" name=\"person_death_month\" [compareWith]=\"selectMonth\">\n                    <mat-option [value]=\"null\"></mat-option>\n                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{month.label}}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n              </div>\n            </section>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"app-body-content\">\n    <div>\n      <!-- BIOGRAPHIES -->\n      <div class=\"app-content-toolbar margin-bottom\">\n          <h2>Biographies</h2>\n          <button mat-flat-button color=\"secondary\" (click)=\"addPersonBiography()\">+ Add a Biography</button>\n      </div>\n\n      <div class=\"app-cards-container cards-xlarge\">\n        <app-essay-card\n          class=\"app-card\"\n          *ngFor=\"let personBiography of personBiographies\"\n          [essay]=\"personBiography.biography\"\n          [canDelete]=\"true\"\n          (removeEssay)=\"deleteBiography($event)\">\n        </app-essay-card>\n      </div>\n\n      <!-- TIMELINES -->\n      <div class=\"app-content-toolbar margin-bottom\">\n          <h2>Timelines</h2>\n          <button mat-flat-button color=\"secondary\" (click)=\"addTimelinePerson()\">+ Add a Timeline</button>\n      </div>\n\n      <div class=\"app-cards-container cards-large\">\n        <app-timeline-card\n          class=\"app-card\"\n          *ngFor=\"let personTimeline of personTimelines\"\n          [timeline]=\"personTimeline.timeline\"\n          [canDelete]=\"true\"\n          (removeTimeline)=\"deleteTimeline($event)\">\n        </app-timeline-card>\n      </div>\n\n<!-- NOTES -->\n      <!-- Add a note CTA-->\n      <div class=\"app-content-toolbar margin-bottom margin-top\">\n          <h2>Notes</h2>\n          <button mat-flat-button color=\"secondary\" (click)=\"activateAddNoteMode()\">+ Add a Note</button>\n      </div>\n\n      <!-- Add New Note -->\n      <div *ngIf=\"isAddNoteMode\" class=\"app-card-note\">\n        <app-person-details-note\n          [note]=\"note\"\n          [person]=\"person\"\n          [showToolbar]=\"true\"\n          [autoEdit]=\"true\"\n          [isCreate]=\"true\"\n          (createNote)=\"deactivateAddNoteMode()\">\n        </app-person-details-note>\n      </div>\n\n      <!-- Display Notes-->\n      <app-person-details-note\n        *ngFor=\"let note of person.notes\"\n        [note]=\"note\"\n        [person]=\"person\"\n        [showToolbar]=\"true\"\n        (removeNote)=\"deleteNote($event)\">\n      </app-person-details-note>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "PersonDetailsNoteComponent",
            "id": "component-PersonDetailsNoteComponent-85c315ef7902fb87daf604070c851187",
            "file": "src/app/manager/persons/person-details/person-details-note/person-details-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person-details-note",
            "styleUrls": [
                "./person-details-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./person-details-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoEdit",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "isCreate",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "note",
                    "line": 15,
                    "type": "PersonNote"
                },
                {
                    "name": "person",
                    "line": 16,
                    "type": "Person"
                },
                {
                    "name": "showToolbar",
                    "line": 17,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "createNote",
                    "line": 22,
                    "type": "EventEmitter<PersonNote>"
                },
                {
                    "name": "removeNote",
                    "line": 21,
                    "type": "EventEmitter<PersonNote>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateEditNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "doDeleteNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "saveNote",
                    "args": [
                        {
                            "name": "content",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNoteViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {PersonNote} from '../../../../models/persons/person-note';\nimport {PersonService} from '../../../../services/person.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport {ConfirmRemovalComponent} from '../../../../utilities/confirm-removal/confirm-removal.component';\nimport {Person} from '../../../../models/persons/person';\n\n@Component({\n  selector: 'app-person-details-note',\n  templateUrl: './person-details-note.component.html',\n  styleUrls: ['./person-details-note.component.scss']\n})\nexport class PersonDetailsNoteComponent implements OnInit {\n  @Input() public note: PersonNote;\n  @Input() public person: Person;\n  @Input() public showToolbar: boolean;\n  @Input() public autoEdit: boolean;\n  @Input() public isCreate: boolean;\n\n  @Output() private removeNote: EventEmitter<PersonNote>;\n  @Output() private createNote: EventEmitter<PersonNote>;\n\n  public isEditNoteMode: boolean;\n\n  constructor(public dialog: MatDialog, private personService: PersonService) {\n    this.isEditNoteMode = false;\n\n    this.removeNote = new EventEmitter<PersonNote>();\n    this.createNote = new EventEmitter<PersonNote>();\n  }\n\n  ngOnInit() { }\n\n  activateEditNoteMode() {\n    this.isEditNoteMode = true;\n  }\n\n  setNoteViewMode() {\n    this.isEditNoteMode = false;\n  }\n\n  saveNote(content) {\n    if (this.isCreate) {\n      this.note.note = content;\n\n      this.personService.createApiPersonNote(this.note, this.person).subscribe(response => {\n        this.note.id = response.data.id;\n\n        this.person.notes.unshift(this.note);\n\n        this.isCreate = false;\n\n        this.setNoteViewMode();\n\n        this.createNote.emit();\n      });\n\n    } else {\n      this.personService.patchApiPersonNote(this.note, this.person).subscribe(() => {\n        this.setNoteViewMode();\n      });\n    }\n  }\n\n  doDeleteNote() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the note '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.removeNote.emit(this.note);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./person-details-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "personService",
                        "type": "PersonService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-editor [content]=\"note.note\"\n            (saveContent)=\"saveNote($event)\"\n            (deleteNote)=\"doDeleteNote()\"\n            [autoEdit]=\"autoEdit\"\n            [isEditable]=\"true\"\n            [isNote]=\"true\"\n            [canDelete]=\"true\">\n</app-editor>\n"
        },
        {
            "name": "PersonNoteComponent",
            "id": "component-PersonNoteComponent-3a7fe4f35df27fd2322eb743e16e2194",
            "file": "src/app/manager/persons/person-note/person-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person-note",
            "styleUrls": [
                "./person-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./person-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "note",
                    "line": 10,
                    "type": "PersonNote"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeNote",
                    "line": 12,
                    "type": "EventEmitter<PersonNote>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, Output, OnInit, EventEmitter} from '@angular/core';\nimport {PersonNote} from '../../../models/persons/person-note';\n\n@Component({\n  selector: 'app-person-note',\n  templateUrl: './person-note.component.html',\n  styleUrls: ['./person-note.component.scss']\n})\nexport class PersonNoteComponent implements OnInit {\n  @Input() public note: PersonNote;\n\n  @Output() private removeNote: EventEmitter<PersonNote>;\n\n  constructor() {\n    this.removeNote = new EventEmitter<PersonNote>();\n  }\n\n  ngOnInit() {\n  }\n\n  doRemoveNote() {\n    this.removeNote.emit(this.note);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./person-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-section list-item\">\n  <div>{{note.note}}</div>\n  <button mat-icon-button class=\"material-icons\" (click)=\"doRemoveNote()\">delete</button>\n</div>\n"
        },
        {
            "name": "PersonsComponent",
            "id": "component-PersonsComponent-8a6503a5a01a60b5b68dec99d18e9569",
            "file": "src/app/manager/persons/persons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-persons",
            "styleUrls": [
                "./persons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./persons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterQuery",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "persons",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesFilteredOptions",
                    "type": "Observable<Source[]>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "filterResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "getPersons",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "filterTerm",
                            "type": ""
                        },
                        {
                            "name": "dateFilter",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterTerm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dateFilter",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeNewPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "person",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\n\nimport {QuickPersonComponent} from './quick-person/quick-person.component';\n\nimport { Person } from '../../models/persons/person';\nimport { Source } from '../../models/source';\n\nimport { PersonService } from '../../services/person.service';\n\n@Component({\n  selector: 'app-persons',\n  templateUrl: './persons.component.html',\n  styleUrls: ['./persons.component.scss']\n})\n\nexport class PersonsComponent implements OnInit {\n  public persons: Person[];\n  public person: Person;\n\n  public filterQuery: string;\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n\n  public personLink: string;\n\n  constructor(private personService: PersonService,\n              public dialog: MatDialog) {\n\n    this.persons = [];\n\n    this.initializeNewPerson();\n\n    this.getPersons(\n      '/persons?sort=-created&page%5Bnumber%5D=1' +\n      '&fields[person]=first_name,middle_name,last_name,image,description,birth_day,birth_month,birth_year,' +\n      'birth_era,death_day,death_month,death_year,death_era,reference',\n      null, null);\n  }\n\n  ngOnInit() { }\n\n  initializeNewPerson() {\n    this.person = new Person();\n\n    this.person.initializeNewPerson();\n  }\n\n  getPersons(path, filterTerm, dateFilter) {\n    this.personService.getApiPersons(path, filterTerm, dateFilter, false).subscribe(response => {\n      for (const person of response.persons) {\n        this.personService.setPerson(person);\n      }\n\n      this.persons = this.personService.getPersons();\n\n      this.totalResults = response.total;\n      this.nextPage = response.links.next;\n      this.previousPage = response.links.prev;\n    });\n  }\n\n  createPerson() {\n    const dialogRef = this.dialog.open(QuickPersonComponent, {\n      width: '750px',\n      data: {\n        showExisting: false,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let person = returnObject.person;\n\n        if (!isExisting) {\n          // THE USER CAN CLOSE DIALOG WITHOUT ENTERING INFO. CHECK TO MAKE SURE REQUIRED FIELDS ARE PRESENT.\n          if (person.firstName && person.birthYear) {\n            this.personService.createApiPerson(person).subscribe(response => {\n              person.id = response.data.id;\n\n              person.formatYears();\n\n              this.personService.setPerson(person);\n\n              this.persons.unshift(person);\n            });\n          }\n        }\n      }\n    });\n  }\n\n  filterResults() {\n    const dateFilter = [];\n    let stringFilter = '';\n\n    if (this.filterQuery.split('-').length === 2) {\n      dateFilter.push(this.filterQuery.split('-')[0]);\n      dateFilter.push(this.filterQuery.split('-')[1]);\n\n    } else if (this.filterQuery) {\n      stringFilter = this.filterQuery;\n    }\n\n    this.getPersons('/persons?sort=-created', stringFilter, dateFilter);\n  }\n\n  turnPage(person) {\n    if (person.pageIndex < person.previousPageIndex) {\n      this.getPersons(this.previousPage, null, null);\n    } else if (person.pageIndex > person.previousPageIndex) {\n      this.getPersons(this.nextPage, null, null);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n",
                    "styleUrl": "./persons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "personService",
                        "type": "PersonService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\">\n  <div class=\"app-content-toolbar\">\n    <h1>People</h1>\n\n    <div class=\"app-search-box\">\n      <mat-form-field>\n        <input matInput\n               placeholder=\"Search...\"\n               name=\"person_filter\"\n               [(ngModel)]=\"filterQuery\"\n               (keyup.enter)=\"filterResults()\" />\n      </mat-form-field>\n      <button mat-icon-button class=\"material-icons mat-icon-button mat-button-base\" (click)=\"filterResults()\">search</button>\n    </div>\n\n    <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createPerson()\">add</button>\n  </div>\n\n  <div class=\"app-cards-container\">\n    <app-person-card\n      *ngFor=\"let person of persons\"\n      [person]=\"person\"\n      [canDelete]=\"false\"\n      class=\"app-card\">\n    </app-person-card>\n  </div>\n\n  <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n</div>\n"
        },
        {
            "name": "ProjectCardComponent",
            "id": "component-ProjectCardComponent-eabc976368308c2ad79aae086f4e819a",
            "file": "src/app/projects/project-card/project-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-card",
            "styleUrls": [
                "./project-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "project",
                    "line": 10,
                    "type": "Project"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeProject",
                    "line": 13,
                    "type": "EventEmitter<Project>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Project} from '../../models/projects/project';\n\n@Component({\n  selector: 'app-project-card',\n  templateUrl: './project-card.component.html',\n  styleUrls: ['./project-card.component.scss']\n})\nexport class ProjectCardComponent implements OnInit {\n  @Input() public project: Project;\n  @Input() public canDelete: boolean;\n\n  @Output() private removeProject: EventEmitter<Project>;\n\n  constructor() {\n    this.removeProject = new EventEmitter<Project>();\n  }\n\n  ngOnInit(): void {\n  }\n\n  doRemoveProject() {\n    this.removeProject.emit(this.project);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n",
                    "styleUrl": "./project-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveProject()\">delete</button>\n\n  <div routerLink=\"/projects/{{project.id}}\">\n    <mat-card-title>{{project.label}}</mat-card-title>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "ProjectDetailsComponent",
            "id": "component-ProjectDetailsComponent-7946b4fdd8eb7f5ff6ad5993ff997060",
            "file": "src/app/projects/project-details/project-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-details",
            "styleUrls": [
                "./project-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "project",
                    "type": "Project",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "projectUsers",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addBrainstorm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355
                },
                {
                    "name": "addChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263
                },
                {
                    "name": "addEssay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210
                },
                {
                    "name": "addPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158
                },
                {
                    "name": "addProjectTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 411
                },
                {
                    "name": "addUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "deleteBrainstorm",
                    "args": [
                        {
                            "name": "projectBrainstorm",
                            "type": "ProjectBrainstorm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 517,
                    "jsdoctags": [
                        {
                            "name": "projectBrainstorm",
                            "type": "ProjectBrainstorm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteChart",
                    "args": [
                        {
                            "name": "projectChart",
                            "type": "ProjectChart"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 507,
                    "jsdoctags": [
                        {
                            "name": "projectChart",
                            "type": "ProjectChart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEssay",
                    "args": [
                        {
                            "name": "essay",
                            "type": "ProjectEssay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 467,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "ProjectEssay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEvent",
                    "args": [
                        {
                            "name": "projectEvent",
                            "type": "ProjectEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 497,
                    "jsdoctags": [
                        {
                            "name": "projectEvent",
                            "type": "ProjectEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePerson",
                    "args": [
                        {
                            "name": "projectPerson",
                            "type": "ProjectPerson"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 477,
                    "jsdoctags": [
                        {
                            "name": "projectPerson",
                            "type": "ProjectPerson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTimeline",
                    "args": [
                        {
                            "name": "projectTimeline",
                            "type": "ProjectTimeline"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 487,
                    "jsdoctags": [
                        {
                            "name": "projectTimeline",
                            "type": "ProjectTimeline",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ProjectService} from '../../services/project.service';\nimport {Project} from '../../models/projects/project';\nimport {QuickPersonComponent} from '../../manager/persons/quick-person/quick-person.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {PersonService} from '../../services/person.service';\nimport {ProjectPerson} from '../../models/projects/project-person';\nimport {QuickEssayComponent} from '../../essays/quick-essay/quick-essay.component';\nimport {EssayService} from '../../services/essay.service';\nimport {ProjectEssay} from '../../models/projects/project-essay';\nimport {EssayUser} from '../../models/essays/essay-user';\nimport {UserService} from '../../services/user.service';\nimport {AddTimelineDialogComponent} from '../../utilities/add-timeline-dialog/add-timeline-dialog.component';\nimport {ProjectTimeline} from '../../models/projects/project-timeline';\nimport {TimelineService} from '../../services/timeline.service';\nimport {ProjectEvent} from '../../models/projects/project-event';\nimport {ProjectChart} from '../../models/projects/project-chart';\nimport {ProjectBrainstorm} from '../../models/projects/project-brainstorm';\nimport {QuickEventComponent} from '../../manager/events/quick-event/quick-event.component';\nimport {EventService} from '../../services/event.service';\nimport {ChartService} from '../../services/chart.service';\nimport {BrainstormService} from '../../services/brainstorm.service';\nimport {AddChartDialogComponent} from '../../utilities/add-chart-dialog/add-chart-dialog.component';\nimport {AddBrainstormDialogComponent} from '../../utilities/add-brainstorm-dialog/add-brainstorm-dialog.component';\nimport {User} from '../../models/user';\nimport {AddUserDialogComponent} from '../../utilities/add-user-dialog/add-user-dialog.component';\nimport {MessageDialogComponent} from '../../utilities/message-dialog/message-dialog.component';\n\n@Component({\n  selector: 'app-project-details',\n  templateUrl: './project-details.component.html',\n  styleUrls: ['./project-details.component.scss']\n})\nexport class ProjectDetailsComponent implements OnInit {\n  public project: Project;\n  public projectUsers: User[];\n\n  private userId: string;\n\n  constructor(public dialog: MatDialog,\n              private route: ActivatedRoute,\n              private projectService: ProjectService,\n              private personService: PersonService,\n              private eventService: EventService,\n              private chartService: ChartService,\n              private brainstormService: BrainstormService,\n              private essayService: EssayService,\n              private userService: UserService,\n              private timelineService: TimelineService) {\n    const projectId = this.route.snapshot.paramMap.get('id');\n\n    this.userId = localStorage.getItem('user.id');\n\n    this.projectUsers = [];\n\n    this.projectService.getApiProject(projectId).subscribe((project) => {\n      this.project = project;\n\n      this.projectService.getApiProjectUsers('/project_users', this.project).subscribe((response) => {\n        for (const user of response.users) {\n          this.projectUsers.push(user);\n        }\n      });\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  addUser() {\n    const dialogRef = this.dialog.open(AddUserDialogComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(user => {\n      let userExists = false;\n\n      for (const currentUser of this.projectUsers) {\n        if (user.id === currentUser.id) {\n          userExists = true;\n          break;\n        }\n      }\n\n      if (userExists) {\n        this.dialog.open(MessageDialogComponent, {\n          width: '250px',\n          data: {\n            title: 'Could Not Add User',\n            message: 'User is already part of the project.'\n          }\n        });\n      } else {\n        this.projectService.addUserToProject(this.project, user.id).subscribe(() => {\n          this.projectUsers.push(user);\n        });\n      }\n    });\n  }\n\n  addEssay() {\n    const dialogRef = this.dialog.open(QuickEssayComponent, {\n      width: '750px',\n      data: {\n        showExisting: true,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let essay = returnObject.essay;\n\n        if (isExisting) {\n          this.projectService.addApiEssayToProject(this.project, essay).subscribe(projectEssayResponse => {\n            let projectEssay = new ProjectEssay();\n            projectEssay.initializeNewProjectEssay();\n\n            projectEssay.id = projectEssayResponse.id;\n            projectEssay.essay = essay;\n\n            this.project.essays.unshift(projectEssay);\n          });\n\n        } else {\n          this.essayService.createApiEssay(essay).subscribe(response => {\n            essay.id = response.data.id;\n\n            let essayUser = new EssayUser();\n\n            essayUser.essay = essay;\n            essayUser.user = this.userService.getLoggedInUser();\n\n\n            this.essayService.addApiUserToEssay(essayUser).subscribe((response) => {\n              essayUser.id = response.id;\n\n              essay.essayUsers.push(essayUser);\n            });\n\n            this.projectService.addApiEssayToProject(this.project, essay).subscribe(projectEssayResponse => {\n              let projectEssay = new ProjectEssay();\n              projectEssay.initializeNewProjectEssay();\n\n              projectEssay.id = projectEssayResponse.id;\n              projectEssay.essay = essay;\n\n              this.project.essays.unshift(projectEssay);\n            });\n          });\n        }\n      }\n    });\n  }\n\n  addPerson() {\n    const dialogRef = this.dialog.open(QuickPersonComponent, {\n      width: '750px',\n      data: {\n        showExisting: true,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let person = returnObject.person;\n\n        // IF ADDING AN EXISTING PERSON TO THE PROJECT\n        if (isExisting) {\n          this.projectService.addApiPersonToProject(this.project, person).subscribe((response) => {\n            let projectPerson = new ProjectPerson();\n            projectPerson.initializeNewProjectPerson();\n\n            projectPerson.id = response.id;\n            projectPerson.person = person;\n\n            this.project.persons.unshift(projectPerson);\n          });\n\n        } else { // IF ADDING A NEW PERSON TO THE PROJECT\n          // THE USER CAN CLOSE DIALOG WITHOUT ENTERING INFO. CHECK TO MAKE SURE REQUIRED FIELDS ARE PRESENT.\n          if (person.firstName && person.birthYear) {\n            this.personService.createApiPerson(person).subscribe(response => {\n              person.id = response.data.id;\n\n              person.formatYears();\n\n              this.personService.setPerson(person);\n\n              this.projectService.addApiPersonToProject(this.project, person).subscribe((response) => {\n                let projectPerson = new ProjectPerson();\n                projectPerson.initializeNewProjectPerson();\n\n                projectPerson.id = response.id;\n                projectPerson.person = person;\n\n                this.project.persons.unshift(projectPerson);\n              });\n            });\n          }\n        }\n      }\n    });\n  }\n\n  addEvent() {\n    const dialogRef = this.dialog.open(QuickEventComponent, {\n      width: '750px',\n      data: {\n        showExisting: true,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let event = returnObject.event;\n\n        // IF ADDING AN EXISTING PERSON TO THE PROJECT\n        if (isExisting) {\n          this.projectService.addApiEventToProject(this.project, event).subscribe((response) => {\n            let projectEvent = new ProjectEvent();\n            projectEvent.initializeNewProjectEvent();\n\n            projectEvent.id = response.id;\n            projectEvent.event = event;\n\n            this.project.events.unshift(projectEvent);\n          });\n\n        } else { // IF ADDING A NEW PERSON TO THE PROJECT\n          // THE USER CAN CLOSE DIALOG WITHOUT ENTERING INFO. CHECK TO MAKE SURE REQUIRED FIELDS ARE PRESENT.\n          if (event.label) {\n            this.eventService.createApiEvent(event).subscribe(response => {\n              event.id = response.data.id;\n\n              event.formatDates();\n              event.formatYears();\n\n              this.eventService.setEvent(event);\n\n              this.projectService.addApiEventToProject(this.project, event).subscribe((response) => {\n                let projectEvent = new ProjectEvent();\n                projectEvent.initializeNewProjectEvent();\n\n                projectEvent.id = response.id;\n                projectEvent.event = event;\n\n                this.project.events.unshift(projectEvent);\n              });\n            });\n          }\n        }\n      }\n    });\n  }\n\n  addChart() {\n    const dialogRef = this.dialog.open(AddChartDialogComponent, {\n      width: '750px',\n      data: {\n        showExisting: true,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let chart = returnObject.chart;\n\n        // IF ADDING AN EXISTING CHART TO THE PROJECT\n        if (isExisting) {\n          this.projectService.addApiChartToProject(this.project, chart).subscribe((response) => {\n            console.log(response);\n\n            let projectChart = new ProjectChart();\n            projectChart.initializeNewProjectChart();\n\n            projectChart.id = response.data.id;\n            projectChart.chart = chart;\n\n            this.project.charts.unshift(projectChart);\n          });\n\n        } else { // IF ADDING A NEW CHART TO THE PROJECT\n          // THE USER CAN CLOSE DIALOG WITHOUT ENTERING INFO. CHECK TO MAKE SURE REQUIRED FIELDS ARE PRESENT.\n          if (chart.options.title.text) {\n            this.chartService.createApiChart(chart).subscribe(response => {\n              chart.id = response.data.id;\n\n              for (const label of chart.labels) {\n                this.chartService.createApiChartLabel(chart, label).subscribe(labelResponse => {\n                  label.id = labelResponse.data.id;\n                });\n              }\n\n              for (const dataset of chart.datasets) {\n                this.chartService.createApiChartDataset(chart, dataset).subscribe(datasetResponse => {\n                  dataset.id = datasetResponse.data.id;\n\n                  for (const data of dataset.data) {\n                    this.chartService.createApiChartDatasetData(dataset, data).subscribe(dataResponse => {\n                      data.id = dataResponse.data.id;\n                    });\n                  }\n                });\n              }\n\n              this.chartService.createApiChartOptions(chart, chart.options).subscribe(optionsResponse => {\n                chart.options.id = optionsResponse.data.id;\n\n                // make the title options\n                this.chartService.createApiChartTitleOptions(chart.options, chart.options.title).subscribe(titleOptionsResponse => {\n                  chart.options.title.id = titleOptionsResponse.data.id;\n                });\n\n                // make the legend options\n                this.chartService.createApiChartLegendOptions(chart.options, chart.options.legend).subscribe(legendOptionsResponse => {\n                  chart.options.legend.id = legendOptionsResponse.data.id;\n\n                  this.chartService.createApiChartLegendLabelOptions(chart.options.legend, chart.options.legend.labels)\n                    .subscribe(legendLabelOptionsResponse => {\n                      chart.options.legend.labels.id = legendLabelOptionsResponse.data.id;\n                    });\n                });\n\n                // make the tooltip options\n                this.chartService.createApiChartTooltipOptions(chart.options, chart.options.tooltips).subscribe(tooltipOptionsResponse => {\n                  chart.options.tooltips.id = tooltipOptionsResponse.data.id;\n                });\n              });\n\n              this.projectService.addApiChartToProject(this.project, chart).subscribe((response) => {\n                let projectChart = new ProjectChart();\n                projectChart.initializeNewProjectChart();\n\n                projectChart.id = response.data.id;\n                projectChart.chart = chart;\n\n                this.project.charts.unshift(projectChart);\n              });\n            });\n          }\n        }\n      }\n    });\n  }\n\n  addBrainstorm() {\n    const dialogRef = this.dialog.open(AddBrainstormDialogComponent, {\n      width: '750px',\n      data: {\n        showExisting: true,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let brainstorm = returnObject.brainstorm;\n\n        // IF ADDING AN EXISTING BRAINSTORM TO THE PROJECT\n        if (isExisting) {\n          this.projectService.addApiBrainstormToProject(this.project, brainstorm).subscribe((response) => {\n            console.log(response);\n\n            let projectBrainstorm = new ProjectBrainstorm();\n            projectBrainstorm.initializeNewProjectBrainstorm();\n\n            projectBrainstorm.id = response.data.id;\n            projectBrainstorm.brainstorm = brainstorm;\n\n            this.project.brainstorms.unshift(projectBrainstorm);\n          });\n\n        } else { // IF ADDING A NEW BRAINSTORM TO THE PROJECT\n          // THE USER CAN CLOSE DIALOG WITHOUT ENTERING INFO. CHECK TO MAKE SURE REQUIRED FIELDS ARE PRESENT.\n          if (brainstorm.title) {\n            this.brainstormService.createApiBrainstorm(brainstorm).subscribe(response => {\n              brainstorm.id = response.data.id;\n\n              this.brainstormService.setBrainstorm(brainstorm);\n\n              this.projectService.addApiBrainstormToProject(this.project, brainstorm).subscribe((response) => {\n                console.log(response);\n\n                let projectBrainstorm = new ProjectBrainstorm();\n                projectBrainstorm.initializeNewProjectBrainstorm();\n\n                projectBrainstorm.id = response.data.id;\n                projectBrainstorm.brainstorm = brainstorm;\n\n                this.project.brainstorms.unshift(projectBrainstorm);\n              });\n\n              this.brainstormService.addUserToBrainstorm(brainstorm, this.userId).subscribe(() => {});\n            });\n          }\n        }\n      }\n    });\n  }\n\n  addProjectTimeline() {\n    const dialogRef = this.dialog.open(AddTimelineDialogComponent, {\n      width: '750px',\n      data: {\n        showExisting: true,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(returnObject => {\n      if (returnObject) {\n        let isExisting = returnObject.isExisting;\n        let timeline = returnObject.timeline;\n\n        // IF ADDING AN EXISTING TIMELINE TO THE PROJECT\n        if (isExisting) {\n          let projectTimeline = new ProjectTimeline();\n          projectTimeline.initializeNewProjectTimeline();\n\n          this.projectService.addApiTimelineToProject(this.project, timeline).subscribe(response => {\n            projectTimeline.id = response.data.id;\n\n            // get the full timeline now that we have it to show on the card. The previous timeline was a\n            // truncated version for selection purposes only.\n            this.timelineService.getApiTimeline(timeline.id).subscribe(timeline => {\n              projectTimeline.timeline = timeline;\n\n              this.project.timelines.unshift(projectTimeline);\n            });\n          });\n        } else { // IF ADDING A NEW TIMELINE TO THE PROJECT\n          // THE USER CAN CLOSE DIALOG WITHOUT ENTERING INFO. CHECK TO MAKE SURE REQUIRED FIELDS ARE PRESENT.\n          if (timeline.label) {\n            this.timelineService.createApiTimeline(timeline).subscribe(response => {\n              timeline.id = response.data.id;\n\n              this.timelineService.setTimeline(timeline);\n\n              this.timelineService.addUserToTimeline(timeline, this.userId).subscribe(() => {});\n\n              this.projectService.addApiTimelineToProject(this.project, timeline).subscribe((response) => {\n                let projectTimeline = new ProjectTimeline();\n                projectTimeline.initializeNewProjectTimeline();\n\n                projectTimeline.id = response.data.id;\n                projectTimeline.timeline = timeline;\n\n                this.project.timelines.unshift(projectTimeline);\n              });\n            });\n          }\n        }\n      }\n    });\n  }\n\n  deleteEssay(essay: ProjectEssay) {\n    this.projectService.removeApiEssayFromProject(essay).subscribe(() => {\n      for (let i = 0; i < this.project.essays.length; i++) {\n        if (this.project.essays[i].essay.id === essay.essay.id) {\n          this.project.essays.splice(i, 1);\n        }\n      }\n    });\n  }\n\n  deletePerson(projectPerson: ProjectPerson) {\n    this.projectService.removeApiPersonFromProject(projectPerson).subscribe(() => {\n      for (let i = 0; i < this.project.persons.length; i++) {\n        if (this.project.persons[i].person.id === projectPerson.person.id) {\n          this.project.persons.splice(i, 1);\n        }\n      }\n    });\n  }\n\n  deleteTimeline(projectTimeline: ProjectTimeline) {\n    this.projectService.removeApiTimelineFromProject(projectTimeline).subscribe(() => {\n      for (let i = 0; i < this.project.timelines.length; i++) {\n        if (this.project.timelines[i].timeline.id === projectTimeline.timeline.id) {\n          this.project.timelines.splice(i, 1);\n        }\n      }\n    });\n  }\n\n  deleteEvent(projectEvent: ProjectEvent) {\n    this.projectService.removeApiEventFromProject(projectEvent).subscribe(() => {\n      for (let i = 0; i < this.project.events.length; i++) {\n        if (this.project.events[i].event.id === projectEvent.event.id) {\n          this.project.events.splice(i, 1);\n        }\n      }\n    });\n  }\n\n  deleteChart(projectChart: ProjectChart) {\n    this.projectService.removeApiChartFromProject(projectChart).subscribe(() => {\n      for (let i = 0; i < this.project.charts.length; i++) {\n        if (this.project.charts[i].chart.id === projectChart.chart.id) {\n          this.project.charts.splice(i, 1);\n        }\n      }\n    });\n  }\n\n  deleteBrainstorm(projectBrainstorm: ProjectBrainstorm) {\n    this.projectService.removeApiBrainstormFromProject(projectBrainstorm).subscribe(() => {\n      for (let i = 0; i < this.project.brainstorms.length; i++) {\n        if (this.project.brainstorms[i].brainstorm.id === projectBrainstorm.brainstorm.id) {\n          this.project.brainstorms.splice(i, 1);\n        }\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n\n.essay-container {\n  display: flex;\n  flex-direction: column;\n  margin: 35px auto;\n  width: 1000px;\n\n  .app-card {\n    background-color: $color-lightest;\n    border: $border-light;\n    margin-bottom: 40px;\n    text-align: center;\n    box-shadow: $shadow-light;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./project-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "personService",
                        "type": "PersonService"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService"
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService"
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"project\">\n  <h1>{{project.label}}</h1>\n\n  <div *ngFor=\"let user of projectUsers\">\n    <span>{{user.firstName}}</span> <span> {{user.lastName}}</span>\n  </div>\n\n  <button mat-flat-button class=\"material-icons\" color=\"secondary\" (click)=\"addUser()\">+</button>\n\n  <div class=\"app-body-content\">\n    <div class=\"app-content-toolbar\">\n      <h1>Essays</h1>\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addEssay()\">add</button>\n    </div>\n\n    <div class=\"essay-container\">\n      <app-essay-card\n        class=\"app-card\"\n        *ngFor=\"let essay of project.essays\"\n        [essay]=\"essay.essay\"\n        [canDelete]=\"true\" (removeEssay)=\"deleteEssay(essay)\">\n      </app-essay-card>\n    </div>\n  </div>\n\n  <hr>\n\n  <div class=\"app-body-content\">\n    <div class=\"app-content-toolbar\">\n      <h1>Timelines</h1>\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addProjectTimeline()\">add</button>\n    </div>\n\n    <div class=\"app-cards-container cards-xlarge\">\n      <app-timeline-card\n        class=\"app-card\"\n        *ngFor=\"let timeline of project.timelines\"\n        [timeline]=\"timeline.timeline\"\n        [canDelete]=\"true\"\n        (removeTimeline)=\"deleteTimeline(timeline)\">\n      </app-timeline-card>\n    </div>\n  </div>\n\n  <hr>\n\n  <div class=\"app-body-content\">\n    <div class=\"app-content-toolbar\">\n      <h1>Events</h1>\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addEvent()\">add</button>\n    </div>\n\n    <div class=\"app-cards-container cards-medium\">\n      <app-event-card\n        class=\"app-card\"\n        *ngFor=\"let event of project.events\"\n        [event]=\"event.event\"\n        [canDelete]=\"true\"\n        (removeEvent)=\"deleteEvent(event)\">\n      </app-event-card>\n    </div>\n  </div>\n\n  <hr>\n\n  <div class=\"app-body-content\">\n    <div class=\"app-content-toolbar\">\n      <h1>People</h1>\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addPerson()\">add</button>\n    </div>\n\n    <div class=\"app-cards-container cards-medium\">\n      <app-person-card\n        class=\"app-card\"\n        *ngFor=\"let person of project.persons\"\n        [person]=\"person.person\"\n        [canDelete]=\"true\" (removePerson)=\"deletePerson(person)\">\n      </app-person-card>\n    </div>\n  </div>\n\n  <hr>\n\n  <div class=\"app-body-content\">\n    <div class=\"app-content-toolbar\">\n      <h1>Charts</h1>\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addChart()\">add</button>\n    </div>\n\n    <div class=\"app-cards-container cards-large\">\n      <app-chart-card\n        class=\"app-card\"\n        *ngFor=\"let chart of project.charts\"\n        [chart]=\"chart.chart\"\n        [canDelete]=\"true\"\n        (removeChart)=\"deleteChart(chart)\">\n      </app-chart-card>\n    </div>\n  </div>\n\n  <hr>\n\n  <div class=\"app-body-content\">\n    <div class=\"app-content-toolbar\">\n      <h1>Brainstorms</h1>\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addBrainstorm()\">add</button>\n    </div>\n\n    <div class=\"app-cards-container cards-medium\">\n      <app-brainstorm-card\n        class=\"app-card\"\n        *ngFor=\"let brainstorm of project.brainstorms\"\n        [brainstorm]=\"brainstorm.brainstorm\"\n        [canDelete]=\"true\"\n        (removeBrainstorm)=\"deleteBrainstorm(brainstorm)\">\n      </app-brainstorm-card>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ProjectsComponent",
            "id": "component-ProjectsComponent-b3fc2a29714df400cf2ffc67ecf60843",
            "file": "src/app/projects/projects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-projects",
            "styleUrls": [
                "./projects.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "projects",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "deleteProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "userId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "project",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ProjectService} from '../services/project.service';\nimport {Project} from '../models/projects/project';\nimport {AddProjectDialogComponent} from '../utilities/add-project-dialog/add-project-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MessageDialogComponent} from '../utilities/message-dialog/message-dialog.component';\nimport {ConfirmRemovalComponent} from '../utilities/confirm-removal/confirm-removal.component';\n\n@Component({\n  selector: 'app-projects',\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.scss']\n})\nexport class ProjectsComponent implements OnInit {\n  public projects: Project[];\n\n  public userId: string;\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  constructor(private projectService: ProjectService, public dialog: MatDialog) {\n    this.userId = localStorage.getItem('user.id');\n\n    this.getProjects(null, this.userId);\n  }\n\n  ngOnInit() {\n  }\n\n  getProjects(path, userId) {\n    this.projectService.getApiProjects(path, userId).subscribe((response) => {\n      for (const project of response.projects) {\n        this.projectService.setProject(project);\n      }\n\n      this.projects = this.projectService.getProjects();\n    });\n  }\n\n  addProject() {\n    const dialogRef = this.dialog.open(AddProjectDialogComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(project => {\n      this.projectService.createApiProject(project).subscribe((response) => {\n        project.id = response.data.id;\n\n        this.projectService.addUserToProject(project, this.userId).subscribe(() => { });\n\n        this.projects.unshift(project);\n      });\n    });\n  }\n\n  deleteProject(project: Project) {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the project '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.projectService.deleteApiProject(project).subscribe(() => {\n          for (let i = 0; i < this.projects.length; i++) {\n            if (this.projects[i].id === project.id) {\n              this.projects.splice(i, 1);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  turnPage(project) {\n    if (project.pageIndex < project.previousPageIndex) {\n      this.getProjects(this.previousPage, this.userId);\n    } else if (project.pageIndex > project.previousPageIndex) {\n      this.getProjects(this.nextPage, this.userId);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/_cards.scss';\n@import '../../styles/_drawer-side.scss';\n@import '../../styles/_sections.scss';\n",
                    "styleUrl": "./projects.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container>\n  <div class=\"app-body-content\">\n    <div class=\"app-content-toolbar\">\n      <h1>Projects</h1>\n      <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"addProject()\">add</button>\n    </div>\n\n    <div class=\"app-cards-container\">\n      <app-project-card\n        *ngFor=\"let project of projects\"\n        [project]=\"project\"\n        [canDelete]=\"true\"\n        (removeProject)=\"deleteProject(project)\"\n        class=\"app-card\">\n      </app-project-card>\n    </div>\n\n    <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n  </div>\n</mat-sidenav-container>\n"
        },
        {
            "name": "QuickAuthorComponent",
            "id": "component-QuickAuthorComponent-8f28b46edeb8996d2ac90a81c3811ae7",
            "file": "src/app/manager/authors/quick-author/quick-author.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-author",
            "styleUrls": [
                "./quick-author.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-author.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorFirstNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorFirstNameFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorFirstNameFilteredOptions",
                    "type": "Observable<Author[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorLastNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorLastNameFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorLastNameFilteredOptions",
                    "type": "Observable<Author[]>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<QuickAuthorComponent>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchAuthors",
                    "defaultValue": "[]",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterAuthorsFirstName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Author[]",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterAuthorsLastName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Author[]",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "displayAuthorFirstName",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayAuthorLastName",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "saveAuthorFirstName",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveAuthorLastName",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport {AuthorService} from '../../../services/author.service';\nimport {Author} from '../../../models/author';\nimport {Observable} from 'rxjs';\nimport {FormControl} from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Sleep} from '../../../utilities/sleep';\n\n@Component({\n  selector: 'app-quick-author',\n  templateUrl: './quick-author.component.html',\n  styleUrls: ['./quick-author.component.scss']\n})\nexport class QuickAuthorComponent implements OnInit, AfterViewInit {\n  public searchAuthors: Author[] = [];\n\n  public authorFirstNameAutocompleteControl = new FormControl();\n  public authorFirstNameFilteredOptions: Observable<Author[]>;\n  public authorFirstNameFieldDisplayValue: string;\n\n  public authorLastNameAutocompleteControl = new FormControl();\n  public authorLastNameFilteredOptions: Observable<Author[]>;\n  public authorLastNameFieldDisplayValue: string;\n\n  public author: Author;\n\n  constructor(private authorService: AuthorService,\n              public dialogRef: MatDialogRef<QuickAuthorComponent>) {\n\n    this.author = new Author();\n    this.author.initializeAuthor();\n\n    this.authorService.getApiAuthors('/authors?page[size]=0&fields[author]=first_name,last_name&sort=last_name')\n      .subscribe(response => {\n\n      this.searchAuthors = response.authors;\n\n      this.authorFirstNameFilteredOptions = this.authorFirstNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(author => this._filterAuthorsFirstName(author))\n      );\n\n      this.authorLastNameFilteredOptions = this.authorLastNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(author => this._filterAuthorsLastName(author))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveAuthorFirstName(value) {\n    if (value) {\n      this.author.firstName = value;\n    } else {\n      this.author.firstName = this.authorFirstNameAutocompleteControl.value;\n    }\n  }\n\n  saveAuthorLastName(value) {\n    if (value) {\n      this.author.lastName = value;\n    } else {\n      this.author.lastName = this.authorFirstNameAutocompleteControl.value;\n    }\n  }\n\n  displayAuthorFirstName(author: Author) {\n    if (author) {\n      this.authorFirstNameFieldDisplayValue = '';\n\n      if (author.firstName) {\n        this.authorFirstNameFieldDisplayValue = author.firstName;\n      }\n    }\n\n    return this.authorFirstNameFieldDisplayValue;\n  }\n\n  displayAuthorLastName(author: Author) {\n    if (author) {\n      this.authorLastNameFieldDisplayValue = '';\n\n      if (author.lastName) {\n        this.authorLastNameFieldDisplayValue = author.lastName;\n      }\n    }\n\n    return this.authorLastNameFieldDisplayValue;\n  }\n\n  private _filterAuthorsFirstName(filterValue: any): Author[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchAuthors.filter(author => {\n        if (author.firstName) {\n          return author.firstName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterAuthorsLastName(filterValue: any): Author[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchAuthors.filter(author => {\n        if (author.lastName) {\n          return author.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    document.getElementById('author_first_name').focus();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_drawer-side.scss';\n@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./quick-author.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authorService",
                        "type": "AuthorService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickAuthorComponent>"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "authorService",
                        "type": "AuthorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickAuthorComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<form #authorForm=\"ngForm\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-title\">\n      <div class=\"app-drawer-subheading\">New Author</div>\n    </div>\n    <div class=\"app-drawer-tools\">\n      <button mat-icon-button type=\"button\" class=\"material-icons\" [mat-dialog-close]=\"author\">save</button>\n      <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n    </div>\n  </div>\n\n  <div class=\"app-drawer-content\">\n    <section class=\"app-section\">\n      <mat-form-field style=\"width: 33%\">\n        <input\n          type=\"search\"\n          placeholder=\"First Name\"\n          matInput\n          #authorFirstNameField\n          name=\"author_first_name\"\n          id=\"author_first_name\"\n          (focusout)=\"saveAuthorFirstName(authorFirstNameField.value)\"\n          [formControl]=\"authorFirstNameAutocompleteControl\"\n          [matAutocomplete]=\"authorFirstNameAutoComplete\">\n\n        <mat-autocomplete #authorFirstNameAutoComplete=\"matAutocomplete\" [displayWith]=\"displayAuthorFirstName\" (optionSelected)=\"saveAuthorFirstName(null)\">\n          <mat-option *ngFor=\"let author of authorFirstNameFilteredOptions | async\" [value]=\"author.firstName\">\n            <span *ngIf=\"author.firstName\">{{author.firstName}} </span><span *ngIf=\"author.lastName\">{{author.lastName}}</span>\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n\n      <mat-form-field style=\"width: 33%\">\n        <input\n          matInput\n          type=\"search\"\n          placeholder=\"Middle Name\"\n          name=\"author_middle_name\"\n          #authorFirstName=\"ngModel\"\n          [(ngModel)]=\"author.middleName\" />\n      </mat-form-field>\n\n      <mat-form-field>\n        <input\n          type=\"search\"\n          placeholder=\"Last Name\"\n          matInput\n          name=\"author_last_name\"\n          #authorLastNameField\n          (focusout)=\"saveAuthorLastName(authorLastNameField.value)\"\n          [formControl]=\"authorLastNameAutocompleteControl\"\n          [matAutocomplete]=\"authorLastNameAutoComplete\">\n\n        <mat-autocomplete #authorLastNameAutoComplete=\"matAutocomplete\" [displayWith]=\"displayAuthorLastName\" (optionSelected)=\"saveAuthorLastName(null)\">\n          <mat-option *ngFor=\"let author of authorLastNameFilteredOptions | async\" [value]=\"author.lastName\">\n            <span *ngIf=\"author.firstName\">{{author.firstName}} </span><span *ngIf=\"author.lastName\">{{author.lastName}}</span>\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </section>\n  </div>\n</form>\n"
        },
        {
            "name": "QuickBrainstormTopicComponent",
            "id": "component-QuickBrainstormTopicComponent-8603fc3a55c5a79e95091464174cf6ec",
            "file": "src/app/brainstorms/brainstorm/quick-brainstorm-topic/quick-brainstorm-topic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-brainstorm-topic",
            "styleUrls": [
                "./quick-brainstorm-topic.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-brainstorm-topic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brainstormTopic",
                    "type": "BrainstormTopic",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<QuickBrainstormTopicComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport {Sleep} from '../../../utilities/sleep';\nimport {BrainstormTopic} from '../../../models/brainstorm-topic';\n\n@Component({\n  selector: 'app-quick-brainstorm-topic',\n  templateUrl: './quick-brainstorm-topic.component.html',\n  styleUrls: ['./quick-brainstorm-topic.component.scss']\n})\nexport class QuickBrainstormTopicComponent implements OnInit, AfterViewInit {\n  public brainstormTopic: BrainstormTopic;\n\n  constructor(public dialogRef: MatDialogRef<QuickBrainstormTopicComponent>) {\n    this.brainstormTopic = new BrainstormTopic();\n    this.brainstormTopic.initializeNewTopic();\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    document.getElementById('brainstorm_topic_label').focus();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./quick-brainstorm-topic.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickBrainstormTopicComponent>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickBrainstormTopicComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<form #brainstormTopicForm=\"ngForm\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-title\">\n      <div class=\"app-drawer-subheading\">New Brainstorm Topic</div>\n    </div>\n    <div class=\"app-drawer-tools\">\n      <button mat-icon-button type=\"button\" class=\"material-icons\" [mat-dialog-close]=\"brainstormTopic\">save</button>\n      <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n    </div>\n  </div>\n\n  <div class=\"app-drawer-content\">\n    <section class=\"app-section\">\n      <mat-form-field style=\"width: 100%\">\n        <input\n          matInput\n          placeholder=\"Label\"\n          name=\"brainstorm_topic_label\"\n          id=\"brainstorm_topic_label\"\n          #brainstormTitle=\"ngModel\"\n          [(ngModel)]=\"brainstormTopic.label\" />\n      </mat-form-field>\n    </section>\n  </div>\n</form>\n"
        },
        {
            "name": "QuickEssayComponent",
            "id": "component-QuickEssayComponent-3f51d7926eb0960c1788d8fb79bc67a5",
            "file": "src/app/essays/quick-essay/quick-essay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-essay",
            "styleUrls": [
                "./quick-essay.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-essay.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<QuickEssayComponent>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essay",
                    "type": "Essay",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTitleAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTitleFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTitleFilteredOptions",
                    "type": "Observable<Essay[]>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "essayTypes",
                    "type": "EssayType[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "returnData",
                    "type": "QuickEssayReturnData",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchEssays",
                    "defaultValue": "[]",
                    "type": "Essay[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterEssayTitle",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Essay[]",
                    "typeParameters": [],
                    "line": 122,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "displayEssayName",
                    "args": [
                        {
                            "name": "essay",
                            "type": "Essay"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "Essay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "saveExistingEssay",
                    "args": [
                        {
                            "name": "essay",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "essay",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewEssay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "selectEssayType",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Essay} from '../../models/essays/essay';\nimport {Sleep} from '../../utilities/sleep';\nimport {EssayType} from '../../models/essays/essay-type';\nimport {EssayService} from '../../services/essay.service';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickEssayReturnData {\n  essay: Essay;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-essay',\n  templateUrl: './quick-essay.component.html',\n  styleUrls: ['./quick-essay.component.scss']\n})\nexport class QuickEssayComponent implements OnInit, AfterViewInit {\n  public essay: Essay;\n\n  public essayTypes: EssayType[];\n\n  public searchEssays: Essay[] = [];\n\n  public essayTitleAutocompleteControl = new FormControl();\n  public essayTitleFilteredOptions: Observable<Essay[]>;\n  public essayTitleFieldDisplayValue: string;\n\n  private userId: string;\n\n  private returnData: QuickEssayReturnData;\n\n  constructor(public dialogRef: MatDialogRef<QuickEssayComponent>,\n              private essayService: EssayService,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    this.userId = localStorage.getItem('user.id');\n\n    this.essayTypes = [];\n\n    this.returnData = new QuickEssayReturnData;\n\n    this.essay = new Essay();\n    this.essay.initializeNewEssay();\n\n    this.essayService.getApiEssayTypes().subscribe((response) => {\n      for (const type of response.data) {\n        const newType = new EssayType();\n        newType.initializeNewEssayType();\n\n        newType.mapEssayType(type);\n\n        this.essayService.setEssayType(newType);\n      }\n\n      this.essayTypes = this.essayService.getEssayTypes();\n    });\n\n    this.essayService.getApiEssays(\n      '/essay_users',\n      this.userId,\n      '0',\n      null,\n      null,\n      false,\n      null,\n      false).subscribe(response => {\n\n      this.searchEssays = response.essays;\n\n      this.essayTitleFilteredOptions = this.essayTitleAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(essay => this._filterEssayTitle(essay))\n      );\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingEssay(essay) {\n    this.returnData.essay = essay;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewEssay() {\n    this.returnData.essay = this.essay;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  displayEssayName(essay: Essay) {\n    if (essay) {\n      this.essayTitleFieldDisplayValue = '';\n\n      if (essay.title) {\n        this.essayTitleFieldDisplayValue = essay.title;\n      }\n    }\n\n    return this.essayTitleFieldDisplayValue;\n  }\n\n  private _filterEssayTitle(filterValue: any): Essay[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchEssays.filter(essay => {\n\n        if (essay.title) {\n          return essay.title.toLowerCase().includes(filterValue);\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n\n  selectEssayType(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_essay_label').focus();\n    } catch(e) {\n      document.getElementById('essay_label').focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./quick-essay.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickEssayComponent>"
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickEssayComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "essayService",
                        "type": "EssayService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<form #essayForm=\"ngForm\">\n  <div *ngIf=\"data.showExisting\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Existing Essay</div>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Essay Title\"\n            matInput\n            #essayTitleField\n            name=\"existing_essay_label\"\n            id=\"existing_essay_label\"\n            [formControl]=\"essayTitleAutocompleteControl\"\n            [matAutocomplete]=\"essayTitleAutoComplete\">\n\n          <mat-autocomplete autoActiveFirstOption #essayTitleAutoComplete=\"matAutocomplete\" [displayWith]=\"displayEssayName\" (optionSelected)=\"saveExistingEssay($event.option.value)\">\n            <mat-option *ngFor=\"let essayOption of essayTitleFilteredOptions | async\" [value]=\"essayOption\">\n              <span *ngIf=\"essayOption.title\">{{essayOption.title}} </span>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n\n  <div *ngIf=\"data.showNew && data.showExisting\" class=\"app-add-object-overlay\">\n    <div>OR</div>\n  </div>\n\n  <div *ngIf=\"data.showNew\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">New Essay</div>\n      </div>\n      <div class=\"app-drawer-tools\">\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"saveNewEssay()\">save</button>\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Title\"\n            matInput\n            #essayLabelField\n            name=\"essay_label\"\n            id=\"essay_label\"\n            [(ngModel)]=\"essay.title\" />\n        </mat-form-field>\n\n        <mat-form-field class=\"app-field-era\">\n          <mat-label>Essay Type</mat-label>\n          <mat-select [(ngModel)]=\"essay.type\" name=\"essay_type\" [compareWith]=\"selectEssayType\">\n            <mat-option [value]=\"null\"></mat-option>\n            <mat-option *ngFor=\"let type of essayTypes\" [value]=\"type\">{{type.label}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "QuickEventComponent",
            "id": "component-QuickEventComponent-bf5a0608f2d9639bde0b76328cc03fdf",
            "file": "src/app/manager/events/quick-event/quick-event.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-event",
            "styleUrls": [
                "./quick-event.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-event.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<QuickEventComponent>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eras",
                    "defaultValue": "[]",
                    "type": "Era[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "event",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventTitleAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventTitleFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventTitleFilteredOptions",
                    "type": "Observable<Event[]>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "returnData",
                    "type": "QuickEventReturnData",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchEvents",
                    "defaultValue": "[]",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesFilteredOptions",
                    "type": "Observable<Source[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterEventsTitle",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Event[]",
                    "typeParameters": [],
                    "line": 180,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterSources",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Source[]",
                    "typeParameters": [],
                    "line": 169,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "displayEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 157,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displaySource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 145,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "saveEventTitle",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveExistingEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138
                },
                {
                    "name": "saveSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Sleep} from '../../../utilities/sleep';\n\nimport {SourceService} from '../../../services/source.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\n\nimport {Source} from '../../../models/source';\nimport {Event} from '../../../models/events/event';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\nimport {EventService} from '../../../services/event.service';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickEventReturnData {\n  event: Event;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-event',\n  templateUrl: './quick-event.component.html',\n  styleUrls: ['./quick-event.component.scss']\n})\nexport class QuickEventComponent implements OnInit, AfterViewInit {\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  public searchEvents: Event[] = [];\n  public eventTitleAutocompleteControl = new FormControl();\n  public eventTitleFilteredOptions: Observable<Event[]>;\n  public eventTitleFieldDisplayValue: string;\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n  public sources: Source[] = [];\n\n  public event: Event;\n\n  private returnData: QuickEventReturnData;\n\n  constructor(private eventService: EventService,\n              private sourceService: SourceService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData,\n              public dialogRef: MatDialogRef<QuickEventComponent>) {\n\n    this.event = new Event();\n    this.event.initializeNewEvent();\n\n    this.returnData = new QuickEventReturnData();\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        const newEra = new Era().mapEra(era);\n\n        // set to AD so that drop-downs auto populate with the value.\n        if (newEra.label === 'AD') {\n          this.event.startEra = newEra;\n          this.event.endEra = newEra;\n        }\n\n        this.eras.push(newEra);\n      }\n    });\n\n    this.monthService.getMonths().subscribe(months => {\n      for (const month of months.data) {\n        this.months.push(new Month().mapMonth(month));\n      }\n    });\n\n    this.sourceService.getApiSources('/references?page[size]=0&fields[reference]=title,sub_title').subscribe(sources => {\n      for (const source of sources.sources) {\n        this.sourceService.setSource(source);\n      }\n\n      this.sources = this.sourceService.getSources();\n\n      this.sourcesFilteredOptions = this.sourcesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(source => this._filterSources(source))\n      );\n    });\n\n    this.eventService.getApiEvents('/events?page[size]=0&fields[event]=label',\n      null, null, false).subscribe(response => {\n      this.searchEvents = response.events;\n\n      this.eventTitleFilteredOptions = this.eventTitleAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(event => this._filterEventsTitle(event))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveSource() {\n    this.event.source = this.sourcesAutocompleteControl.value;\n  }\n\n  saveEventTitle(value) {\n    if (value) {\n      this.event.label = value;\n    } else {\n      this.event.label = this.eventTitleAutocompleteControl.value;\n    }\n  }\n\n  saveExistingEvent(event: Event) {\n    this.returnData.event = event;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewEvent() {\n    this.returnData.event = this.event;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  displaySource(source: Source) {\n    if (source) {\n      this.sourceFieldDisplayValue = source.title;\n\n      if (source.subTitle) {\n        this.sourceFieldDisplayValue = this.sourceFieldDisplayValue + ': ' + source.subTitle;\n      }\n    }\n\n    return this.sourceFieldDisplayValue;\n  }\n\n  displayEvent(event: Event) {\n    if (event) {\n      this.eventTitleFieldDisplayValue = '';\n\n      if (event.label) {\n        this.eventTitleFieldDisplayValue = event.label;\n      }\n    }\n\n    return this.eventTitleFieldDisplayValue;\n  }\n\n  private _filterSources(filterValue: any): Source[] {\n    // when a source is actually selected the value is changed to the source itself. Do not filter if that is the case.\n    if (!filterValue.id) {\n      filterValue = filterValue.toLowerCase();\n\n      return this.sources.filter(source => {\n        return source.title.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n\n  private _filterEventsTitle(filterValue: any): Event[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchEvents.filter(event => {\n        if (event.label) {\n          return event.label.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('existing_event_title').focus();\n    } catch(e) {\n      document.getElementById('event_label').focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_drawer-side.scss';\n@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./quick-event.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    },
                    {
                        "name": "eraService",
                        "type": "EraService"
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickEventComponent>"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eraService",
                        "type": "EraService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickEventComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<form #eventForm=\"ngForm\">\n  <div *ngIf=\"data.showExisting\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Existing Event</div>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            matInput\n            #existingEventTitleField\n            name=\"existing_event_title\"\n            id=\"existing_event_title\"\n            [formControl]=\"eventTitleAutocompleteControl\"\n            [matAutocomplete]=\"existingEventTitleAutoComplete\">\n\n          <mat-autocomplete autoActiveFirstOption #existingEventTitleAutoComplete=\"matAutocomplete\" [displayWith]=\"displayEvent\" (optionSelected)=\"saveExistingEvent($event.option.value)\">\n            <mat-option *ngFor=\"let event of eventTitleFilteredOptions | async\" [value]=\"event\">\n              {{event.label}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n\n  <div *ngIf=\"data.showNew && data.showExisting\" class=\"app-add-object-overlay\">\n    <div>OR</div>\n  </div>\n\n  <div *ngIf=\"data.showNew\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">New Event</div>\n      </div>\n      <div class=\"app-drawer-tools\">\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"saveNewEvent()\">save</button>\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Title\"\n            matInput\n            #evenLabelField\n            name=\"event_label\"\n            id=\"event_label\"\n            (focusout)=\"saveEventTitle(evenLabelField.value)\"\n            [formControl]=\"eventTitleAutocompleteControl\"\n            [matAutocomplete]=\"eventTitleAutoComplete\">\n\n          <mat-autocomplete #eventTitleAutoComplete=\"matAutocomplete\" [displayWith]=\"displayEvent\" (optionSelected)=\"saveEventTitle(null)\">\n            <mat-option *ngFor=\"let event of eventTitleFilteredOptions | async\" [value]=\"event\">\n              {{event.label}}\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n\n      <section class=\"app-section inline\">\n        <label>Beginning</label>\n\n        <div class=\"app-field-group\">\n          <mat-form-field class=\"app-field-era\">\n            <mat-label>Era</mat-label>\n            <mat-select [(ngModel)]=\"event.startEra\" name=\"event_start_era\" required>\n              <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"app-field-year\">\n            <input\n              matInput\n              placeholder=\"Year\"\n              name=\"event_start_year\"\n              required\n              [(ngModel)]=\"event.startYear\"/>\n          </mat-form-field>\n        </div>\n\n      </section>\n\n      <section class=\"app-section inline\">\n        <label>Ending</label>\n        <div class=\"app-field-group\">\n          <mat-form-field class=\"app-field-era\">\n            <mat-label>Era</mat-label>\n            <mat-select [(ngModel)]=\"event.endEra\" name=\"event_end_era\">\n              <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"app-field-year\">\n            <input\n              matInput\n              placeholder=\"Year\"\n              name=\"event_end_year\"\n              [(ngModel)]=\"event.endYear\" />\n          </mat-form-field>\n        </div>\n      </section>\n\n      <section class=\"app-section inline\">\n        <label>Source</label>\n        <mat-form-field class=\"app-field-reference\">\n          <input\n            type=\"text\"\n            placeholder=\"Select...\"\n            aria-label=\"Source\"\n            matInput\n            [formControl]=\"sourcesAutocompleteControl\"\n            [matAutocomplete]=\"auto\">\n\n          <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" [displayWith]=\"displaySource\" (optionSelected)=\"saveSource()\">\n            <mat-option *ngFor=\"let source of sourcesFilteredOptions | async\" [value]=\"source\">\n              {{source.title}} <span *ngIf=\"source.subTitle\">: {{source.subTitle}}</span>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "QuickPersonComponent",
            "id": "component-QuickPersonComponent-c4a9d10c921695665e5d288ebe8ebd19",
            "file": "src/app/manager/persons/quick-person/quick-person.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-person",
            "styleUrls": [
                "./quick-person.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-person.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<QuickPersonComponent>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eras",
                    "defaultValue": "[]",
                    "type": "Era[]",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "person",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFirstNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFirstNameFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personFirstNameFilteredOptions",
                    "type": "Observable<Person[]>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personLastNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personLastNameFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personLastNameFilteredOptions",
                    "type": "Observable<Person[]>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personNameAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personNameFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "personNameFilteredOptions",
                    "type": "Observable<Person[]>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "returnData",
                    "type": "QuickPersonReturnData",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchPersons",
                    "defaultValue": "[]",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterPersonsFirstName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person[]",
                    "typeParameters": [],
                    "line": 203,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterPersonsLastName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person[]",
                    "typeParameters": [],
                    "line": 217,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_filterPersonsName",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person[]",
                    "typeParameters": [],
                    "line": 189,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 231,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "displayPersonFirstName",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayPersonLastName",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 177,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayPersonName",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "saveExistingPerson",
                    "args": [
                        {
                            "name": "person",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130
                },
                {
                    "name": "savePersonFirstName",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "savePersonLastName",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, AfterViewInit, Inject} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {Sleep} from '../../../utilities/sleep';\n\nimport {Source} from '../../../models/source';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\nimport {Person} from '../../../models/persons/person';\n\nimport {PersonService} from '../../../services/person.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\n\nexport interface DialogData {\n  showExisting: boolean;\n  showNew: boolean;\n}\n\nclass QuickPersonReturnData {\n  person: Person;\n  isExisting: boolean;\n}\n\n@Component({\n  selector: 'app-quick-person',\n  templateUrl: './quick-person.component.html',\n  styleUrls: ['./quick-person.component.scss']\n})\nexport class QuickPersonComponent implements OnInit, AfterViewInit {\n  public searchPersons: Person[] = [];\n\n  public personNameAutocompleteControl = new FormControl();\n  public personNameFilteredOptions: Observable<Person[]>;\n  public personNameFieldDisplayValue: string;\n\n  public personFirstNameAutocompleteControl = new FormControl();\n  public personFirstNameFilteredOptions: Observable<Person[]>;\n  public personFirstNameFieldDisplayValue: string;\n\n  public personLastNameAutocompleteControl = new FormControl();\n  public personLastNameFilteredOptions: Observable<Person[]>;\n  public personLastNameFieldDisplayValue: string;\n\n  public eras: Era[] = [];\n  public months: Month[] = [];\n  public sources: Source[] = [];\n\n  public person: Person;\n\n  private returnData: QuickPersonReturnData;\n\n  constructor(private personService: PersonService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              public dialogRef: MatDialogRef<QuickPersonComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n\n    this.returnData = new QuickPersonReturnData();\n\n    this.person = new Person();\n    this.person.initializeNewPerson();\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        const newEra = new Era().mapEra(era);\n\n        // set to AD so that drop-downs auto populate with the value.\n        if (newEra.label === 'AD') {\n          this.person.birthEra = newEra;\n          this.person.deathEra = newEra;\n        }\n\n        this.eras.push(newEra);\n      }\n    });\n\n    this.monthService.getMonths().subscribe(months => {\n      for (const month of months.data) {\n        this.months.push(new Month().mapMonth(month));\n      }\n    });\n\n    this.personService.getApiPersons(\n      '/persons?page[size]=0&fields[person]=first_name,last_name,birth_year,birth_era,death_year,death_era&sort=last_name',\n      null, null, false)\n      .subscribe(response => {\n\n      this.searchPersons = response.persons;\n\n      this.personNameFilteredOptions = this.personNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsName(person))\n      );\n\n      this.personFirstNameFilteredOptions = this.personFirstNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsFirstName(person))\n      );\n\n      this.personLastNameFilteredOptions = this.personLastNameAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(person => this._filterPersonsLastName(person))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveExistingPerson(person) {\n    this.returnData.person = person;\n    this.returnData.isExisting = true;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  saveNewPerson() {\n    this.returnData.person = this.person;\n    this.returnData.isExisting = false;\n\n    this.dialogRef.close(this.returnData);\n  }\n\n  savePersonFirstName(value) {\n    if (value) {\n      this.person.firstName = value;\n    }\n  }\n\n  savePersonLastName(value) {\n    if (value) {\n      this.person.lastName = value;\n    }\n  }\n\n  displayPersonName(person: Person) {\n    if (person) {\n      this.personNameFieldDisplayValue = '';\n\n      if (person.firstName) {\n        this.personNameFieldDisplayValue = person.firstName;\n      }\n\n      if (person.lastName) {\n        this.personNameFieldDisplayValue = this.personNameFieldDisplayValue + ' ' + person.lastName;\n      }\n    }\n\n    return this.personFirstNameFieldDisplayValue;\n  }\n\n  displayPersonFirstName(person: Person) {\n    if (person) {\n      this.personFirstNameFieldDisplayValue = '';\n\n      if (person.firstName) {\n        this.personFirstNameFieldDisplayValue = person.firstName;\n      }\n    }\n\n    return this.personFirstNameFieldDisplayValue;\n  }\n\n  displayPersonLastName(person: Person) {\n    if (person) {\n      this.personLastNameFieldDisplayValue = '';\n\n      if (person.lastName) {\n        this.personLastNameFieldDisplayValue = person.lastName;\n      }\n    }\n\n    return this.personLastNameFieldDisplayValue;\n  }\n\n  private _filterPersonsName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.firstName || person.lastName) {\n          return person.firstName.toLowerCase().includes(filterValue) || person.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterPersonsFirstName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.firstName) {\n          return person.firstName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  private _filterPersonsLastName(filterValue: any): Person[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.searchPersons.filter(person => {\n        if (person.lastName) {\n          return person.lastName.toLowerCase().includes(filterValue);\n        } else {\n          return '';\n        }\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    try {\n      document.getElementById('person_name').focus();\n    } catch(e) {\n      document.getElementById('person_first_name').focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_drawer-side.scss';\n@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./quick-person.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "personService",
                        "type": "PersonService"
                    },
                    {
                        "name": "eraService",
                        "type": "EraService"
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickPersonComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eraService",
                        "type": "EraService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickPersonComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<form #personForm=\"ngForm\">\n  <div *ngIf=\"data.showExisting\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Existing Person</div>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 100%\">\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            matInput\n            #personNameField\n            name=\"person_name\"\n            id=\"person_name\"\n            [formControl]=\"personNameAutocompleteControl\"\n            [matAutocomplete]=\"personNameAutoComplete\">\n\n          <mat-autocomplete autoActiveFirstOption #personNameAutoComplete=\"matAutocomplete\" [displayWith]=\"displayPersonName\" (optionSelected)=\"saveExistingPerson($event.option.value)\">\n            <mat-option *ngFor=\"let personOption of personNameFilteredOptions | async\" [value]=\"personOption\">\n              <span *ngIf=\"personOption.firstName\">{{personOption.firstName}} </span><span *ngIf=\"personOption.lastName\">{{personOption.lastName}}</span>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n    </div>\n  </div>\n\n  <div *ngIf=\"data.showNew && data.showExisting\" class=\"app-add-object-overlay\">\n    <div>OR</div>\n  </div>\n\n  <div *ngIf=\"data.showNew\">\n    <div class=\"app-drawer-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">New Person</div>\n      </div>\n\n      <div class=\"app-drawer-tools\">\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"saveNewPerson()\">save</button>\n        <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n      </div>\n    </div>\n\n    <div class=\"app-add-object-overlay\">\n      <section class=\"app-section\">\n        <mat-form-field style=\"width: 33%\">\n          <input\n            type=\"text\"\n            placeholder=\"First Name\"\n            matInput\n            #personFirstNameField\n            name=\"person_first_name\"\n            id=\"person_first_name\"\n            required\n            (focusout)=\"savePersonFirstName(personFirstNameField.value)\"\n            [formControl]=\"personFirstNameAutocompleteControl\"\n            [matAutocomplete]=\"personFirstNameAutoComplete\">\n\n          <mat-autocomplete #personFirstNameAutoComplete=\"matAutocomplete\" [displayWith]=\"displayPersonFirstName\" (optionSelected)=\"savePersonFirstName(null)\">\n            <mat-option *ngFor=\"let personOption of personFirstNameFilteredOptions | async\" [value]=\"person.firstName\">\n              <span *ngIf=\"personOption.firstName\">{{personOption.firstName}} </span><span *ngIf=\"personOption.lastName\">{{personOption.lastName}}</span>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n\n        <mat-form-field style=\"width: 33%\">\n          <input\n            matInput\n            placeholder=\"Middle Name\"\n            name=\"person_middle_name\"\n            #personFirstName=\"ngModel\"\n            [(ngModel)]=\"person.middleName\" />\n        </mat-form-field>\n\n        <mat-form-field>\n          <input\n            type=\"text\"\n            placeholder=\"Last Name\"\n            matInput\n            name=\"person_last_name\"\n            #personLastNameField\n            (focusout)=\"savePersonLastName(personLastNameField.value)\"\n            [formControl]=\"personLastNameAutocompleteControl\"\n            [matAutocomplete]=\"personLastNameAutoComplete\">\n\n          <mat-autocomplete #personLastNameAutoComplete=\"matAutocomplete\" [displayWith]=\"displayPersonLastName\" (optionSelected)=\"savePersonLastName(null)\">\n            <mat-option *ngFor=\"let person of personLastNameFilteredOptions | async\" [value]=\"person.lastName\">\n              <span *ngIf=\"person.firstName\">{{person.firstName}} </span><span *ngIf=\"person.lastName\">{{person.lastName}}</span>\n            </mat-option>\n          </mat-autocomplete>\n        </mat-form-field>\n      </section>\n\n      <section class=\"app-section inline\">\n        <label>Birth</label>\n\n        <div class=\"app-field-group\">\n          <mat-form-field class=\"app-field-era\">\n            <mat-label>Era</mat-label>\n            <mat-select [(ngModel)]=\"person.birthEra\" name=\"person_birth_era\" required>\n              <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"app-field-year\">\n            <input\n              matInput\n              placeholder=\"Year\"\n              name=\"person_birth_year\"\n              required\n              [(ngModel)]=\"person.birthYear\" />\n          </mat-form-field>\n        </div>\n\n      </section>\n\n      <section class=\"app-section inline\">\n        <label>Death</label>\n        <div class=\"app-field-group\">\n          <mat-form-field class=\"app-field-era\">\n            <mat-label>Era</mat-label>\n            <mat-select [(ngModel)]=\"person.deathEra\" name=\"person_death_era\">\n              <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n          <mat-form-field class=\"app-field-year\">\n            <input\n              matInput\n              placeholder=\"Year\"\n              name=\"person_death_year\"\n              [(ngModel)]=\"person.deathYear\" />\n          </mat-form-field>\n        </div>\n      </section>\n\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "QuickSourceComponent",
            "id": "component-QuickSourceComponent-4f931951f5b3c8b54c9d68a12272349b",
            "file": "src/app/manager/sources/quick-source/quick-source.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-source",
            "styleUrls": [
                "./quick-source.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-source.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<QuickSourceComponent>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchEvents",
                    "defaultValue": "[]",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourcesFilteredOptions",
                    "type": "Observable<Source[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterSources",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Source[]",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "displaySource",
                    "args": [
                        {
                            "name": "source",
                            "type": "Source"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "saveSourceTitle",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {SourceService} from '../../../services/source.service';\n\nimport {Source} from '../../../models/source';\nimport {Sleep} from '../../../utilities/sleep';\n\n@Component({\n  selector: 'app-quick-source',\n  templateUrl: './quick-source.component.html',\n  styleUrls: ['./quick-source.component.scss']\n})\nexport class QuickSourceComponent implements OnInit, AfterViewInit {\n  public sourcesAutocompleteControl = new FormControl();\n  public sourcesFilteredOptions: Observable<Source[]>;\n  public sourceFieldDisplayValue: string;\n\n  public searchEvents: Event[] = [];\n\n  public sources: Source[] = [];\n\n  public source: Source;\n\n  constructor(private sourceService: SourceService,\n              public dialogRef: MatDialogRef<QuickSourceComponent>) {\n\n    this.source = new Source();\n    this.source.initializeSource();\n\n    this.sourceService.getApiSources('/references?page[size]=0&fields[reference]=title,sub_title&sort=title').subscribe(sources => {\n      for (const source of sources.sources) {\n        this.sourceService.setSource(source);\n      }\n\n      this.sources = this.sourceService.getSources();\n\n      this.sourcesFilteredOptions = this.sourcesAutocompleteControl.valueChanges.pipe(\n        startWith(''),\n        map(source => this._filterSources(source))\n      );\n    });\n  }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.activateCreateForm().then();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveSourceTitle(value) {\n    if (value) {\n      this.source.title = value;\n    } else {\n      this.source.title = this.sourcesAutocompleteControl.value;\n    }\n  }\n\n  displaySource(source: Source) {\n    if (source) {\n      this.sourceFieldDisplayValue = source.title;\n\n      if (source.subTitle) {\n        this.sourceFieldDisplayValue = this.sourceFieldDisplayValue + ': ' + source.subTitle;\n      }\n    }\n\n    return this.sourceFieldDisplayValue;\n  }\n\n  private _filterSources(filterValue: any): Source[] {\n    // when a source is actually selected the value is changed to the source itself. Do not filter if that is the case.\n    if (!filterValue.id) {\n      filterValue = filterValue.toLowerCase();\n\n      return this.sources.filter(source => {\n        return source.title.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n\n  async activateCreateForm() {\n    await Sleep.wait(500);\n\n    document.getElementById('source_title').focus();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./quick-source.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickSourceComponent>"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QuickSourceComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<form #sourceForm=\"ngForm\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-title\">\n      <div class=\"app-drawer-subheading\">New Source</div>\n    </div>\n    <div class=\"app-drawer-tools\">\n      <button mat-icon-button type=\"button\" class=\"material-icons\" [mat-dialog-close]=\"source\">save</button>\n      <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n    </div>\n  </div>\n\n  <div class=\"app-drawer-content\">\n    <section class=\"app-section\">\n      <mat-form-field style=\"width: 100%\">\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          matInput\n          #sourceTitleField\n          name=\"source_title\"\n          id=\"source_title\"\n          (focusout)=\"saveSourceTitle(sourceTitleField.value)\"\n          [formControl]=\"sourcesAutocompleteControl\"\n          [matAutocomplete]=\"sourceTitleAutoComplete\">\n\n        <mat-autocomplete #sourceTitleAutoComplete=\"matAutocomplete\" [displayWith]=\"displaySource\" (optionSelected)=\"saveSourceTitle(null)\">\n          <mat-option *ngFor=\"let source of sourcesFilteredOptions | async\" [value]=\"source\">\n            {{source.title}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n\n      <mat-form-field style=\"width: 100%\">\n        <input\n          matInput\n          placeholder=\"Subtitle\"\n          name=\"source_subtitle\"\n          [(ngModel)]=\"source.subTitle\" />\n      </mat-form-field>\n    </section>\n\n    <section class=\"app-section inline\">\n      <label>Beginning</label>\n\n      <div class=\"app-field-group\">\n        <mat-form-field class=\"app-field-year\">\n          <input\n            matInput\n            placeholder=\"Published Year\"\n            name=\"source_published_year\"\n            required\n            [(ngModel)]=\"source.publishedYear\"/>\n        </mat-form-field>\n      </div>\n    </section>\n  </div>\n</form>\n"
        },
        {
            "name": "SourceCardComponent",
            "id": "component-SourceCardComponent-d9854fe376c336be5becfa124a425931",
            "file": "src/app/manager/sources/source-card/source-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-source-card",
            "styleUrls": [
                "./source-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./source-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "source",
                    "line": 11,
                    "type": "Source"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeSource",
                    "line": 14,
                    "type": "EventEmitter<Source>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\n\nimport { Source } from '../../../models/source';\n\n@Component({\n  selector: 'app-source-card',\n  templateUrl: './source-card.component.html',\n  styleUrls: ['./source-card.component.scss']\n})\nexport class SourceCardComponent implements OnInit {\n  @Input() public source: Source;\n  @Input() public canDelete: boolean;\n\n  @Output() private removeSource: EventEmitter<Source>;\n\n  constructor() {\n    this.removeSource = new EventEmitter<Source>();\n  }\n\n  ngOnInit() {\n  }\n\n  doRemoveSource() {\n    this.removeSource.emit(this.source);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_cards.scss';\n",
                    "styleUrl": "./source-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveSource()\">delete</button>\n\n  <div routerLink=\"/manager/sources/{{source.id}}\">\n    <mat-card-title>\n      {{source.title}}\n\n      <span *ngIf=\"source.subTitle\">\n        <h2>{{source.subTitle}}</h2>\n      </span>\n\n      <span *ngIf=\"source.authors.length\">\n        <h3 *ngFor=\"let author of source.authors\">{{author.firstName}} {{author.lastName}}</h3>\n      </span>\n    </mat-card-title>\n\n    <mat-card-content>\n      <div class=\"mat-card-subtitle\">\n        Published {{source.publishedYear}}\n      </div>\n    </mat-card-content>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "SourceDetailsComponent",
            "id": "component-SourceDetailsComponent-b120923f86804213ef33f12c015dfde3",
            "file": "src/app/manager/sources/source-details/source-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-source-details",
            "styleUrls": [
                "./source-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./source-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorFieldDisplayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorsAutocompleteControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorsFilteredOptions",
                    "type": "Observable<Author[]>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "displayAuthors",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eras",
                    "type": "Era[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddAuthorMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditSourceMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "months",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "note",
                    "type": "SourceNote",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filterAuthors",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Author[]",
                    "typeParameters": [],
                    "line": 281,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activateAddAuthorMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156
                },
                {
                    "name": "activateAddNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146
                },
                {
                    "name": "activateEditSourceMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136
                },
                {
                    "name": "deactivateAddAuthorMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160
                },
                {
                    "name": "deactivateAddNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152
                },
                {
                    "name": "deactivateEditSourceMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "SourceNote"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "SourceNote",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 269,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editSource",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126
                },
                {
                    "name": "exportNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219
                },
                {
                    "name": "initializeNewNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101
                },
                {
                    "name": "loadExportNote",
                    "args": [
                        {
                            "name": "note",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeAuthorsDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "removeAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveAuthor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 201
                },
                {
                    "name": "saveNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180
                },
                {
                    "name": "selectEra",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 172,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectMonth",
                    "args": [
                        {
                            "name": "option",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {ActivatedRoute} from '@angular/router';\n\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nimport {SourceService} from '../../../services/source.service';\nimport {EraService} from '../../../services/era.service';\nimport {MonthService} from '../../../services/month.service';\nimport {AuthorService} from '../../../services/author.service';\n\nimport {Source} from '../../../models/source';\nimport {SourceNote} from '../../../models/source-note';\nimport {Era} from '../../../models/era';\nimport {Month} from '../../../models/month';\nimport {Author} from '../../../models/author';\nimport {SourceNoteExportComponent} from '../source-note-export/source-note-export.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport {BrainstormService} from '../../../services/brainstorm.service';\nimport {BrainstormThought} from '../../../models/brainstorm-thought';\n\n@Component({\n  selector: 'app-source-details',\n  templateUrl: './source-details.component.html',\n  styleUrls: ['./source-details.component.scss']\n})\nexport class SourceDetailsComponent implements OnInit {\n  public source: Source;\n  public note: SourceNote;\n  public author: Author;\n\n  public eras: Era[];\n  public months: Month[];\n\n  public displayAuthors: string;\n\n  public isAddNoteMode: boolean;\n  public isAddAuthorMode: boolean;\n  public isEditSourceMode: boolean;\n\n  public authors: Author[];\n\n  public authorsAutocompleteControl = new FormControl();\n  public authorsFilteredOptions: Observable<Author[]>;\n  public authorFieldDisplayValue: string;\n\n  constructor(private route: ActivatedRoute,\n              private sourceService: SourceService,\n              private eraService: EraService,\n              private monthService: MonthService,\n              private authorService: AuthorService,\n              private brainstormService: BrainstormService,\n              public dialog: MatDialog) {\n\n    const sourceId = this.route.snapshot.paramMap.get('id');\n\n    this.isAddNoteMode = false;\n    this.isEditSourceMode = false;\n    this.isAddAuthorMode = true;\n\n    this.eras = [];\n    this.months = [];\n\n    this.authorService.getApiAuthors('/authors?page[size]=0&fields[author]=first_name,last_name').subscribe(authors => {\n        for (const author of authors.authors) {\n          this.authorService.setAuthor(author);\n        }\n\n        this.authors = this.authorService.getAuthors();\n\n        this.authorsFilteredOptions = this.authorsAutocompleteControl.valueChanges.pipe(\n          startWith(''),\n          map(author => this._filterAuthors(author))\n        );\n      });\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        this.eras.push(new Era().mapEra(era));\n      }\n    });\n\n    this.monthService.getMonths().subscribe(months => {\n      for (const month of months.data) {\n        this.months.push(new Month().mapMonth(month));\n      }\n    });\n\n    this.sourceService.getApiSource(Number.parseInt(sourceId, 10)).subscribe(source => {\n      this.source = source;\n\n      this.sourceService.setSource(this.source);\n\n      this.makeAuthorsDisplay();\n    });\n  }\n\n  ngOnInit() { }\n\n  initializeNewNote() {\n    this.note = new SourceNote();\n    this.note.initializeNote();\n  }\n\n  makeAuthorsDisplay() {\n    this.displayAuthors = '';\n\n    for (const author of this.source.authors) {\n      if (this.displayAuthors.length) {\n        this.displayAuthors = this.displayAuthors + ', ';\n      }\n\n      this.displayAuthors = this.displayAuthors + author.firstName;\n\n      if (author.middleName) {\n        this.displayAuthors = this.displayAuthors + ' ' + author.middleName;\n      }\n\n      if (author.lastName) {\n        this.displayAuthors = this.displayAuthors + ' ' + author.lastName;\n      }\n    }\n  }\n\n  editSource() {\n    return this.sourceService.patchApiSource(this.source).subscribe(() => {\n      this.deactivateEditSourceMode();\n\n      this.makeAuthorsDisplay();\n\n      this.source.formatPublishedDate();\n    });\n  }\n\n  activateEditSourceMode() {\n    this.isEditSourceMode = true;\n  }\n\n  deactivateEditSourceMode() {\n    this.makeAuthorsDisplay();\n\n    this.isEditSourceMode = false;\n  }\n\n  activateAddNoteMode() {\n    this.isAddNoteMode = true;\n\n    this.initializeNewNote();\n  }\n\n  deactivateAddNoteMode() {\n    this.isAddNoteMode = false;\n  }\n\n  activateAddAuthorMode() {\n    this.isAddAuthorMode = true;\n  }\n\n  deactivateAddAuthorMode() {\n    this.isAddAuthorMode = false;\n  }\n\n  selectMonth(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  selectEra(option, value) {\n    if (value && option) {\n      return option.id === value.id;\n    } else {\n      return null;\n    }\n  }\n\n  saveNote() {\n    this.sourceService.createApiSourceNote(this.note, this.source).subscribe(response => {\n      if (!this.source.notes) {\n        this.source.notes = [];\n      }\n\n      this.note.id = response.data.id;\n      this.source.notes.push(this.note);\n\n      this.initializeNewNote();\n\n      this.deactivateAddNoteMode();\n    });\n  }\n\n  deleteNote(note: SourceNote) {\n    this.sourceService.removeApiNote(note).subscribe(() => {\n      SourceService.removeNote(this.source, note);\n    });\n  }\n\n  saveAuthor() {\n    this.author = this.authorsAutocompleteControl.value;\n\n    return this.sourceService.createApiSourceAuthor(this.source, this.author).subscribe(response => {\n      this.author.id = response.data.id;\n\n      this.isAddAuthorMode = false;\n\n      this.source.authors.push(this.author);\n    });\n  }\n\n  removeAuthor(author: Author) {\n    this.sourceService.removeApiSourceAuthor(author).subscribe(() => {\n      this.sourceService.removeAuthor(this.source, author);\n    });\n  }\n\n  exportNotes() {\n    const dialogRef = this.dialog.open(SourceNoteExportComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(brainstorm => {\n      if (brainstorm) {\n        for(let i = 0; i < this.source.notes.length; i++) {\n          let thought: BrainstormThought = new BrainstormThought();\n\n          thought.initializeNewThought();\n          thought.thought = this.source.notes[i].note;\n          thought.position = i;\n          thought.brainstormId = brainstorm.id;\n\n          this.brainstormService.createApiBrainstormThought(thought).subscribe(() => {});\n\n          this.sourceService.createApiSourceNoteBrainstorm(this.source.notes[i], brainstorm).subscribe(() => {\n            this.source.notes[i].exportBrainstorms.push(brainstorm);\n          });\n        }\n      }\n    });\n  }\n\n  loadExportNote(note) {\n    const dialogRef = this.dialog.open(SourceNoteExportComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(brainstorm => {\n      if (brainstorm) {\n        let thought: BrainstormThought = new BrainstormThought();\n\n        thought.initializeNewThought();\n        thought.thought = note.note;\n        thought.position = brainstorm.thoughts.length + 1;\n        thought.brainstormId = brainstorm.id;\n\n        this.brainstormService.createApiBrainstormThought(thought).subscribe(() => {});\n\n        note.exportBrainstorms.push(brainstorm);\n\n        this.sourceService.createApiSourceNoteBrainstorm(note, brainstorm).subscribe(() => {\n          note.exportBrainstorms.push(brainstorm);\n        });\n      }\n    });\n  }\n\n  displayAuthor(author: Author) {\n    if (author) {\n      this.authorFieldDisplayValue = author.firstName;\n\n      if (author.lastName) {\n        this.authorFieldDisplayValue += ' ' + author.lastName;\n      }\n    }\n\n    return this.authorFieldDisplayValue;\n  }\n\n  private _filterAuthors(filterValue: any): Author[] {\n    if (filterValue && typeof filterValue === 'string') {\n      filterValue = filterValue.toLowerCase();\n\n      return this.authors.filter(author => {\n        return author.firstName.toLowerCase().includes(filterValue) || author.lastName.toLowerCase().includes(filterValue);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_sections.scss';\n@import '../../../../styles/_cards.scss';",
                    "styleUrl": "./source-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    },
                    {
                        "name": "eraService",
                        "type": "EraService"
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService"
                    },
                    {
                        "name": "authorService",
                        "type": "AuthorService"
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eraService",
                        "type": "EraService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorService",
                        "type": "AuthorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"source\">\n  <div class=\"app-body-content app-body-darker-canvas\">\n    <div class=\"app-body-content-narrow\">\n      <div class=\"subheading\">\n        Source\n        <button *ngIf=\"!isEditSourceMode\" mat-icon-button class=\"material-icons\" type=\"button\" (click)=\"activateEditSourceMode()\">edit</button>\n      </div>\n\n      <div *ngIf=\"!isEditSourceMode\">\n        <h1 class=\"no-margin-bottom\">{{source.title}}</h1>\n        <h2 class=\"no-margin-bottom\">{{source.subTitle}}</h2>\n\n        <div class=\"heading-meta\">\n          <span *ngIf=\"displayAuthors\">{{displayAuthors}}, </span>\n          <span *ngIf=\"source.publishedYear\">{{source.formattedPublishedDate}}</span>\n        </div>\n      </div>\n\n      <div *ngIf=\"isEditSourceMode\">\n        <form (ngSubmit)=\"editSource()\" #editPersonForm=\"ngForm\">\n          <div class=\"app-drawer-header\">\n            <div class=\"app-drawer-tools\">\n              <button mat-icon-button type=\"submit\" class=\"material-icons\">save</button>\n              <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"deactivateEditSourceMode()\">close</button>\n            </div>\n          </div>\n\n          <div class=\"app-drawer-content\">\n            <section class=\"app-section\">\n              <mat-form-field style=\"width: 100%\">\n                <input\n                  matInput\n                  placeholder=\"Title\"\n                  required\n                  name=\"source_title\"\n                  id=\"source_title\"\n                  #sourceTitle=\"ngModel\"\n                  [(ngModel)]=\"source.title\" />\n              </mat-form-field>\n\n              <mat-form-field style=\"width: 100%\">\n                <input\n                  matInput\n                  placeholder=\"Sub Title\"\n                  name=\"source_sub_title\"\n                  #sourceSubtitle=\"ngModel\"\n                  [(ngModel)]=\"source.subTitle\" />\n              </mat-form-field>\n            </section>\n\n            <section class=\"app-section\">\n              <mat-form-field>\n                <input\n                  matInput\n                  placeholder=\"Published Day\"\n                  name=\"source_published_day\"\n                  [(ngModel)]=\"source.publishedDay\" />\n              </mat-form-field>\n\n              <mat-form-field class=\"app-field-month\">\n                <mat-label>Published Month</mat-label>\n                <mat-select [(ngModel)]=\"source.publishedMonth\" name=\"source_published_month\" [compareWith]=\"selectMonth\">\n                  <mat-option [value]=\"null\"></mat-option>\n                  <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{month.label}}</mat-option>\n                </mat-select>\n              </mat-form-field>\n\n              <mat-form-field class=\"app-field-year\">\n                  <input\n                    matInput\n                    placeholder=\"Published Year\"\n                    name=\"source_published_year\"\n                    [(ngModel)]=\"source.publishedYear\" />\n                </mat-form-field>\n\n              <mat-form-field class=\"app-field-era\">\n                <mat-label>Published Era</mat-label>\n                <mat-select [(ngModel)]=\"source.publishedEra\" name=\"source_published_era\" [compareWith]=\"selectEra\">\n                  <mat-option *ngFor=\"let era of eras\" [value]=\"era\">{{era.label}}</mat-option>\n                </mat-select>\n              </mat-form-field>\n            </section>\n\n            <section class=\"app-section\">\n              <div class=\"app-section-action\">\n                <label>Author<span *ngIf=\"source.authors.length > 1\">s</span></label>\n                <button *ngIf=\"!isAddAuthorMode\" mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"activateAddAuthorMode()\">add</button>\n              </div>\n\n              <div *ngIf=\"isAddAuthorMode\">\n                <form #authorForm=\"ngForm\">\n                  <mat-form-field class=\"app-field-reference\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Author\"\n                      aria-label=\"Author\"\n                      matInput\n                      [formControl]=\"authorsAutocompleteControl\"\n                      [matAutocomplete]=\"auto\">\n\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayAuthor\" (optionSelected)=\"saveAuthor()\">\n                      <mat-option *ngFor=\"let author of authorsFilteredOptions | async\" [value]=\"author\">\n                        {{author.firstName}} <span *ngIf=\"author.lastName\"> {{author.lastName}}</span>\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n\n                  <button mat-flat-button type=\"button\" color=\"secondary\" (click)=\"deactivateAddAuthorMode()\">Cancel</button>\n                </form>\n              </div>\n\n              <app-author-card *ngFor=\"let author of source.authors\"\n                               [author]=\"author\"\n                               [isSourceAttachment]=\"true\"\n                               (removeAuthorFromSource)=\"removeAuthor(author)\">\n              </app-author-card>\n            </section>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n\n  <!-- Notes -->\n  <div class=\"app-body-content\">\n    <div class=\"app-body-content-narrow\">\n\n      <!-- Add a note CTA-->\n      <div class=\"app-content-toolbar margin-bottom\">\n          <h2>Notes</h2>\n          <button mat-flat-button color=\"secondary\" (click)=\"exportNotes()\">-> Export All</button>\n          <button mat-flat-button color=\"secondary\" (click)=\"activateAddNoteMode()\">+ Add a Note</button>\n      </div>\n\n\n      <!-- Add New Note -->\n      <div *ngIf=\"isAddNoteMode\" class=\"app-card-note\">\n        <app-source-details-note\n          [note]=\"note\"\n          [source]=\"source\"\n          [showToolbar]=\"true\"\n          [autoEdit]=\"true\"\n          [isCreate]=\"true\"\n          (createNote)=\"deactivateAddNoteMode()\">\n        </app-source-details-note>\n      </div>\n\n      <!-- Display Notes -->\n      <app-source-details-note\n        *ngFor=\"let note of source.notes\"\n        [note]=\"note\"\n        [source]=\"source\"\n        [showToolbar]=\"true\"\n        (removeNote)=\"deleteNote($event)\"\n        (exportNote)=\"loadExportNote(note)\">\n      </app-source-details-note>\n    </div>\n  </div>\n</div>\n\n\n"
        },
        {
            "name": "SourceDetailsNoteComponent",
            "id": "component-SourceDetailsNoteComponent-f48cac19a841920d2d03678a180f5e9a",
            "file": "src/app/manager/sources/source-details/source-details-note/source-details-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-source-details-note",
            "styleUrls": [
                "./source-details-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./source-details-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoEdit",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "isCreate",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "note",
                    "line": 18,
                    "type": "SourceNote"
                },
                {
                    "name": "showToolbar",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "source",
                    "line": 19,
                    "type": "Source"
                }
            ],
            "outputsClass": [
                {
                    "name": "createNote",
                    "line": 25,
                    "type": "EventEmitter<SourceNote>"
                },
                {
                    "name": "exportNote",
                    "line": 26,
                    "type": "EventEmitter<SourceNote>"
                },
                {
                    "name": "removeNote",
                    "line": 24,
                    "type": "EventEmitter<SourceNote>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateEditNoteMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "doDeleteNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "doExportNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "saveNote",
                    "args": [
                        {
                            "name": "content",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNoteViewMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, Output, OnInit, EventEmitter} from '@angular/core';\n\nimport {MatDialog} from '@angular/material/dialog';\n\nimport {SourceNote} from '../../../../models/source-note';\n\nimport {ConfirmRemovalComponent} from '../../../../utilities/confirm-removal/confirm-removal.component';\n\nimport {SourceService} from '../../../../services/source.service';\nimport {Source} from '../../../../models/source';\n\n@Component({\n  selector: 'app-source-details-note',\n  templateUrl: './source-details-note.component.html',\n  styleUrls: ['./source-details-note.component.scss']\n})\nexport class SourceDetailsNoteComponent implements OnInit {\n  @Input() public note: SourceNote;\n  @Input() public source: Source;\n  @Input() public showToolbar: boolean;\n  @Input() public autoEdit: boolean;\n  @Input() public isCreate: boolean;\n\n  @Output() private removeNote: EventEmitter<SourceNote>;\n  @Output() private createNote: EventEmitter<SourceNote>;\n  @Output() private exportNote: EventEmitter<SourceNote>;\n\n  public isEditNoteMode: boolean;\n\n  constructor(public dialog: MatDialog, private sourceService: SourceService) {\n    this.isEditNoteMode = false;\n\n    this.removeNote = new EventEmitter<SourceNote>();\n    this.createNote = new EventEmitter<SourceNote>();\n    this.exportNote = new EventEmitter<SourceNote>();\n  }\n\n  ngOnInit() { }\n\n  activateEditNoteMode() {\n    this.isEditNoteMode = true;\n  }\n\n  setNoteViewMode() {\n    this.isEditNoteMode = false;\n  }\n\n  saveNote(content) {\n    if (this.isCreate) {\n      this.note.note = content;\n\n      this.sourceService.createApiSourceNote(this.note, this.source).subscribe(response => {\n        this.note.id = response.data.id;\n\n        this.source.notes.unshift(this.note);\n\n        this.isCreate = false;\n\n        this.setNoteViewMode();\n\n        this.createNote.emit();\n      });\n\n    } else {\n      this.note.note = content;\n\n      this.sourceService.patchApiSourceNote(this.source, this.note).subscribe(() => {\n        this.setNoteViewMode();\n      });\n    }\n  }\n\n  doDeleteNote() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the note '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.removeNote.emit(this.note);\n      }\n    });\n  }\n\n  doExportNote() {\n    this.exportNote.emit(this.note);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "./source-details-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-editor\n  [content]=\"note.note\"\n  [isEditable]=\"true\"\n  [autoEdit]=\"autoEdit\"\n  [isNote]=\"true\"\n  [sourceNote]=\"note\"\n  (saveContent)=\"saveNote($event)\"\n  (deleteNote)=\"doDeleteNote()\" (exportNote)=\"doExportNote()\">\n</app-editor>\n"
        },
        {
            "name": "SourceNoteExportComponent",
            "id": "component-SourceNoteExportComponent-190000d9fb8922b2aad7436643ae62cf",
            "file": "src/app/manager/sources/source-note-export/source-note-export.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-source-note-export",
            "styleUrls": [
                "./source-note-export.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./source-note-export.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brainstorm",
                    "type": "Brainstorm",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brainstorms",
                    "type": "Brainstorm[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<SourceNoteExportComponent>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {BrainstormService} from '../../../services/brainstorm.service';\nimport {Brainstorm} from '../../../models/brainstorm';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-source-note-export',\n  templateUrl: './source-note-export.component.html',\n  styleUrls: ['./source-note-export.component.scss']\n})\nexport class SourceNoteExportComponent implements OnInit {\n  public brainstorm: Brainstorm;\n  public brainstorms: Brainstorm[];\n\n  constructor(private brainstormService: BrainstormService, public dialogRef: MatDialogRef<SourceNoteExportComponent>) {\n    this.brainstormService.getApiBrainstorms(null, null, '0', null, ['title'], null, false, null, false).subscribe((response) => {\n      this.brainstorms = response.brainstorms;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onNoClick():void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./source-note-export.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SourceNoteExportComponent>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SourceNoteExportComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"brainstorms\">\n  <div class=\"app-drawer-header\">\n    <div class=\"app-drawer-tools\">\n      <button mat-icon-button type=\"button\" class=\"material-icons\" [mat-dialog-close]=\"brainstorm\">save</button>\n      <button mat-icon-button type=\"button\" class=\"material-icons\" (click)=\"onNoClick()\">close</button>\n    </div>\n  </div>\n\n  <section class=\"app-section inline\">\n    <label>Export to Brainstorm</label>\n\n    <div class=\"app-field-group\">\n      <mat-form-field class=\"app-field-era\">\n        <mat-label>Brainstorms</mat-label>\n        <mat-select [(ngModel)]=\"brainstorm\" name=\"export_brainstorm\" required>\n          <mat-option *ngFor=\"let brainstorm of brainstorms\" [value]=\"brainstorm\">{{brainstorm.title}}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </section>\n</div>\n"
        },
        {
            "name": "SourcesComponent",
            "id": "component-SourcesComponent-8b4c107f17cb38fc6885b01a06db7e56",
            "file": "src/app/manager/sources/sources.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sources",
            "styleUrls": [
                "./sources.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sources.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authors",
                    "defaultValue": "[]",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "era",
                    "type": "Era",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddAuthorMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddNoteMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isCreateSourceMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditSourceMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "source",
                    "type": "Source",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sourceNote",
                    "type": "SourceNote",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "type": "Source[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSourceDetails",
                    "args": [
                        {
                            "name": "sideNav",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "sideNav",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "getSources",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeNewSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "removeSource",
                    "args": [
                        {
                            "name": "source",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "source",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { SourceService } from '../../services/source.service';\nimport { EraService } from '../../services/era.service';\n\nimport { Source } from '../../models/source';\nimport { Era } from '../../models/era';\nimport { Author } from '../../models/author';\nimport { SourceNote } from '../../models/source-note';\n\nimport {ConfirmRemovalComponent} from '../../utilities/confirm-removal/confirm-removal.component';\nimport {QuickSourceComponent} from './quick-source/quick-source.component';\n\n@Component({\n  selector: 'app-sources',\n  templateUrl: './sources.component.html',\n  styleUrls: ['./sources.component.scss']\n})\n\nexport class SourcesComponent implements OnInit {\n  public sources: Source[] = [];\n  public source: Source;\n\n  public era: Era;\n\n  public authors: Author[] = [];\n  public author: Author;\n  public sourceNote: SourceNote;\n\n  public isCreateSourceMode: boolean;\n  public isEditSourceMode: boolean;\n  public isAddAuthorMode: boolean;\n  public isAddNoteMode: boolean;\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  public sourceLink: string;\n\n  constructor(private sourceService: SourceService,\n              private eraService: EraService,\n              public dialog: MatDialog) {\n\n    this.sources = [];\n    this.initializeNewSource();\n\n    this.isCreateSourceMode = false;\n\n    this.eraService.getEras().subscribe(eras => {\n      for (const era of eras.data) {\n        if (era.attributes.label === 'AD') {\n          this.era = era;\n        }\n      }\n    });\n\n    this.getSources('/references?sort=-created');\n  }\n\n  ngOnInit() { }\n\n  initializeNewSource() {\n    this.source = new Source();\n    this.source.initializeSource();\n  }\n\n  getSources(path) {\n    this.sourceService.getApiSources(path).subscribe(response => {\n      for (const source of response.sources) {\n        this.sourceService.setSource(source);\n      }\n\n      this.sources = this.sourceService.getSources();\n\n      this.totalResults = response.total;\n      this.nextPage = response.links.next;\n      this.previousPage = response.links.prev;\n    });\n  }\n\n  createSource() {\n    const dialogRef = this.dialog.open(QuickSourceComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(source => {\n      if (source) {\n        source.publishedEra = this.era;\n\n        this.sourceService.createApiSource(source).subscribe(response => {\n          source.id = response.data.id;\n\n          this.sourceService.setSource(source);\n\n          this.sources.unshift(source);\n        });\n      }\n    });\n  }\n\n  removeSource(source) {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the source ',\n        content: '<li>' + source.notes.length.toString() + ' notes will be removed.</li>'\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.sourceService.removeApiSource(source).subscribe(() => {\n          this.sourceService.removeSource(source);\n\n          this.initializeNewSource();\n        });\n      }\n    });\n  }\n\n  closeSourceDetails(sideNav) {\n    sideNav.close();\n  }\n\n  turnPage(source) {\n    if (source.pageIndex < source.previousPageIndex) {\n      this.getSources(this.previousPage);\n    } else if (source.pageIndex > source.previousPageIndex) {\n      this.getSources(this.nextPage);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n@import '../../../styles/_drawer-side.scss';\n@import '../../../styles/_sections.scss';\n",
                    "styleUrl": "./sources.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sourceService",
                        "type": "SourceService"
                    },
                    {
                        "name": "eraService",
                        "type": "EraService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "sourceService",
                        "type": "SourceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eraService",
                        "type": "EraService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\">\n  <div class=\"app-content-toolbar\">\n    <h1>Sources</h1>\n    <button mat-flat-button color=\"primary\" class=\"material-icons\" (click)=\"createSource()\">add</button>\n  </div>\n\n  <div class=\"app-cards-container\">\n    <app-source-card\n      *ngFor=\"let source of sources\" [source]=\"source\" [canDelete]=\"true\"\n      (removeSource)=\"removeSource($event)\"\n      class=\"app-card\">\n    </app-source-card>\n  </div>\n\n  <mat-paginator length=\"{{totalResults}}\" pageSize=\"20\" (page)=\"turnPage($event)\"></mat-paginator>\n</div>\n\n"
        },
        {
            "name": "ThoughtComponent",
            "id": "component-ThoughtComponent-bbbc0527c0c7272d84cae5b9b91f82ad",
            "file": "src/app/brainstorms/brainstorm/thought/thought.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-thought",
            "styleUrls": [
                "./thought.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./thought.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "brainstorm",
                    "line": 22,
                    "type": "Brainstorm"
                },
                {
                    "name": "thought",
                    "line": 24,
                    "type": "BrainstormThought"
                },
                {
                    "name": "topic",
                    "line": 23,
                    "type": "BrainstormTopic"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeBrainstormThought",
                    "line": 27,
                    "type": "EventEmitter<ReturnRemoveData>"
                },
                {
                    "name": "removeTopicThought",
                    "line": 26,
                    "type": "EventEmitter<ReturnRemoveData>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deleteReturnData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelThoughtEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91
                },
                {
                    "name": "doDeleteThought",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "editThought",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "saveThought",
                    "args": [
                        {
                            "name": "thoughtContent",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "thoughtContent",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Inject, InjectionToken, Input, OnInit, Output} from '@angular/core';\n\nimport {BrainstormThought} from '../../../models/brainstorm-thought';\nimport {Brainstorm} from '../../../models/brainstorm';\nimport {BrainstormService} from '../../../services/brainstorm.service';\nimport {BrainstormTopic} from '../../../models/brainstorm-topic';\n\nimport {ConfirmRemovalComponent} from '../../../utilities/confirm-removal/confirm-removal.component';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface ReturnRemoveData {\n  topic: BrainstormTopic;\n  thought: BrainstormThought;\n}\n\n@Component({\n  selector: 'app-thought',\n  templateUrl: './thought.component.html',\n  styleUrls: ['./thought.component.scss']\n})\nexport class ThoughtComponent implements OnInit {\n  @Input() public brainstorm: Brainstorm;\n  @Input() public topic: BrainstormTopic;\n  @Input() public thought: BrainstormThought;\n\n  @Output() private removeTopicThought: EventEmitter<ReturnRemoveData>;\n  @Output() private removeBrainstormThought: EventEmitter<ReturnRemoveData>;\n\n  public deleteReturnData: any;\n\n  public isEditMode: boolean;\n\n  constructor(public dialog: MatDialog,\n              private brainstormService: BrainstormService) {\n    this.isEditMode = false;\n\n    this.deleteReturnData = {\n      topic: null,\n      thought: null\n    };\n\n    this.removeTopicThought = new EventEmitter<ReturnRemoveData>();\n    this.removeBrainstormThought = new EventEmitter<ReturnRemoveData>();\n  }\n\n  ngOnInit() {\n  }\n\n  saveThought(thoughtContent) {\n    this.thought.thought = thoughtContent;\n\n    if (!this.topic) {\n      this.brainstormService.patchApiBrainstormThought(this.thought).subscribe(() => { });\n    } else {\n      this.brainstormService.patchApiTopicThought(this.thought).subscribe(() => { });\n    }\n\n    this.cancelThoughtEditMode();\n  }\n\n  doDeleteThought() {\n    const dialogRef = this.dialog.open(ConfirmRemovalComponent, {\n      width: '250px',\n      data: {\n        label: 'the thought '\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(doClose => {\n      if (doClose) {\n        this.deleteReturnData.thought = this.thought;\n\n        if (this.topic) {\n          this.deleteReturnData.topic = this.topic;\n\n          this.removeTopicThought.emit(this.deleteReturnData);\n\n        } else {\n          this.removeBrainstormThought.emit(this.deleteReturnData);\n        }\n\n        this.cancelThoughtEditMode();\n      }\n    });\n  }\n\n  editThought() {\n    this.isEditMode = true;\n  }\n\n  cancelThoughtEditMode() {\n    this.isEditMode = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_variables.scss';\n@import '../../../../styles/_cards.scss';\n@import '../../../../styles/_sections.scss';\n\n.app-card-note.thought {\n  display: flex;\n  flex-direction: row;\n}\n",
                    "styleUrl": "./thought.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brainstormService",
                        "type": "BrainstormService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-editor\n  [content]=\"thought.thought\"\n  [isEditable]=\"true\"\n  [autoEdit]=\"false\"\n  [isNote]=\"true\"\n  (saveContent)=\"saveThought($event)\">\n</app-editor>\n"
        },
        {
            "name": "TimelineCardComponent",
            "id": "component-TimelineCardComponent-6cab86eac2793ae8ca384d3a5ee250dc",
            "file": "src/app/timelines/timeline-card/timeline-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-card",
            "styleUrls": [
                "./timeline-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "timeline",
                    "line": 11,
                    "type": "Timeline"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeTimeline",
                    "line": 14,
                    "type": "EventEmitter<Timeline>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doRemoveTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\n\nimport { Timeline } from '../../models/timelines/timeline';\n\n@Component({\n  selector: 'app-timeline-card',\n  templateUrl: './timeline-card.component.html',\n  styleUrls: ['./timeline-card.component.scss']\n})\nexport class TimelineCardComponent implements OnInit {\n  @Input() public timeline: Timeline;\n  @Input() public canDelete: boolean;\n\n  @Output() private removeTimeline: EventEmitter<Timeline>;\n\n  constructor() {\n    this.removeTimeline = new EventEmitter<Timeline>();\n  }\n\n  ngOnInit() { }\n\n  doRemoveTimeline() {\n    this.removeTimeline.emit(this.timeline);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_cards.scss';\n",
                    "styleUrl": "./timeline-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <button *ngIf=\"canDelete\" mat-icon-button class=\"material-icons\" (click)=\"doRemoveTimeline()\">delete</button>\n\n  <div routerLink=\"/timeline/{{timeline.id}}\">\n    <mat-card-title>{{timeline.label}}</mat-card-title>\n\n    <app-timeline-display\n      *ngIf=\"timeline\"\n      [timeline]=\"timeline\">\n    </app-timeline-display>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "TimelineCategoriesComponent",
            "id": "component-TimelineCategoriesComponent-6d9b3c6dfdb1f4ad2a0e981c6a2a5dcd",
            "file": "src/app/timelines/timeline-categories/timeline-categories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-categories",
            "styleUrls": [
                "./timeline-categories.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-categories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categoryEvents",
                    "line": 15,
                    "type": "Array<Category>"
                },
                {
                    "name": "timeline",
                    "line": 14,
                    "type": "Timeline"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isCreateMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "newCategory",
                    "type": "TimelineCategory",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateCreateMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "cancelCreateMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "createNewCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "initializeNewCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "removeCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nimport {TimelineCategory} from '../../models/timelines/timeline-category';\nimport {TimelineService} from '../../services/timeline.service';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {Category} from '../../models/category';\n\n@Component({\n  selector: 'app-timeline-categories',\n  templateUrl: './timeline-categories.component.html',\n  styleUrls: ['./timeline-categories.component.scss']\n})\nexport class TimelineCategoriesComponent implements OnInit {\n  @Input() public timeline: Timeline;\n  @Input() public categoryEvents: Array<Category>;\n\n  public isCreateMode: boolean;\n\n  public newCategory: TimelineCategory;\n\n  constructor(private timelineService: TimelineService) {}\n\n  ngOnInit() {\n    this.isCreateMode = false;\n\n    this.initializeNewCategory();\n  }\n\n  initializeNewCategory() {\n    this.newCategory = new TimelineCategory();\n    this.newCategory.initializeNewTimelineCategory();\n  }\n\n  activateCreateMode() {\n    this.isCreateMode = true;\n  }\n\n  cancelCreateMode() {\n    this.isCreateMode = false;\n  }\n\n  createNewCategory() {\n    this.timelineService.createCategoryApiTimeline(this.newCategory, this.timeline).subscribe(response => {\n      this.cancelCreateMode();\n\n      this.newCategory.id = response.data.id;\n      this.timeline.categories.push(this.newCategory);\n\n      this.initializeNewCategory();\n    });\n  }\n\n  removeCategory(category) {\n    this.timelineService.removeCategoryApiTimeline(category.id).subscribe(() => {\n      for (let i = 0; i < this.timeline.categories.length; i++) {\n        if (this.timeline.categories[i].id === category.id) {\n          this.timeline.categories.splice(i, 1);\n        }\n      }\n\n      let genericCategory = null;\n\n      for (const usedCategory of this.categoryEvents) {\n        if (usedCategory.id === null) {\n          genericCategory = usedCategory;\n          break;\n        }\n      }\n\n      for (let i = 0; i < this.categoryEvents.length; i++) {\n        if (this.categoryEvents[i].id && this.categoryEvents[i].id === category.id) {\n          for (const singlePointEvent of this.categoryEvents[i].singlePointEvents) {\n            genericCategory.singlePointEvents.push(singlePointEvent);\n          }\n\n          for (const multiPointEvent of this.categoryEvents[i].multiPointEvents) {\n            genericCategory.multiPointEvents.push(multiPointEvent);\n          }\n\n          this.categoryEvents.splice(i, 1);\n\n          break;\n        }\n      }\n    });\n  }\n\n  updateCategory() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_sections.scss';\n",
                    "styleUrl": "./timeline-categories.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-section-cta\">\n  <button mat-flat-button color=\"secondary\" *ngIf=\"!isCreateMode\" (click)=\"activateCreateMode()\">\n    + Add a Category\n  </button>\n</div>\n\n\n<div *ngIf=\"isCreateMode\">\n  <mat-form-field>\n    <input\n      matInput\n      placeholder=\"Category\"\n      name=\"timeline_category\"\n      autofocus\n      [(ngModel)]=\"newCategory.label\" />\n  </mat-form-field>\n\n  <button mat-icon-button class=\"material-icons\" (click)=\"createNewCategory()\">save</button>\n  <button mat-icon-button class=\"material-icons\" (click)=\"cancelCreateMode()\">close</button>\n</div>\n\n\n<app-timeline-category *ngFor=\"let category of timeline.categories\"\n                       [category]=\"category\" (removeCategory)=\"removeCategory($event)\"></app-timeline-category>\n\n\n\n"
        },
        {
            "name": "TimelineCategoryComponent",
            "id": "component-TimelineCategoryComponent-28a73aae3129efa7bb0d0767ecd43e7e",
            "file": "src/app/timelines/timeline-categories/timeline-category/timeline-category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-category",
            "styleUrls": [
                "./timeline-category.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "category",
                    "line": 12,
                    "type": "TimelineCategory"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeCategory",
                    "line": 14,
                    "type": "EventEmitter<TimelineCategory>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doDeleteCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport {TimelineCategory} from '../../../models/timelines/timeline-category';\n\n@Component({\n  selector: 'app-timeline-category',\n  templateUrl: './timeline-category.component.html',\n  styleUrls: ['./timeline-category.component.scss']\n})\n\nexport class TimelineCategoryComponent implements OnInit {\n  @Input() public category: TimelineCategory;\n\n  @Output() private removeCategory: EventEmitter<TimelineCategory>;\n\n  constructor() {\n    this.removeCategory = new EventEmitter<TimelineCategory>();\n  }\n\n  ngOnInit() {}\n\n  doDeleteCategory() {\n    this.removeCategory.emit(this.category);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/_sections.scss';\n",
                    "styleUrl": "./timeline-category.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-section list-item\">\n  <span>{{category.label}}</span>\n  <button mat-icon-button class=\"material-icons\" (click)=\"doDeleteCategory()\">delete</button>\n</div>\n\n\n"
        },
        {
            "name": "TimelineComponent",
            "id": "component-TimelineComponent-d3cf9ee97f62efe1f541f693dde5ac47",
            "file": "src/app/timelines/timeline/timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline",
            "styleUrls": [
                "./timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryEvents",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cursorLineActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cursorLineDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cursorLineDatePosition",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cursorLineStyles",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventColorClasses",
                    "defaultValue": "[\n    '#39ab28',\n    '#23c28f',\n    '#3b99ca',\n    '#2b66c4',\n    '#554db7',\n    '#715ab7',\n    '#a53ab7',\n    '#b73560',\n    '#c40c09',\n    '#d5531e',\n    '#d48e01',\n    '#6fab05',\n    '#028014',\n    '#009673',\n    '#0461a9',\n    '#354cb0',\n    '#5747b0',\n    '#6f2da6',\n    '#b74783',\n    '#da392f',\n    '#ee6e1f',\n    '#c39c3b',\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initControls",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isAddDescriptionMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isTimelineEditMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "multiPointEvents",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "options",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "persons",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "relatedEvents",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "relatedEventsNextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "relatedEventsPreviousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "relatedEventsTotalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "singlePointEvents",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeframe",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineEditor",
                    "type": "FroalaEditor",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineEnd",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineSpanInYears",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineUsers",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateTimelineEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 332
                },
                {
                    "name": "addUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131
                },
                {
                    "name": "closeTimelineEditorMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 337
                },
                {
                    "name": "convertPolarity",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        },
                        {
                            "name": "comparator",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        112,
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparator",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355
                },
                {
                    "name": "editTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349
                },
                {
                    "name": "filterEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284
                },
                {
                    "name": "getRelatedEvents",
                    "args": [
                        {
                            "name": "path",
                            "type": ""
                        },
                        {
                            "name": "isPageLink",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPageLink",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeTimelineDescriptionEditor",
                    "args": [
                        {
                            "name": "initControls",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "initControls",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapEventsToCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129
                },
                {
                    "name": "saveDescription",
                    "args": [
                        {
                            "name": "content",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPersons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276
                },
                {
                    "name": "setRelatedEvents",
                    "args": [
                        {
                            "name": "startEndYears",
                            "type": "Array<number>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "jsdoctags": [
                        {
                            "name": "startEndYears",
                            "type": "Array<number>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTimelineSpan",
                    "args": [
                        {
                            "name": "span",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "jsdoctags": [
                        {
                            "name": "span",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showCursorTooltip",
                    "args": [
                        {
                            "name": "tooltip",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 407,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tooltip",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sleep",
                    "args": [
                        {
                            "name": "ms",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 413,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "turnRelatedEventsPage",
                    "args": [
                        {
                            "name": "events",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 399,
                    "jsdoctags": [
                        {
                            "name": "events",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Options } from 'ng5-slider';\n\nimport FroalaEditor from 'froala-editor/js/froala_editor.min.js';\n\nimport { TimelineService } from '../../services/timeline.service';\n\nimport { Timeline } from '../../models/timelines/timeline';\nimport { Event } from '../../models/events/event';\nimport {Category} from '../../models/category';\n\nimport {EventService} from '../../services/event.service';\n\nimport {QuickEventComponent} from '../../manager/events/quick-event/quick-event.component';\nimport {TimelineEvent} from '../../models/timelines/timeline-event';\nimport {User} from '../../models/user';\nimport {MessageDialogComponent} from '../../utilities/message-dialog/message-dialog.component';\nimport {AddUserDialogComponent} from '../../utilities/add-user-dialog/add-user-dialog.component';\n\n@Component({\n  selector: 'app-timeline',\n  templateUrl: './timeline.component.html',\n  styleUrls: ['./timeline.component.scss']\n})\n\nexport class TimelineComponent implements OnInit {\n  public timeline: Timeline;\n\n  public timelineUsers: User[];\n\n  public isTimelineEditMode: boolean;\n  public isAddDescriptionMode: boolean;\n\n  public cursorLineActive: boolean;\n  public cursorLineStyles: object;\n  public cursorLineDate: string;\n  public cursorLineDatePosition: string;\n\n  public timelineStart: number;\n  public timelineEnd: number;\n  public timelineSpanInYears: number;\n  public timeframe: any[];\n  public options: Options;\n\n  public categoryEvents: Category[] = [];\n\n  public singlePointEvents = [];\n  public multiPointEvents = [];\n\n  public relatedEvents: Event[];\n  public relatedEventsTotalResults: number;\n  public relatedEventsPreviousPage: string;\n  public relatedEventsNextPage: string;\n\n  public timelineEditor: FroalaEditor;\n  public initControls;\n\n  public persons = [];\n\n  private eventColorClasses = [\n    '#39ab28',\n    '#23c28f',\n    '#3b99ca',\n    '#2b66c4',\n    '#554db7',\n    '#715ab7',\n    '#a53ab7',\n    '#b73560',\n    '#c40c09',\n    '#d5531e',\n    '#d48e01',\n    '#6fab05',\n    '#028014',\n    '#009673',\n    '#0461a9',\n    '#354cb0',\n    '#5747b0',\n    '#6f2da6',\n    '#b74783',\n    '#da392f',\n    '#ee6e1f',\n    '#c39c3b',\n  ];\n\n  constructor(private route: ActivatedRoute,\n              private timelineService: TimelineService,\n              private eventService: EventService,\n              public dialog: MatDialog) {\n    this.isTimelineEditMode = false;\n    this.isAddDescriptionMode = false;\n\n    this.cursorLineActive = false;\n    this.cursorLineDatePosition = 'above';\n\n    this.timelineUsers = [];\n\n    const timelineId = this.route.snapshot.paramMap.get('id');\n\n    this.timelineService.getApiTimeline(timelineId).subscribe(timeline => {\n      this.timeline = timeline;\n\n      if (!this.timeline.categories) {\n        this.timeline.categories = [];\n      }\n\n      this.timelineService.getApiTimelineUsers(null, this.timeline).subscribe((response) => {\n        this.timelineUsers = response.users;\n      });\n\n      this.mapEventsToCategories();\n\n      this.setPersons();\n    });\n  }\n\n  // If the era is BC then make the number a negative\n  private static convertPolarity(value: number, comparator: Event): number {\n    if (comparator.startEra.label === 'BC') {\n      value = value * -1;\n    }\n\n    return value;\n  }\n\n  ngOnInit() { }\n\n  addUser() {\n    const dialogRef = this.dialog.open(AddUserDialogComponent, {\n      width: '750px'\n    });\n\n    dialogRef.afterClosed().subscribe(user => {\n      let userExists = false;\n\n      for (const currentUser of this.timelineUsers) {\n        if (user.id === currentUser.id) {\n          userExists = true;\n          break;\n        }\n      }\n\n      if (userExists) {\n        this.dialog.open(MessageDialogComponent, {\n          width: '250px',\n          data: {\n            title: 'Could Not Add User',\n            message: 'User is already part of the timeline.'\n          }\n        });\n      } else {\n        this.timelineService.addUserToTimeline(this.timeline, user.id).subscribe(() => {\n          this.timelineUsers.push(user);\n        });\n      }\n    });\n  }\n\n  public initializeTimelineDescriptionEditor(initControls) {\n    this.initControls = initControls;\n    this.initControls.initialize();\n    this.timelineEditor = this.initControls.getEditor();\n\n    this.timelineEditor.opts.width = 1000;\n  }\n\n  setTimelineSpan(span) {\n    this.timelineSpanInYears = span;\n  }\n\n  mapEventsToCategories() {\n    const eventIdsUsed = [];\n    let backupColorArray = [];\n\n    this.eventColorClasses.reverse();\n\n    // assign the events to each respective category\n    for (const category of this.timeline.categories) {\n      if (category.events.length) {\n        const newCategory = new Category();\n\n        newCategory.id = category.id;\n        newCategory.label = category.label;\n\n        for (const categoryEvent of category.events) {\n          const eventId = categoryEvent[1];\n\n          for (const timelineEvent of this.timeline.events) {\n            if (timelineEvent.event.id === eventId) {\n              if (timelineEvent.event.formattedStartDate === timelineEvent.event.formattedEndDate) {\n                newCategory.singlePointEvents.push(timelineEvent.event);\n\n                eventIdsUsed.push(eventId);\n\n              } else {\n                if (this.eventColorClasses.length) {\n                  const color = this.eventColorClasses.pop();\n\n                  timelineEvent.event.colorClass = color;\n                  backupColorArray.push(color);\n\n                  if (!this.eventColorClasses.length) {\n                    for (const backupColor of backupColorArray) {\n                      this.eventColorClasses.push(backupColor);\n                    }\n\n                    this.eventColorClasses.reverse();\n\n                    backupColorArray = [];\n                  }\n                }\n\n                newCategory.multiPointEvents.push(timelineEvent.event);\n\n                eventIdsUsed.push(eventId);\n              }\n            }\n          }\n        }\n\n        // sort the events in a category oldest to newest\n        if (newCategory.multiPointEvents.length) {\n          newCategory.multiPointEvents.sort((a, b) => {\n            return a.startYear - b.startYear;\n          });\n        }\n\n        this.categoryEvents.push(newCategory);\n      }\n    }\n\n    // for any events not assigned to category create a generic category to contain them\n    const genericCategory = new Category();\n\n    genericCategory.id = null;\n    genericCategory.label = '';\n\n    if (this.timeline.events && this.timeline.events.length) {\n      for (const timelineEvent of this.timeline.events) {\n        if (!eventIdsUsed.includes(timelineEvent.event.id)) {\n          if (timelineEvent.event.formattedStartDate === timelineEvent.event.formattedEndDate) {\n            genericCategory.singlePointEvents.push(timelineEvent.event);\n\n          } else {\n            if (this.eventColorClasses.length) {\n              const color = this.eventColorClasses.pop();\n\n              timelineEvent.event.colorClass = color;\n              backupColorArray.push(color);\n\n              if (!this.eventColorClasses.length) {\n                for (const backupColor of backupColorArray) {\n                  this.eventColorClasses.push(backupColor);\n                }\n\n                this.eventColorClasses.reverse();\n\n                backupColorArray = [];\n              }\n            }\n\n            genericCategory.multiPointEvents.push(timelineEvent.event);\n          }\n        }\n      }\n    }\n\n    this.categoryEvents.push(genericCategory);\n\n    this.categoryEvents.reverse();\n  }\n\n  setPersons() {\n    if (this.timeline.persons && this.timeline.persons.length) {\n      for (const person of this.timeline.persons) {\n        this.persons.push(person);\n      }\n    }\n  }\n\n  filterEvents() {\n    this.timeline.events = this.timeline.events.filter(timelineEvent => {\n      if (TimelineComponent.convertPolarity(timelineEvent.event.startYear, timelineEvent.event) < this.timelineStart) {\n        return false;\n      } else if (TimelineComponent.convertPolarity(timelineEvent.event.endYear, timelineEvent.event) > this.timelineEnd) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  setRelatedEvents(startEndYears: Array<number>) {\n    this.timelineStart = startEndYears[0];\n    this.timelineEnd = startEndYears[1];\n\n    this.getRelatedEvents(null, false);\n  }\n\n  getRelatedEvents(path, isPageLink) {\n    let timelineStartEra = 'AD';\n    let timelineEndEra = 'AD';\n\n    if (this.timelineStart < 0) {\n      timelineStartEra = 'BC';\n    }\n\n    if (this.timelineEnd < 0) {\n      timelineEndEra = 'BC';\n    }\n\n    this.eventService.getApiEvents(path, null, [[this.timelineStart, timelineStartEra], [this.timelineEnd, timelineEndEra]], isPageLink).subscribe(response => {\n      this.relatedEvents = response.events;\n\n      this.relatedEventsTotalResults = response.total;\n      this.relatedEventsPreviousPage = response.links.previous;\n      this.relatedEventsNextPage = response.links.next;\n\n      if (this.timeline.events && this.timeline.events.length) {\n        this.relatedEvents = this.relatedEvents.filter((el) => {\n          if (!this.timeline.events.find((ev) => ev.event.id === el.id)) {\n            return el;\n          }\n        });\n      }\n    });\n  }\n\n  activateTimelineEditMode() {\n    this.cursorLineActive = false;\n    this.isTimelineEditMode = true;\n  }\n\n  closeTimelineEditorMode() {\n    this.isTimelineEditMode = false;\n  }\n\n  saveDescription(content) {\n    this.timeline.description = content;\n\n    this.editTimeline();\n\n    this.isAddDescriptionMode = false;\n  }\n\n  editTimeline() {\n    this.timelineService.patchApiTimeline(this.timeline).subscribe(() => {\n      this.isTimelineEditMode = false;\n    });\n  }\n\n  createEvent() {\n    const dialogRef = this.dialog.open(QuickEventComponent, {\n      width: '750px',\n      data: {\n        showExisting: false,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(event => {\n      if (event) {\n        this.eventService.createApiEvent(event).subscribe(newEventResponse => {\n          event.id = newEventResponse.data.id;\n\n          event.formatYears();\n          event.formatDates();\n\n          const timelineEvent = new TimelineEvent();\n          timelineEvent.initializeNewTimelineEvent();\n\n          timelineEvent.event = event;\n\n          this.timelineService.createEventApiTimeline(timelineEvent, this.timeline).subscribe(timelineEventResponse => {\n            timelineEvent.id = timelineEventResponse.data.id;\n\n            this.timeline.events.push(timelineEvent);\n\n            for (const categoryEvent of this.categoryEvents) {\n              if (categoryEvent.id === null) {\n                if (event.formattedStartYear === event.formattedEndYear) {\n                  categoryEvent.singlePointEvents.push(event);\n                } else {\n                  categoryEvent.multiPointEvents.push(event);\n                }\n\n                break;\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  turnRelatedEventsPage(events) {\n    if (events.pageIndex < events.previousPageIndex) {\n      this.getRelatedEvents(this.relatedEventsPreviousPage, true);\n    } else if (events.pageIndex > events.previousPageIndex) {\n      this.getRelatedEvents(this.relatedEventsNextPage, true);\n    }\n  }\n\n  async showCursorTooltip(tooltip) {\n    await this.sleep(100);\n\n    tooltip.show();\n  }\n\n  private sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.timeline-container {\n  border-radius: 5px;\n  display: inline-block;\n  width: 100%;\n  margin-bottom: 1.5rem;\n\n  .timeline-cursor-line {\n    position: absolute;\n    top: 19.78%;\n    border-left: 1px solid $color-highlight;\n    border-right: 1px solid white;\n\n  }\n}\n\n.timeline-icon {\n  font-size: 12px;\n  color: $color-lightest;\n  background-color: $color-gray-scale-400;\n  padding: 3px;\n  border-radius: 50%;\n  position: absolute;\n  top: -3px;\n  left: -15px;\n}\n\n.timeline-timeframe {\n  display: flex;\n  margin: 10px 0;\n  height: 10px;\n  position: relative;\n  border: 1px solid $color-medium-100;\n  border-bottom: 0;\n\n  .segment {\n    position: absolute;\n    height: 100%;\n    border-left: 1px solid $color-medium-100;\n    .segment-year {\n      position: absolute;\n      font-size: $font-size-smallest;\n      color: $color-medium;\n      left: -15px;\n      top: 12px;\n    }\n  }\n}\n\napp-category {\n  position: relative;\n}\n",
                    "styleUrl": "./timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\" *ngIf=\"timeline\">\n  <div class=\"app-content-toolbar\">\n    <h1 *ngIf=\"timeline && !isTimelineEditMode\">{{timeline.label}}</h1>\n\n    <span *ngIf=\"isTimelineEditMode\">\n      <mat-form-field style=\"width: 100%\">\n        <input\n          matInput\n          placeholder=\"Title\"\n          required\n          name=\"timeline_label\"\n          #timelineLabel=\"ngModel\"\n          [(ngModel)]=\"timeline.label\" />\n      </mat-form-field>\n\n      <button mat-icon-button class=\"material-icons\" (click)=\"editTimeline()\">\n        save\n      </button>\n\n      <button mat-icon-button class=\"material-icons\" (click)=\"closeTimelineEditorMode()\">close</button>\n    </span>\n\n    <button *ngIf=\"!isTimelineEditMode\" mat-icon-button class=\"material-icons\" (click)=\"activateTimelineEditMode()\">\n      edit\n    </button>\n  </div>\n\n  <div *ngFor=\"let user of timelineUsers\">\n    <span>{{user.firstName}}</span> <span> {{user.lastName}}</span>\n  </div>\n\n  <button mat-flat-button class=\"material-icons\" color=\"secondary\" (click)=\"addUser()\">+</button>\n\n  <div id=\"timeline_timespan\">\n    <h3 *ngIf=\"timeline && !isTimelineEditMode\">Spans {{this.timelineSpanInYears}} years</h3>\n  </div>\n\n  <div *ngIf=\"!timeline.description\">\n    <button mat-flat-button color=\"secondary\" (click)=\"isAddDescriptionMode = true\">+ Add a Description</button>\n  </div>\n\n  <app-editor\n    *ngIf=\"isAddDescriptionMode\"\n    [content]=\"timeline.description\"\n    [autoEdit]=\"true\"\n    [isNote]=\"false\"\n    [isEditable]=\"true\"\n    (saveContent)=\"saveDescription($event)\">\n  </app-editor>\n\n  <div id=\"timeline-description\">\n    <app-editor\n      *ngIf=\"!isAddDescriptionMode && timeline.description\"\n      [content]=\"timeline.description\"\n      [autoEdit]=\"false\"\n      [isNote]=\"false\"\n      [isEditable]=\"true\"\n      (saveContent)=\"saveDescription($event)\">\n    </app-editor>\n  </div>\n\n  <app-timeline-display\n    [timeline]=\"timeline\"\n    [categoryEvents]=\"categoryEvents\"\n    (returnTimelineSpan)=\"setTimelineSpan($event)\"\n    (returnTimelineStartEndYears)=\"setRelatedEvents($event)\">\n  </app-timeline-display>\n\n  <mat-tab-group>\n    <mat-tab label=\"Events\">\n      <div class=\"grid-list\">\n        <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createEvent()\">add</button>\n\n        <app-timeline-event-list\n          *ngFor=\"let timelineEvent of timeline.events\"\n          [timelineEvent]=\"timelineEvent\"\n          [event]=\"timelineEvent.event\"\n          [timeline]=\"timeline\"\n          [categoryEvents]=\"categoryEvents\">\n        </app-timeline-event-list>\n      </div>\n    </mat-tab>\n\n    <mat-tab label=\"People\">\n      <div class=\"grid-list\">\n        <app-timeline-person-list\n          *ngFor=\"let timelinePerson of timeline.persons\"\n          [person]=\"timelinePerson.person\"\n          [timeline]=\"timeline\">\n        </app-timeline-person-list>\n      </div>\n    </mat-tab>\n\n    <mat-tab label=\"Categories\">\n      <div class=\"grid-list\">\n        <app-timeline-categories [timeline]=\"timeline\" [categoryEvents]=\"categoryEvents\"></app-timeline-categories>\n      </div>\n    </mat-tab>\n\n    <mat-tab label=\"What Else?\">\n      <div class=\"grid-list\">\n        <app-timeline-event-list\n          *ngFor=\"let event of relatedEvents\"\n          [timelineEvent]=\"null\"\n          [event]=\"event\"\n          [timeline]=\"timeline\">\n        </app-timeline-event-list>\n\n        <mat-paginator length=\"{{relatedEventsTotalResults}}\" pageSize=\"20\" (page)=\"turnRelatedEventsPage($event)\"></mat-paginator>\n      </div>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n\n"
        },
        {
            "name": "TimelineDisplayComponent",
            "id": "component-TimelineDisplayComponent-f82c57d0dec5f475ccc583452540b4bf",
            "file": "src/app/timelines/timeline/timeline-display/timeline-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-display",
            "styleUrls": [
                "./timeline-display.component.scss",
                "../timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categoryEvents",
                    "line": 17,
                    "type": "Category[]"
                },
                {
                    "name": "timeline",
                    "line": 18,
                    "type": "Timeline"
                }
            ],
            "outputsClass": [
                {
                    "name": "returnTimelineSpan",
                    "line": 20,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "returnTimelineStartEndYears",
                    "line": 21,
                    "type": "EventEmitter<Array<number>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cursorLineActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cursorLineDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cursorLineDatePosition",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cursorLineStyles",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventColorClasses",
                    "defaultValue": "[\n    '#39ab28',\n    '#23c28f',\n    '#3b99ca',\n    '#2b66c4',\n    '#554db7',\n    '#715ab7',\n    '#a53ab7',\n    '#b73560',\n    '#c40c09',\n    '#d5531e',\n    '#d48e01',\n    '#6fab05',\n    '#028014',\n    '#009673',\n    '#0461a9',\n    '#354cb0',\n    '#5747b0',\n    '#6f2da6',\n    '#b74783',\n    '#da392f',\n    '#ee6e1f',\n    '#c39c3b',\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "minYearToMonths",
                    "defaultValue": "11",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "persons",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeframe",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineEnd",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineLength",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timelineSpanInYears",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "mapEventsToCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "padTimelineDate",
                    "args": [
                        {
                            "name": "yearToPad",
                            "type": "number"
                        },
                        {
                            "name": "timelineLength",
                            "type": "number"
                        },
                        {
                            "name": "increase",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        112,
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "yearToPad",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timelineLength",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "increase",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTimeframe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "setTimelineEventLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 398
                },
                {
                    "name": "setTimelinePersonLocations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 456
                },
                {
                    "name": "setTimelineStartAndEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                },
                {
                    "name": "showCursorLine",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 477,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showCursorTooltip",
                    "args": [
                        {
                            "name": "tooltip",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 523,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tooltip",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {Sleep} from '../../../utilities/sleep';\n\nimport {Category} from '../../../models/category';\nimport {Person} from '../../../models/persons/person';\nimport {Event} from '../../../models/events/event';\nimport {Era} from '../../../models/era';\nimport {Timeline} from '../../../models/timelines/timeline';\n\n@Component({\n  selector: 'app-timeline-display',\n  templateUrl: './timeline-display.component.html',\n  styleUrls: ['./timeline-display.component.scss', '../timeline.component.scss']\n})\nexport class TimelineDisplayComponent implements OnInit {\n  @Input() public categoryEvents: Category[];\n  @Input() public timeline: Timeline;\n\n  @Output() private returnTimelineSpan: EventEmitter<string>;\n  @Output() private returnTimelineStartEndYears: EventEmitter<Array<number>>;\n\n  public cursorLineActive: boolean;\n  public cursorLineStyles: object;\n  public cursorLineDate: string;\n  public cursorLineDatePosition: string;\n  public timeframe: any[];\n  public persons: Person[];\n  public timelineStart: number;\n  public timelineEnd: number;\n  public timelineSpanInYears: number;\n\n  private timelineLength: number;\n  private  minYearToMonths = 11;\n\n  private eventColorClasses = [\n    '#39ab28',\n    '#23c28f',\n    '#3b99ca',\n    '#2b66c4',\n    '#554db7',\n    '#715ab7',\n    '#a53ab7',\n    '#b73560',\n    '#c40c09',\n    '#d5531e',\n    '#d48e01',\n    '#6fab05',\n    '#028014',\n    '#009673',\n    '#0461a9',\n    '#354cb0',\n    '#5747b0',\n    '#6f2da6',\n    '#b74783',\n    '#da392f',\n    '#ee6e1f',\n    '#c39c3b',\n  ];\n\n  constructor() {\n    this.returnTimelineSpan = new EventEmitter();\n    this.returnTimelineStartEndYears = new EventEmitter();\n\n    this.cursorLineActive = false;\n    this.cursorLineDatePosition = 'above';\n\n    this.persons = [];\n  }\n\n  private static padTimelineDate(yearToPad: number, timelineLength: number, increase: boolean) {\n    const minPadding = 1;\n    const maxPadding = 100;\n\n    // get 10 percent of the total length and see if it falls within the min/max range.\n    let padding = timelineLength * .02;\n\n    if (padding < minPadding) {\n      padding = minPadding;\n    }\n\n    if (padding > maxPadding) {\n      padding = maxPadding;\n    }\n\n    if (increase) {\n      yearToPad = yearToPad + padding;\n    } else {\n      yearToPad = yearToPad - padding;\n    }\n\n    return yearToPad;\n  }\n\n  ngOnInit() {\n    for (const timelinePerson of this.timeline.persons) {\n      this.persons.push(timelinePerson.person);\n    }\n\n    this.setTimelineStartAndEnd();\n    this.setTimeframe();\n\n    this.setTimelineEventLocations();\n    this.setTimelinePersonLocations();\n\n    if (!this.categoryEvents) {\n      this.categoryEvents = [];\n      this.mapEventsToCategories();\n    }\n  }\n\n  setTimelineStartAndEnd() {\n    const years = [];\n    const year = new Date();\n\n    let endYear = year.getFullYear();\n\n    if (this.timeline.events && this.timeline.events.length) {\n      for ( const timelineEvent of this.timeline.events) {\n        if (timelineEvent.event.startEra.label === 'BC') {\n          timelineEvent.event.startYear = timelineEvent.event.startYear * -1;\n        }\n\n        if (timelineEvent.event.endEra && timelineEvent.event.endEra.label === 'BC') {\n          timelineEvent.event.endYear = timelineEvent.event.endYear * -1;\n        }\n\n        if (timelineEvent.event.endYear) {\n          endYear = timelineEvent.event.endYear;\n        } else {\n          const dateObj = new Date();\n          endYear = dateObj.getFullYear();\n        }\n\n        years.push(timelineEvent.event.startYear);\n        years.push(endYear);\n      }\n    }\n\n    if (this.timeline.persons && this.timeline.persons.length) {\n      for (const timelinePerson of this.timeline.persons) {\n        let person = timelinePerson.person;\n\n        if (person.birthEra.label === 'BC') {\n          person.birthYear = person.birthYear * -1;\n        }\n\n        if (person.deathEra && person.deathEra.label === 'BC') {\n          person.deathYear = person.deathYear * -1;\n        }\n\n        years.push(person.birthYear);\n\n        if (person.deathYear) {\n          years.push(person.deathYear);\n        } else {\n          const dateObj = new Date();\n          years.push(dateObj.getFullYear());\n        }\n      }\n    }\n\n    // sort ascending\n    years.sort((a, b) => {\n      return a - b;\n    });\n\n    const earliestEvent = years[0];\n    const oldestEvent = years[years.length - 1];\n    const distance = oldestEvent - earliestEvent;\n\n    this.timelineSpanInYears = distance;\n\n    this.timelineStart = Math.floor(TimelineDisplayComponent.padTimelineDate(earliestEvent, distance, false));\n    this.timelineEnd = Math.ceil(TimelineDisplayComponent.padTimelineDate(oldestEvent, distance, true));\n\n    this.timelineLength = this.timelineEnd - this.timelineStart;\n\n    this.returnTimelineSpan.emit(this.timelineSpanInYears.toString());\n    this.returnTimelineStartEndYears.emit([this.timelineStart, this.timelineEnd]);\n  }\n\n  setTimeframe() {\n    const tmpEvent = new Event();\n\n    this.timeframe = [];\n\n    let numberOfDivisions = 11;\n\n    let lengthOfSection = 0;\n\n    // if less than the minYearToMonths value then the time span should be by single year.\n    if (this.timelineLength < this.minYearToMonths) {\n      numberOfDivisions = this.timelineLength;\n      lengthOfSection = Math.round(this.timelineLength / numberOfDivisions);\n    } else {\n      lengthOfSection = Math.round(this.timelineLength / (numberOfDivisions - 1));\n    }\n\n    let loopedDivisions = numberOfDivisions;\n\n    if (this.timelineLength < this.minYearToMonths) {\n      loopedDivisions = numberOfDivisions + 1;\n    }\n\n    let divisionYear = 0;\n    let percentage = 0;\n\n    for (let i = 0; i < loopedDivisions; i++) {\n      const segment = {\n        leftPercentage: '',\n        year: ''\n      };\n\n      // The first division should be equal to the timeline start date\n      if (i === 0) {\n        tmpEvent.startYear = this.timelineStart;\n        tmpEvent.startEra = new Era();\n\n        if (this.timelineStart < 0) {\n          tmpEvent.startEra.label = 'BC';\n\n        } else {\n          tmpEvent.startEra.label = 'AD';\n        }\n\n        tmpEvent.formatYears();\n\n        divisionYear = this.timelineStart;\n        segment.leftPercentage = '-1px';\n        segment.year = tmpEvent.formattedStartYear;\n\n        this.timeframe.push(segment);\n\n        continue;\n      }\n\n      // last segment in timeline should be equal to end year of timeline\n      if (i === numberOfDivisions - 1) {\n        tmpEvent.endYear = this.timelineEnd;\n        tmpEvent.endEra = new Era();\n\n        segment.leftPercentage = '100%';\n\n        if (this.timelineEnd < 0) {\n          tmpEvent.endEra.label = 'BC';\n\n        } else  {\n          tmpEvent.endEra.label = 'AD';\n        }\n\n        tmpEvent.formatYears();\n\n        segment.year = tmpEvent.formattedEndYear;\n\n        this.timeframe.push(segment);\n\n        continue;\n      }\n\n      // calculate years on segments in the middle\n      divisionYear = divisionYear + lengthOfSection;\n\n      tmpEvent.startYear = divisionYear;\n\n      if (divisionYear < 0) {\n        tmpEvent.startEra.label = 'BC';\n      } else {\n        tmpEvent.startEra.label = 'AD';\n      }\n\n      tmpEvent.formatYears();\n\n      if (numberOfDivisions < this.minYearToMonths) {\n        percentage = percentage + (100 / numberOfDivisions);\n      } else {\n        percentage = percentage + 10;\n      }\n\n      segment.year = tmpEvent.formattedStartYear;\n      segment.leftPercentage = percentage.toString() + '%';\n\n      this.timeframe.push(segment);\n    }\n  }\n\n  mapEventsToCategories() {\n    const eventIdsUsed = [];\n    let backupColorArray = [];\n\n    this.eventColorClasses.reverse();\n\n    // assign the events to each respective category\n    if (this.timeline.categories && this.timeline.categories.length) {\n      for (const category of this.timeline.categories) {\n        if (category.events.length) {\n          const newCategory = new Category();\n\n          newCategory.id = category.id;\n          newCategory.label = category.label;\n\n          if (category.events && category.events.length) {\n            for (const categoryEvent of category.events) {\n              const eventId = categoryEvent[1];\n\n              if (this.timeline.events && this.timeline.events.length) {\n                for (const timelineEvent of this.timeline.events) {\n                  if (timelineEvent.event.id === eventId) {\n                    if (timelineEvent.event.formattedStartDate === timelineEvent.event.formattedEndDate) {\n                      newCategory.singlePointEvents.push(timelineEvent.event);\n\n                      eventIdsUsed.push(eventId);\n\n                    } else {\n                      if (this.eventColorClasses.length) {\n                        const color = this.eventColorClasses.pop();\n\n                        timelineEvent.event.colorClass = color;\n                        backupColorArray.push(color);\n\n                        if (!this.eventColorClasses.length) {\n                          for (const backupColor of backupColorArray) {\n                            this.eventColorClasses.push(backupColor);\n                          }\n\n                          this.eventColorClasses.reverse();\n\n                          backupColorArray = [];\n                        }\n                      }\n\n                      newCategory.multiPointEvents.push(timelineEvent.event);\n\n                      eventIdsUsed.push(eventId);\n                    }\n                  }\n                }\n              }\n\n            }\n          }\n\n\n          // sort the events in a category oldest to newest\n          if (newCategory.multiPointEvents.length) {\n            newCategory.multiPointEvents.sort((a, b) => {\n              return a.startYear - b.startYear;\n            });\n          }\n\n          this.categoryEvents.push(newCategory);\n        }\n      }\n    }\n\n    // for any events not assigned to category create a generic category to contain them\n    const genericCategory = new Category();\n\n    genericCategory.id = null;\n    genericCategory.label = '';\n\n    if (this.timeline.events && this.timeline.events.length) {\n      for (const timelineEvent of this.timeline.events) {\n        if (!eventIdsUsed.includes(timelineEvent.event.id)) {\n          if (timelineEvent.event.formattedStartDate === timelineEvent.event.formattedEndDate) {\n            genericCategory.singlePointEvents.push(timelineEvent.event);\n\n          } else {\n            if (this.eventColorClasses.length) {\n              const color = this.eventColorClasses.pop();\n\n              timelineEvent.event.colorClass = color;\n              backupColorArray.push(color);\n\n              if (!this.eventColorClasses.length) {\n                for (const backupColor of backupColorArray) {\n                  this.eventColorClasses.push(backupColor);\n                }\n\n                this.eventColorClasses.reverse();\n\n                backupColorArray = [];\n              }\n            }\n\n            genericCategory.multiPointEvents.push(timelineEvent.event);\n          }\n        }\n      }\n    }\n\n\n    this.categoryEvents.push(genericCategory);\n\n    this.categoryEvents.reverse();\n  }\n\n  setTimelineEventLocations() {\n    // if the timeline is less than some minimum length create percentages based on month instead of year\n    if (this.timelineLength <= this.minYearToMonths) {\n      const timelineLengthInMonths = this.timelineLength * 12;\n\n      if (this.timeline.events && this.timeline.events.length) {\n        for (const timelineEvent of this.timeline.events) {\n          let startMonthInTimeline = ((timelineEvent.event.startYear - this.timelineStart) * 12);\n\n          if (timelineEvent.event.startMonth) {\n            startMonthInTimeline = startMonthInTimeline + Number(timelineEvent.event.startMonth.id);\n          }\n\n          timelineEvent.event.timelineStartLocation = (startMonthInTimeline / timelineLengthInMonths) * 100;\n\n          let endMonthInTimeline = ((timelineEvent.event.endYear - this.timelineStart) * 12);\n\n          if (timelineEvent.event.endMonth) {\n            endMonthInTimeline = endMonthInTimeline + Number(timelineEvent.event.endMonth.id);\n          }\n\n          let endPercentage = (endMonthInTimeline / timelineLengthInMonths) * 100 - timelineEvent.event.timelineStartLocation;\n\n          // if the range is 0% change to 1% so it shows up on the timeline\n          if (endPercentage < 1 && timelineEvent.event.formattedStartDate !== timelineEvent.event.formattedEndDate) {\n            endPercentage = 1;\n          }\n\n          timelineEvent.event.timelineEndLocation = endPercentage;\n        }\n      }\n\n    } else {\n      if (this.timeline.events && this.timeline.events.length) {\n        for (const timelineEvent of this.timeline.events) {\n          // set the percentage location from oldest event.\n          timelineEvent.event.timelineStartLocation = ((timelineEvent.event.startYear - this.timelineStart) / this.timelineLength) * 100;\n\n          let endYear = timelineEvent.event.endYear;\n\n          if (!endYear) {\n            const year = new Date();\n            endYear = year.getFullYear();\n          }\n\n          let endPercentage = (((endYear - this.timelineStart) / this.timelineLength) * 100) - timelineEvent.event.timelineStartLocation;\n\n          // if the range is 0% change to 1% so it shows up on the timeline\n          if (endPercentage < 1 && timelineEvent.event.formattedStartDate !== timelineEvent.event.formattedEndDate) {\n            endPercentage = 1;\n          }\n\n          timelineEvent.event.timelineEndLocation = endPercentage;\n        }\n      }\n    }\n  }\n\n  setTimelinePersonLocations() {\n    if (this.timeline.persons && this.timeline.persons.length) {\n      for (const timelinePerson of this.timeline.persons) {\n        let person = timelinePerson.person;\n\n        // set the percentage location from oldest event.\n        person.timelineStartLocation = ((person.birthYear - this.timelineStart) / this.timelineLength) * 100;\n\n        let deathYear = person.deathYear;\n\n        // in the case that the person is still alive\n        if (!deathYear) {\n          const dateObj = new Date();\n          deathYear = dateObj.getFullYear();\n        }\n\n        person.timelineEndLocation = (((deathYear - this.timelineStart) / this.timelineLength) * 100) - person.timelineStartLocation;\n      }\n    }\n  }\n\n  showCursorLine($event) {\n    const timelineContainerElement = document.getElementById('timeline-container');\n    const timelineDescriptionElement = document.getElementById('timeline-description');\n\n    this.cursorLineActive = true;\n    const xPosition = $event.clientX;\n\n    // const height = timelineContainerElement.offsetHeight;\n    const height = timelineContainerElement.offsetHeight;\n    let top = 210;\n\n    if (this.timeline.description) {\n      top = timelineContainerElement.offsetHeight + timelineDescriptionElement.offsetHeight;\n    }\n\n    this.cursorLineStyles = {\n      left: xPosition + 'px',\n      height: height + 'px',\n      top: top + 'px'\n    };\n\n    const timelineWidth = timelineContainerElement.offsetWidth;\n    const timelineLeftOffset = timelineContainerElement.offsetLeft;\n\n    const cursorXInDiv = xPosition - timelineLeftOffset;\n\n    const pixelsByYear = timelineWidth / this.timelineLength;\n    const numberOfYearsOffset = cursorXInDiv / pixelsByYear;\n\n    const lineDate: number = Math.floor(this.timelineStart + numberOfYearsOffset);\n\n    const tmpEvent = new Event();\n    tmpEvent.startYear = lineDate;\n    tmpEvent.startEra = new Era();\n\n    if (lineDate < 0) {\n      tmpEvent.startEra.label = 'BC';\n    } else {\n      tmpEvent.startEra.label = 'AD';\n    }\n\n    tmpEvent.formatYears();\n\n    this.cursorLineDate = tmpEvent.formattedStartYear;\n  }\n\n  async showCursorTooltip(tooltip) {\n    await Sleep.wait(100);\n\n    tooltip.show();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./timeline-display.component.scss"
                },
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.timeline-container {\n  border-radius: 5px;\n  display: inline-block;\n  width: 100%;\n  margin-bottom: 1.5rem;\n\n  .timeline-cursor-line {\n    position: absolute;\n    top: 19.78%;\n    border-left: 1px solid $color-highlight;\n    border-right: 1px solid white;\n\n  }\n}\n\n.timeline-icon {\n  font-size: 12px;\n  color: $color-lightest;\n  background-color: $color-gray-scale-400;\n  padding: 3px;\n  border-radius: 50%;\n  position: absolute;\n  top: -3px;\n  left: -15px;\n}\n\n.timeline-timeframe {\n  display: flex;\n  margin: 10px 0;\n  height: 10px;\n  position: relative;\n  border: 1px solid $color-medium-100;\n  border-bottom: 0;\n\n  .segment {\n    position: absolute;\n    height: 100%;\n    border-left: 1px solid $color-medium-100;\n    .segment-year {\n      position: absolute;\n      font-size: $font-size-smallest;\n      color: $color-medium;\n      left: -15px;\n      top: 12px;\n    }\n  }\n}\n\napp-category {\n  position: relative;\n}\n",
                    "styleUrl": "../timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 59
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"timeline-container\" class=\"timeline-container\" (dblclick)=\"showCursorLine($event)\">\n  <app-category\n    *ngFor=\"let category of categoryEvents\"\n    [category]=\"category\"\n    [persons]=\"persons\"\n    [timeline]=\"timeline\"\n    [categoryEvents]=\"categoryEvents\"></app-category>\n\n  <div class=\"timeline-timeframe\">\n    <div class=\"segment\" *ngFor=\"let segment of timeframe\" [ngStyle]=\"{left: segment.leftPercentage}\">\n      <div class=\"segment-year\">{{segment.year}}</div>\n    </div>\n  </div>\n\n  <div class=\"timeline-cursor-line\"\n       *ngIf=\"cursorLineActive\"\n       [ngStyle]=\"cursorLineStyles\"\n       #tooltip=\"matTooltip\"\n       matTooltip=\"{{cursorLineDate}}\"\n       [matTooltipPosition]=\"cursorLineDatePosition\"\n       (mouseout)=\"showCursorTooltip(tooltip).then()\">\n  </div>\n</div>\n"
        },
        {
            "name": "TimelineEventComponent",
            "id": "component-TimelineEventComponent-aad180e2c6eef5bffb49892891344ad6",
            "file": "src/app/timelines/timeline-event/timeline-event.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-event",
            "styleUrls": [
                "./timeline-event.component.scss",
                "../timeline/timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-event.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categoryEvents",
                    "line": 18,
                    "type": "Array<Category>"
                },
                {
                    "name": "event",
                    "line": 16,
                    "type": "Event"
                },
                {
                    "name": "timeline",
                    "line": 17,
                    "type": "Timeline"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bottomSheet",
                    "type": "MatBottomSheet",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventIconTooltipPosition",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSinglePointEvent",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positionStyle",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyEventClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "deHighlightEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "highlightEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "makePositionStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "showDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "toggleSelectEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\n\nimport { Event } from '../../models/events/event';\n\nimport { TimelineEventDetailsComponent } from '../timeline-event-details/timeline-event-details.component';\nimport {Timeline} from '../../models/timelines/timeline';\nimport {Category} from '../../models/category';\n\n@Component({\n  selector: 'app-timeline-event',\n  templateUrl: './timeline-event.component.html',\n  styleUrls: ['./timeline-event.component.scss', '../timeline/timeline.component.scss']\n})\nexport class TimelineEventComponent implements OnInit {\n  @Input() public event: Event;\n  @Input() public timeline: Timeline;\n  @Input() public categoryEvents: Array<Category>;\n\n  public positionStyle: object;\n  public isSinglePointEvent: boolean;\n\n  public isSelected: boolean;\n\n  public eventIconTooltipPosition: string;\n\n  constructor(public bottomSheet: MatBottomSheet) {\n    this.eventIconTooltipPosition = 'above';\n  }\n\n  ngOnInit() {\n    this.makePositionStyle();\n\n    this.isSinglePointEvent = this.event.formattedStartDate === this.event.formattedEndDate;\n\n    this.isSelected = false;\n  }\n\n  makePositionStyle() {\n    this.positionStyle = {\n      left: this.event.timelineStartLocation + '%',\n      width: this.event.timelineEndLocation + '%',\n      'background-color': this.event.colorClass\n    };\n  }\n\n  applyEventClasses() {\n    let classes = '';\n\n    if (this.event.timelineEventIsHighlighted) {\n      classes = classes + 'highlight-event-marker ';\n    }\n\n    if (this.isSinglePointEvent) {\n      classes = classes + 'single-point ';\n    }\n\n    if (this.event.colorClass) {\n      classes = classes + ' color-' + this.event.colorClass;\n    }\n\n    return classes;\n  }\n\n  highlightEvent() {\n    this.event.listEventIsHighlighted = true;\n  }\n\n  deHighlightEvent() {\n    if (!this.isSelected) {\n      this.event.listEventIsHighlighted = false;\n    }\n  }\n\n  toggleSelectEvent() {\n    this.isSelected = !this.isSelected;\n    this.event.timelineEventIsHighlighted = this.isSelected;\n    this.event.listEventIsHighlighted = this.isSelected;\n  }\n\n  showDetails() {\n    this.bottomSheet.open(TimelineEventDetailsComponent as any, {\n      data: {\n        event: this.event,\n        timeline: this.timeline,\n        categoryEvents: this.categoryEvents\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.event {\n  // Styles the event ranges\n  position: absolute;\n  background-color: $color-gray-scale-300;\n  height: 100%;\n  bottom: 0px;\n  &.highlight-event-marker {\n    border: 2px solid $color-gray-scale-600;\n    .timeline-icon {\n      top: -5px;\n      background-color: $color-gray-scale-600;\n    }\n  }\n  &:hover {\n    opacity: 0.5;\n  }\n\n  // Styles the single point events\n  &.single-point {\n    height: 24px;\n    cursor: pointer;\n    bottom: 4px;\n    border: solid $color-gray-scale-400 1px;\n\n    // Draws the round pin in the event\n    &::after {\n      content: \"\";\n      position: absolute;\n      top: -1px;\n      right: -3px;\n      width: 6px;\n      height: 6px;\n      background-color: $color-gray-scale-400;\n      border-radius: 100%;\n    }\n\n    // Styles the interactive states on the pin\n    &:hover {\n      z-index: 1050;\n      height: 27px;\n      opacity: 0.5;\n      &::after {\n        top: -9px;\n        transition: top 0.1s ease-out;\n      }\n    }\n\n    &.highlight-event-marker {\n      border-color: $color-gray-scale-600;\n      z-index: 1055;\n      height: 25px;\n      &::after {\n        background-color: $color-gray-scale-600;\n        top: -9px;\n        transition: top 0.1s ease-out;\n      }\n    }\n\n  }\n}\n\n",
                    "styleUrl": "./timeline-event.component.scss"
                },
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.timeline-container {\n  border-radius: 5px;\n  display: inline-block;\n  width: 100%;\n  margin-bottom: 1.5rem;\n\n  .timeline-cursor-line {\n    position: absolute;\n    top: 19.78%;\n    border-left: 1px solid $color-highlight;\n    border-right: 1px solid white;\n\n  }\n}\n\n.timeline-icon {\n  font-size: 12px;\n  color: $color-lightest;\n  background-color: $color-gray-scale-400;\n  padding: 3px;\n  border-radius: 50%;\n  position: absolute;\n  top: -3px;\n  left: -15px;\n}\n\n.timeline-timeframe {\n  display: flex;\n  margin: 10px 0;\n  height: 10px;\n  position: relative;\n  border: 1px solid $color-medium-100;\n  border-bottom: 0;\n\n  .segment {\n    position: absolute;\n    height: 100%;\n    border-left: 1px solid $color-medium-100;\n    .segment-year {\n      position: absolute;\n      font-size: $font-size-smallest;\n      color: $color-medium;\n      left: -15px;\n      top: 12px;\n    }\n  }\n}\n\napp-category {\n  position: relative;\n}\n",
                    "styleUrl": "../timeline/timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"event\"\n  [ngStyle]=\"this.positionStyle\"\n  [ngClass]=\"applyEventClasses()\"\n  (dblclick)=\"showDetails()\"\n  (click)=\"toggleSelectEvent()\"\n  (mouseover)=\"highlightEvent()\"\n  (mouseout)=\"deHighlightEvent()\"\n  matTooltip=\"{{event.label}}\"\n  [matTooltipPosition]=\"eventIconTooltipPosition\">\n</div>\n\n"
        },
        {
            "name": "TimelineEventDetailNoteComponent",
            "id": "component-TimelineEventDetailNoteComponent-f5377948058df4a125e155032c1a4a75",
            "file": "src/app/timelines/timeline-event-detail-note/timeline-event-detail-note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-event-detail-note",
            "styleUrls": [
                "./timeline-event-detail-note.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-event-detail-note.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "note",
                    "line": 11,
                    "type": "EventNote"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\nimport { EventNote } from '../../models/events/event-note';\n\n@Component({\n  selector: 'app-timeline-event-detail-note',\n  templateUrl: './timeline-event-detail-note.component.html',\n  styleUrls: ['./timeline-event-detail-note.component.scss']\n})\nexport class TimelineEventDetailNoteComponent implements OnInit {\n  @Input() public note: EventNote;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./timeline-event-detail-note.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<li>\n  <!--<span *ngIf=\"note.note\" [innerHtml]=\"note.note | safeHtml\"></span>-->\n  <app-editor *ngIf=\"note.note\" [content]=\"note.note\"></app-editor>\n</li>\n"
        },
        {
            "name": "TimelineEventDetailsComponent",
            "id": "component-TimelineEventDetailsComponent-c3592b544e038f6c6fcf48db414a9a3f",
            "file": "src/app/timelines/timeline-event-details/timeline-event-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-event-details",
            "styleUrls": [
                "./timeline-event-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-event-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryEventId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatBottomSheetRef<TimelineEventDetailsComponent>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "displayNotes",
                    "type": "EventNote[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventLink",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isInCategory",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isShadow",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "numberOfAdditionalNotes",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "numberOfNotesToShow",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedCategory",
                    "type": "TimelineCategory",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedCategoryId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelineService",
                    "type": "TimelineService",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addCategoryEventToTimeline",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "categoryEventId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryEventId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "removeCategoryEventFromTimeline",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "categoryEventId",
                            "type": ""
                        },
                        {
                            "name": "isUpdate",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryEventId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isUpdate",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShadowState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\n\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\n\nimport { Timeline } from '../../models/timelines/timeline';\n\nimport { TimelineService } from '../../services/timeline.service';\nimport {TimelineCategory} from '../../models/timelines/timeline-category';\nimport {Category} from '../../models/category';\nimport {EventNote} from '../../models/events/event-note';\nimport {TimelineEvent} from '../../models/timelines/timeline-event';\n\nexport interface DialogData {\n  timelineEvent: TimelineEvent;\n  timeline: Timeline;\n  categoryEvents: Array<Category>;\n}\n\n@Component({\n  selector: 'app-timeline-event-details',\n  templateUrl: './timeline-event-details.component.html',\n  styleUrls: ['./timeline-event-details.component.scss']\n})\n\nexport class TimelineEventDetailsComponent {\n  public isShadow: boolean;\n  public selectedCategoryId: number;\n  public selectedCategory: TimelineCategory;\n  public categoryEventId: number;\n\n  public isEditMode: boolean;\n\n  public isInCategory: boolean;\n\n  public displayNotes: EventNote[];\n\n  public numberOfNotesToShow: number;\n  public numberOfAdditionalNotes: number;\n\n  public eventLink: string;\n\n  constructor(public dialogRef: MatBottomSheetRef<TimelineEventDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData,\n              public timelineService: TimelineService) {\n\n    const self = this;\n\n    this.isShadow = data.timelineEvent.isShadow;\n    this.selectedCategoryId = 0;\n    this.categoryEventId = 0;\n    this.selectedCategory = null;\n    this.isInCategory = false;\n    this.isEditMode = false;\n\n    this.displayNotes = [];\n    this.numberOfNotesToShow = 2;\n    this.numberOfAdditionalNotes = 0;\n\n    // check if this event is in a category or not\n    for (const category of this.data.timeline.categories) {\n      if (!category.events) {\n        category.events = [];\n      }\n\n      function idFound(ids) {\n        return ids[1] === self.data.timelineEvent.id.toString();\n      }\n\n      const categoryEventIndex = category.events.findIndex(idFound);\n\n      if (categoryEventIndex >= 0) {\n        this.isInCategory = true;\n        this.selectedCategory = category;\n        this.selectedCategoryId = category.id;\n        this.categoryEventId = category.events[categoryEventIndex][0];\n      }\n    }\n\n    if (this.data.timelineEvent.event.notes.length) {\n      for (let i = 0; i < this.data.timelineEvent.event.notes.length; i++) {\n        if (i < this.numberOfNotesToShow) {\n          this.displayNotes.push(this.data.timelineEvent.event.notes[i]);\n          continue;\n        }\n\n        break;\n      }\n    }\n\n    if (this.data.timelineEvent.event.notes.length > this.displayNotes.length) {\n      this.numberOfAdditionalNotes = this.data.timelineEvent.event.notes.length - this.displayNotes.length;\n    }\n\n    this.eventLink = '/manager/events/' + this.data.timelineEvent.event.id.toString();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.dismiss();\n  }\n\n  updateShadowState() {\n    // this is a change event, but does not have access to the event at the moment of the click event.\n    // As such false is equal to true and the other way around\n    let shadowState = false;\n\n    if (!this.isShadow) {\n      shadowState = true;\n    }\n\n    this.data.timelineEvent.isShadow = shadowState;\n\n    this.timelineService.patchEventApiTimeline(this.data.timelineEvent, this.data.timeline).subscribe(() => { });\n  }\n\n  addToCategory() {\n    let categoryToAdd: TimelineCategory = new TimelineCategory();\n\n    for (const category of this.data.timeline.categories) {\n      if (category.id === this.selectedCategoryId) {\n        categoryToAdd = category;\n      }\n    }\n\n    // event was not in a category and is being added to one\n    if (!this.selectedCategory) {\n      this.timelineService.createCategoryEventApiTimeline(categoryToAdd, this.data.timelineEvent.event).subscribe(response => {\n        this.categoryEventId = response.data.id;\n        this.selectedCategory = categoryToAdd;\n        this.selectedCategoryId = categoryToAdd.id;\n        this.isInCategory = true;\n\n        this.addCategoryEventToTimeline(this.data.timelineEvent, this.categoryEventId);\n      });\n\n    } else {\n      // event was in a category and is now being removed from all categories\n      if (this.selectedCategoryId == 0) {\n        this.timelineService.removeCategoryEventApiTimeline(this.categoryEventId).subscribe(() => {\n          this.removeCategoryEventFromTimeline(this.data.timelineEvent, this.categoryEventId, false);\n\n          this.selectedCategoryId = 0;\n          this.categoryEventId = 0;\n          this.selectedCategory = null;\n          this.isInCategory = false;\n        });\n\n        // event is was in category A and is being updated to category B\n      } else {\n        this.timelineService.removeCategoryEventApiTimeline(this.categoryEventId).subscribe(() => {\n          this.removeCategoryEventFromTimeline(this.data.timelineEvent, this.categoryEventId, true);\n\n          this.timelineService.createCategoryEventApiTimeline(categoryToAdd, this.data.timelineEvent.event).subscribe(secondResponse => {\n            this.categoryEventId = secondResponse.data.id;\n            this.selectedCategory = categoryToAdd;\n            this.selectedCategoryId = categoryToAdd.id;\n            this.isInCategory = true;\n\n            this.addCategoryEventToTimeline(this.data.timelineEvent, this.categoryEventId);\n          });\n        });\n      }\n    }\n  }\n\n  addCategoryEventToTimeline(event, categoryEventId) {\n    // add it to the list of available categories\n    this.selectedCategory.events.push([categoryEventId, event.id]);\n\n    // if this is the first event in the category add the category to the data object first\n    let thisCategory = null;\n\n    for (const category of this.data.categoryEvents) {\n      if (category.id === this.selectedCategoryId) {\n        thisCategory = category;\n      }\n    }\n\n    if (!thisCategory) {\n      thisCategory = new Category();\n      thisCategory.id = this.selectedCategory.id;\n      thisCategory.label = this.selectedCategory.label;\n      thisCategory.events = [];\n      thisCategory.people = [];\n\n      this.data.categoryEvents.push(thisCategory);\n    }\n\n    // add the event to the categoryEvents object so it reflects on the timeline\n    for (const category of this.data.categoryEvents) {\n      // remove event from the generic category if it's there\n      if (!category.id) {\n        if (event.formattedStartYear === event.formattedEndYear) {\n          for (let i = 0; i < category.singlePointEvents.length; i++) {\n            if (category.singlePointEvents[i].id === event.id) {\n              category.singlePointEvents.splice(i, 1);\n            }\n          }\n        } else {\n          for (let i = 0; i < category.multiPointEvents.length; i++) {\n            if (category.multiPointEvents[i].id === event.id) {\n              category.multiPointEvents.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      // add the event to the appropriate category\n      if (category.id === this.selectedCategoryId) {\n        if (event.formattedStartYear === event.formattedEndYear) {\n          category.singlePointEvents.push(event);\n        } else {\n          category.multiPointEvents.push(event);\n        }\n      }\n    }\n  }\n\n  removeCategoryEventFromTimeline(event, categoryEventId, isUpdate) {\n    // remove it from the list of available categories\n    for (const category of this.data.timeline.categories) {\n      if (category.events.length) {\n        for (let i = 0; i < category.events.length; i++) {\n          if (category.events[i][1] === event.id && category.events[i][0] === categoryEventId) {\n            category.events.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    // remove the event from the category events so that it is reflected on the timeline\n    for (const category of this.data.categoryEvents) {\n      // if actually removing from all categories and not just updating it to a new category then add it back to the generic category\n      if (!isUpdate) {\n        if (!category.id) {\n          if (event.formattedEndYear === event.formattedStartYear) {\n            category.singlePointEvents.push(event);\n          } else {\n            category.multiPointEvents.push(event);\n          }\n        }\n      }\n\n      if (category.id === this.selectedCategory.id) {\n        if (event.formattedEndYear === event.formattedStartYear) {\n          for (let i = 0; i < category.singlePointEvents.length; i++) {\n            if (category.singlePointEvents[i].id === event.id) {\n              category.singlePointEvents.splice(i, 1);\n            }\n          }\n        } else {\n          for (let i = 0; i < category.multiPointEvents.length; i++) {\n            if (category.multiPointEvents[i].id === event.id) {\n              category.multiPointEvents.splice(i, 1);\n            }\n          }\n        }\n\n        // if there are no more events in this category remove it from the main categoryEvents object\n        if (!category.singlePointEvents.length && !category.multiPointEvents.length) {\n          for (let i = 0; i < this.data.categoryEvents.length; i++) {\n            if (category.id === this.data.categoryEvents[i].id) {\n              this.data.categoryEvents.splice(i, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./timeline-event-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<TimelineEventDetailsComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<TimelineEventDetailsComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"app-drawer-bottom\" *ngIf=\"!isEditMode\">\n  <div class=\"app-drawer-bottom-body\">\n    <div class=\"app-drawer-bottom-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">\n          Event\n        </div>\n        <div class=\"app-drawer-heading\">\n          <a routerLink=\"{{eventLink}}\" (click)=\"onNoClick()\">\n              {{data.timelineEvent.event.label}}\n            <span class=\"material-icons\">\n              launch\n            </span>\n          </a>\n        </div>\n        <div class=\"app-drawer-year\">\n          <span>{{data.timelineEvent.event.formattedStartYear}}</span>\n          <span *ngIf=\"!data.timelineEvent.event.isSinglePointEvent\">- {{data.timelineEvent.event.formattedEndYear}} ({{data.timelineEvent.event.eventLength}} years)</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <app-editor class=\"app-drawer-description\" [content]=\"data.timelineEvent.event.description\"></app-editor>\n    </div>\n\n    <div class=\"app-drawer-settings\">\n      <div class=\"app-drawer-category\">\n        <!-- If the event is not assigned to any category -->\n          <mat-form-field>\n            <mat-label>Category</mat-label>\n            <mat-select [(ngModel)]=\"selectedCategoryId\" [(value)]=\"selectedCategoryId\" name=\"timeline_selected_category\" (selectionChange)=\"addToCategory()\">\n              <mat-option value=\"0\"></mat-option>\n              <mat-option *ngFor=\"let category of data.timeline.categories\" [value]=\"category.id\">{{category.label}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n      </div>\n\n      <div class=\"app-drawer-shadow\">\n        <mat-checkbox [(ngModel)]=\"isShadow\"\n                      (click)=\"updateShadowState()\"\n                      #checkbox=\"matCheckbox\">Shadow Event\n        </mat-checkbox>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TimelineEventListComponent",
            "id": "component-TimelineEventListComponent-31af95ebe83ffe021f25212b1f44351c",
            "file": "src/app/timelines/timeline-event-list/timeline-event-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-event-list",
            "styleUrls": [
                "./timeline-event-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-event-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categoryEvents",
                    "line": 21,
                    "type": "Array<Category>"
                },
                {
                    "name": "event",
                    "line": 19,
                    "type": "Event"
                },
                {
                    "name": "timeline",
                    "line": 20,
                    "type": "Timeline"
                },
                {
                    "name": "timelineEvent",
                    "line": 18,
                    "type": "TimelineEvent"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bottomSheet",
                    "type": "MatBottomSheet",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listOnly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showEditButton",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "styles",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyColorClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "applyStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "deHighlightEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "highlightEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "pinHighlight",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "showDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "toggleSelectEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\n\nimport { Event } from '../../models/events/event';\nimport {Timeline} from '../../models/timelines/timeline';\n\nimport { TimelineEventDetailsComponent } from '../timeline-event-details/timeline-event-details.component';\nimport {Category} from '../../models/category';\nimport {TimelineEvent} from '../../models/timelines/timeline-event';\n\n@Component({\n  selector: 'app-timeline-event-list',\n  templateUrl: './timeline-event-list.component.html',\n  styleUrls: ['./timeline-event-list.component.scss']\n})\n\nexport class TimelineEventListComponent implements OnInit {\n  @Input() public timelineEvent: TimelineEvent;\n  @Input() public event: Event;\n  @Input() public timeline: Timeline;\n  @Input() public categoryEvents: Array<Category>;\n\n  public isSelected: boolean;\n  public styles: object;\n\n  public showEditButton: boolean;\n\n  public listOnly: boolean;\n\n  constructor(public bottomSheet: MatBottomSheet) {\n\n  }\n\n  ngOnInit() {\n    this.isSelected = false;\n\n    this.listOnly = !this.timeline;\n\n    this.applyStyles();\n  }\n\n  applyColorClass() {\n    return 'grid-list-item-key';\n  }\n\n  pinHighlight() {\n    let classes = '';\n\n    if (!this.event.colorClass && this.event.listEventIsHighlighted) {\n      classes = 'highlight-item';\n    }\n\n    if (this.event.colorClass && this.event.listEventIsHighlighted) {\n      classes = 'highlight-range';\n    }\n\n    return classes;\n  }\n\n  applyStyles() {\n    this.styles = {\n      'background-color': this.event.colorClass\n    };\n  }\n\n  highlightEvent() {\n    this.showEditButton = true;\n\n    if (!this.isSelected) {\n      this.event.timelineEventIsHighlighted = true;\n    }\n  }\n\n  deHighlightEvent() {\n    this.showEditButton = false;\n\n    if (!this.isSelected) {\n      this.event.timelineEventIsHighlighted = false;\n    }\n  }\n\n  toggleSelectEvent() {\n    this.isSelected = !this.isSelected;\n    this.event.timelineEventIsHighlighted = this.isSelected;\n    this.event.listEventIsHighlighted = this.isSelected;\n  }\n\n  showDetails() {\n    this.bottomSheet.open(TimelineEventDetailsComponent as any, {\n      data: {\n        timelineEvent: this.timelineEvent,\n        timeline: this.timeline,\n        categoryEvents: this.categoryEvents\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./timeline-event-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"!listOnly\"\n     [ngClass]=\"pinHighlight()\"\n     (mouseover)=\"highlightEvent()\"\n     (mouseout)=\"deHighlightEvent()\"\n     (click)=\"toggleSelectEvent()\"\n     (dblclick)=\"showDetails()\"\n     class=\"grid-list-item\">\n\n  <span [ngClass]=\"applyColorClass()\" [ngStyle]=\"styles\"></span>\n\n  <span class=\"grid-list-item-year\">\n     {{event.formattedStartDate}}\n    <span *ngIf=\"event.formattedStartDate !== event.formattedEndDate\">- {{event.formattedEndDate}}</span>\n  </span>\n\n  <span class=\"grid-list-item-title\">\n    {{event.label}}\n  </span>\n</div>\n\n<div *ngIf=\"listOnly\" class=\"grid-list-item\">\n  <span class=\"grid-list-item-key\" [ngStyle]=\"styles\"></span>\n\n  <span class=\"grid-list-item-year\">\n     {{event.formattedStartYear}}\n    <span *ngIf=\"event.formattedStartYear !== event.formattedEndYear\">- {{event.formattedEndYear}}</span>\n  </span>\n\n  <span class=\"grid-list-item-title\">\n    {{event.label}}\n  </span>\n</div>\n"
        },
        {
            "name": "TimelinePersonComponent",
            "id": "component-TimelinePersonComponent-4f40b53d06ab06dda3d632ab055e6664",
            "file": "src/app/timelines/timeline-person/timeline-person.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-person",
            "styleUrls": [
                "../timeline/timeline.component.scss",
                "./timeline-person.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-person.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "person",
                    "line": 10,
                    "type": "Person"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "personIconTooltipPosition",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positionStyle",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "makePositionStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Person} from '../../models/persons/person';\n\n@Component({\n  selector: 'app-timeline-person',\n  templateUrl: './timeline-person.component.html',\n  styleUrls: ['../timeline/timeline.component.scss', './timeline-person.component.scss']\n})\nexport class TimelinePersonComponent implements OnInit {\n  @Input() public person: Person;\n\n  public positionStyle: object;\n  public personIconTooltipPosition: string;\n\n  constructor() {\n    this.personIconTooltipPosition = 'above';\n  }\n\n  ngOnInit() {\n    this.makePositionStyle();\n  }\n\n  makePositionStyle() {\n    this.positionStyle = {\n      left: this.person.timelineStartLocation + '%',\n      width: this.person.timelineEndLocation + '%'\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.timeline-container {\n  border-radius: 5px;\n  display: inline-block;\n  width: 100%;\n  margin-bottom: 1.5rem;\n\n  .timeline-cursor-line {\n    position: absolute;\n    top: 19.78%;\n    border-left: 1px solid $color-highlight;\n    border-right: 1px solid white;\n\n  }\n}\n\n.timeline-icon {\n  font-size: 12px;\n  color: $color-lightest;\n  background-color: $color-gray-scale-400;\n  padding: 3px;\n  border-radius: 50%;\n  position: absolute;\n  top: -3px;\n  left: -15px;\n}\n\n.timeline-timeframe {\n  display: flex;\n  margin: 10px 0;\n  height: 10px;\n  position: relative;\n  border: 1px solid $color-medium-100;\n  border-bottom: 0;\n\n  .segment {\n    position: absolute;\n    height: 100%;\n    border-left: 1px solid $color-medium-100;\n    .segment-year {\n      position: absolute;\n      font-size: $font-size-smallest;\n      color: $color-medium;\n      left: -15px;\n      top: 12px;\n    }\n  }\n}\n\napp-category {\n  position: relative;\n}\n",
                    "styleUrl": "../timeline/timeline.component.scss"
                },
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n\n.person {\n  // Styles the event ranges\n  position: absolute;\n  background-color: $color-gray-scale-600;\n  height: 100%;\n  bottom: 0px;\n\n  &.highlight-event-marker {\n    border: 2px solid $color-gray-scale-600;\n    .timeline-icon {\n      top: -5px;\n    }\n  }\n  &:hover {\n    opacity: 0.5;\n  }\n\n  .person-name {\n    position: absolute;\n    left: 2px;\n    bottom: 0px;\n    color: $color-lightest;\n    font-size: 0.4rem;\n    text-transform: uppercase;\n    font-weight: 500;\n    letter-spacing: 0.5px;\n  }\n}\n",
                    "styleUrl": "./timeline-person.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"person\"\n  [ngStyle]=\"this.positionStyle\"\n  matTooltip=\"{{person.firstName}} {{person.lastName}}\"\n  [matTooltipPosition]=\"personIconTooltipPosition\">\n\n  <div class=\"person-name\">{{person.firstName}} {{person.lastName}}</div>\n</div>\n"
        },
        {
            "name": "TimelinePersonDetailsComponent",
            "id": "component-TimelinePersonDetailsComponent-75a356b738faae4a096f8a7f06ba041d",
            "file": "src/app/timelines/timeline-person-details/timeline-person-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-person-details",
            "styleUrls": [
                "./timeline-person-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-person-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatBottomSheetRef<TimelinePersonDetailsComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\n\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\n\nimport {Person} from '../../models/persons/person';\nimport {Timeline} from '../../models/timelines/timeline';\n\nexport interface DialogData {\n  person: Person;\n  timeline: Timeline;\n}\n\n@Component({\n  selector: 'app-timeline-person-details',\n  templateUrl: './timeline-person-details.component.html',\n  styleUrls: ['./timeline-person-details.component.scss']\n})\n\nexport class TimelinePersonDetailsComponent implements OnInit {\n\n  constructor(public dialogRef: MatBottomSheetRef<TimelinePersonDetailsComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: DialogData) { }\n\n  ngOnInit() { }\n\n  onNoClick(): void {\n    this.dialogRef.dismiss();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./timeline-person-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<TimelinePersonDetailsComponent>"
                    },
                    {
                        "name": "data",
                        "type": "DialogData"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatBottomSheetRef<TimelinePersonDetailsComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-drawer-bottom\">\n  <div class=\"app-drawer-bottom-body\">\n    <div class=\"app-drawer-bottom-header\">\n      <div class=\"app-drawer-title\">\n        <div class=\"app-drawer-subheading\">Person</div>\n        <div class=\"app-drawer-heading\">{{data.person.firstName}}\n          <span *ngIf=\"data.person.middleName\"> {{data.person.middleName}}</span>\n          <span *ngIf=\"data.person.lastName\"> {{data.person.lastName}}</span>\n        </div>\n        <div class=\"app-drawer-year\">\n          {{data.person.formattedBirthYear}} - {{data.person.formattedDeathYear}} ({{data.person.age}} years)\n        </div>\n      </div>\n    </div>\n\n    <div class=\"app-drawer-content\">\n      <app-editor *ngIf=\"data.person.description\" class=\"app-drawer-description\" [content]=\"data.person.description\"></app-editor>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TimelinePersonListComponent",
            "id": "component-TimelinePersonListComponent-9e911bb8d4d018e1f7b135fc9ef41b97",
            "file": "src/app/timelines/timeline-person-list/timeline-person-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-person-list",
            "styleUrls": [
                "./timeline-person-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-person-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "person",
                    "line": 16,
                    "type": "Person"
                },
                {
                    "name": "timeline",
                    "line": 17,
                    "type": "Timeline"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bottomSheet",
                    "type": "MatBottomSheet",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyColorClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "showDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\n\nimport {Person} from '../../models/persons/person';\nimport {Timeline} from '../../models/timelines/timeline';\n\nimport { TimelinePersonDetailsComponent } from '../timeline-person-details/timeline-person-details.component';\n\n@Component({\n  selector: 'app-timeline-person-list',\n  templateUrl: './timeline-person-list.component.html',\n  styleUrls: ['./timeline-person-list.component.scss']\n})\nexport class TimelinePersonListComponent implements OnInit {\n  @Input() public person: Person;\n  @Input() public timeline: Timeline;\n\n  public isSelected: boolean;\n\n  constructor(public bottomSheet: MatBottomSheet) { }\n\n  ngOnInit() {\n    this.isSelected = false;\n  }\n\n  applyColorClass() {\n    let classes = 'timeline-listed-event-key';\n\n    if (this.person.colorClass) {\n      classes = classes + ' color-' + this.person.colorClass;\n    }\n\n    return classes;\n  }\n\n  showDetails() {\n    this.bottomSheet.open(TimelinePersonDetailsComponent as any, {\n      data: {\n        person: this.person,\n        timeline: this.timeline\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/_variables.scss';\n\n.timeline-listed-person {\n  padding: 10px 20px;\n  border: 1px solid transparent;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n\n  &.highlight-person,\n  &:hover {\n    background-color: $color-active-light;\n    border-top-color: lighten($color-active, 40);\n    border-bottom-color: lighten($color-active, 40);\n    color: $color-darkest;\n  }\n  &.active {\n    color: red;\n    position: relative;\n    ::after {\n      position: absolute;\n      content:\"\";\n      width: 5px;\n      height: 100%;\n    }\n  }\n}\n\n.timeline-listed-person-key {\n  width: 8px;\n  height: 8px;\n  margin-right: 10px;\n  background-color: transparent;\n  display: block;\n}\n\n.timeline-listed-person-year {\n  color: $color-gray-scale-600;\n  font-weight: 500;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./timeline-person-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--<div [ngClass]=\"person.listEventIsHighlighted ? 'highlight-person' : ''\"-->\n     <!--(mouseover)=\"highlightEvent()\"-->\n     <!--(mouseout)=\"deHighlightEvent()\"-->\n     <!--(dblclick)=\"showDetails()\"-->\n     <!--class=\"timeline-listed-person\">-->\n<div [ngClass]=\"person.listEventIsHighlighted ? 'highlight-person' : ''\"\n     (dblclick)=\"showDetails()\"\n     class=\"grid-list-item\">\n  <span [ngClass]=\"applyColorClass()\"></span>\n  <span class=\"grid-list-item-year\">\n     {{person.formattedBirthYear}} - {{person.formattedDeathYear}}\n  </span>\n  <span class=\"grid-list-item-title\">\n    {{person.firstName}} {{person.lastName}}\n  </span>\n</div>\n"
        },
        {
            "name": "TimelinesComponent",
            "id": "component-TimelinesComponent-10ad5f2d62f7263de7ba5fda7a13dc03",
            "file": "src/app/timelines/timelines.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timelines",
            "styleUrls": [
                "./timelines.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timelines.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allTimelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previousPage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAllToggleChecked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showAllToggleColor",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timeline",
                    "type": "Timeline",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "timelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "userTimelines",
                    "type": "Timeline[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "getAllTimelines",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserTimelines",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnotherPage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeNewTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "toggleTimelines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "turnPage",
                    "args": [
                        {
                            "name": "timeline",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "jsdoctags": [
                        {
                            "name": "timeline",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Timeline } from '../models/timelines/timeline';\n\nimport { TimelineService } from '../services/timeline.service';\n\nimport { AddTimelineDialogComponent } from '../utilities/add-timeline-dialog/add-timeline-dialog.component';\nimport {ThemePalette} from '@angular/material/core';\n\n@Component({\n  selector: 'app-timelines',\n  templateUrl: './timelines.component.html',\n  styleUrls: ['./timelines.component.scss']\n})\n\nexport class TimelinesComponent implements OnInit {\n  public timelines: Timeline[];\n  public timeline: Timeline;\n\n  public userTimelines: Timeline[];\n  public allTimelines: Timeline[];\n\n  public totalResults: number;\n  public nextPage: string;\n  public previousPage: string;\n\n  public showAllToggleColor: ThemePalette;\n  public showAllToggleChecked: boolean;\n\n  private userId;\n\n  constructor(public dialog: MatDialog, private timelineService: TimelineService) {\n    this.showAllToggleChecked = false;\n    this.showAllToggleColor = 'primary';\n\n    this.userId = localStorage.getItem('user.id');\n\n    this.timelines = [];\n    this.userTimelines = [];\n    this.allTimelines = [];\n\n    this.initializeNewTimeline();\n\n    this.getUserTimelines(null, false);\n  }\n\n  ngOnInit() {\n  }\n\n  initializeNewTimeline() {\n    this.timeline = new Timeline();\n    this.timeline.initializeNewTimeline();\n  }\n\n  getUserTimelines(path: string, isAnotherPage: boolean) {\n    if (!this.userTimelines.length || isAnotherPage) {\n      this.timelineService.getApiTimelines(path, this.userId, '5', '1', null, null, null, null, isAnotherPage).subscribe(response => {\n        for (const timeline of response.timelines) {\n          this.timelineService.setTimeline(timeline);\n        }\n\n        this.timelines = this.timelineService.getTimelines();\n        this.userTimelines = this.timelineService.getTimelines();\n\n        this.totalResults = response.total;\n        this.nextPage = response.links.next;\n        this.previousPage = response.links.prev;\n      });\n    } else {\n      this.timelines = this.userTimelines;\n    }\n  }\n\n  getAllTimelines(path: string, isAnotherPage: boolean) {\n    if (!this.allTimelines.length || isAnotherPage) {\n      this.timelineService.getApiTimelines(path, null, '5', '1', null, null, null, null, isAnotherPage).subscribe(response => {\n        for (const timeline of response.timelines) {\n          this.timelineService.setTimeline(timeline);\n        }\n\n        this.timelines = this.timelineService.getTimelines();\n        this.allTimelines = this.timelineService.getTimelines();\n\n        this.totalResults = response.total;\n        this.nextPage = response.links.next;\n        this.previousPage = response.links.prev;\n      });\n    } else {\n      this.timelines = this.allTimelines;\n    }\n  }\n\n  toggleTimelines() {\n    if (this.showAllToggleChecked) {\n      this.getAllTimelines(null, false);\n    } else {\n      this.getUserTimelines(null, false);\n    }\n  }\n\n  createTimeline() {\n    const dialogRef = this.dialog.open(AddTimelineDialogComponent, {\n      width: '750px',\n      data: {\n        showExisting: false,\n        showNew: true\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(responseData => {\n      let timeline = responseData.timeline;\n\n      if (timeline) {\n        this.timelineService.createApiTimeline(timeline).subscribe(response => {\n          timeline.id = response.data.id;\n\n          this.timelineService.setTimeline(timeline);\n\n          this.timelines.unshift(timeline);\n          this.allTimelines.unshift(timeline);\n          this.userTimelines.unshift(timeline);\n\n          this.timelineService.addUserToTimeline(timeline, this.userId).subscribe(() => {});\n        });\n      }\n    });\n  }\n\n  turnPage(timeline) {\n    if (timeline.pageIndex < timeline.previousPageIndex) {\n      if (this.showAllToggleChecked) {\n        this.getAllTimelines(this.previousPage, true);\n      } else {\n        this.getUserTimelines(this.previousPage, true);\n      }\n    } else if (timeline.pageIndex > timeline.previousPageIndex) {\n      if (this.showAllToggleChecked) {\n        this.getAllTimelines(this.nextPage, true);\n      } else {\n        this.getUserTimelines(this.nextPage, true);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/_cards.scss';\n@import '../../styles/_drawer-side.scss';\n@import '../../styles/_sections.scss';\n",
                    "styleUrl": "./timelines.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timelineService",
                        "type": "TimelineService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"app-body-content\">\n  <div class=\"app-content-toolbar\">\n    <h1>Timelines</h1>\n\n    <mat-slide-toggle\n        [color]=\"showAllToggleColor\"\n        [(ngModel)]=\"showAllToggleChecked\"\n        (ngModelChange)=\"toggleTimelines()\">\n      Show All Timelines\n    </mat-slide-toggle>\n\n    <button mat-flat-button class=\"material-icons\" color=\"primary\" (click)=\"createTimeline()\">add</button>\n  </div>\n\n  <div class=\"app-cards-container cards-xlarge\">\n    <app-timeline-card\n      *ngFor=\"let timeline of timelines\" [timeline]=\"timeline\" [canDelete]=\"false\"\n      class=\"app-card\">\n    </app-timeline-card>\n  </div>\n\n  <mat-paginator length=\"{{totalResults}}\" pageSize=\"5\" (page)=\"turnPage($event)\"></mat-paginator>\n</div>\n"
        },
        {
            "name": "TopicComponent",
            "id": "component-TopicComponent-9c823392a012688b148011590d7e96a4",
            "file": "src/app/brainstorms/brainstorm/topic/topic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-topic",
            "styleUrls": [
                "./topic.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./topic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "topic",
                    "line": 11,
                    "type": "BrainstormTopic"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nimport {BrainstormTopic} from '../../../models/brainstorm-topic';\n\n@Component({\n  selector: 'app-topic',\n  templateUrl: './topic.component.html',\n  styleUrls: ['./topic.component.scss']\n})\nexport class TopicComponent implements OnInit {\n  @Input() public topic: BrainstormTopic;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./topic.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>{{topic.label}}</h2>\n\n<app-thought *ngFor=\"let thought of topic.thoughts\" [thought]=\"thought\"></app-thought>\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-528ec57909b3a0504d8d45a5d4fd093b",
            "file": "src/app/auth/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [
                "./user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "selectUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {UserService} from '../../services/user.service';\nimport {User} from '../../models/user';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent implements OnInit {\n  public users: User[];\n  public user: User;\n\n  constructor(private router: Router, private userService: UserService) {\n    if (!this.userService.getUsers().length) {\n      this.userService.getApiUsers(null).subscribe((response) => {\n        for (const user of response.users) {\n          this.userService.setUser(user);\n        }\n\n        this.users = this.userService.getUsers();\n      });\n    } else {\n      this.users = this.userService.getUsers();\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  selectUser(user) {\n    this.userService.setSingleUser(user);\n\n    this.user = this.userService.getUser();\n\n    localStorage.setItem('user.id', user.id);\n    localStorage.setItem('user.firstName', user.firstName);\n    localStorage.setItem('user.lastName', user.lastName);\n\n    let returnPath = localStorage.getItem('returnPath');\n\n    localStorage.setItem('returnPath', '');\n\n    if (returnPath && returnPath.length) {\n      this.router.navigate([returnPath]).then();\n    } else {\n      this.router.navigate(['/dashboard']).then();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-select {\n  border: 1px solid black;\n  margin: 10px;\n  border-radius: 5px;\n  width: 400px;\n  height: 100px;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 100px;\n  cursor: pointer;\n  background-color: lightgray;\n  font-weight: bold;\n}\n",
                    "styleUrl": "./user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"user\">\n  Current User: {{user.firstName}} {{user.lastName}}\n</div>\n\n<div *ngIf=\"users\">\n  <div *ngFor=\"let user of users\" class=\"user-select\" (click)=\"selectUser(user)\">\n    {{user.firstName}} {{user.lastName}}\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthorInterceptor"
                        },
                        {
                            "name": "AuthorService"
                        },
                        {
                            "name": "BrainstormInterceptor"
                        },
                        {
                            "name": "BrainstormService"
                        },
                        {
                            "name": "ChartInterceptor"
                        },
                        {
                            "name": "EraService"
                        },
                        {
                            "name": "EssayInterceptor"
                        },
                        {
                            "name": "EssayService"
                        },
                        {
                            "name": "EventInterceptor"
                        },
                        {
                            "name": "EventService"
                        },
                        {
                            "name": "MonthService"
                        },
                        {
                            "name": "PersonInterceptor"
                        },
                        {
                            "name": "PersonService"
                        },
                        {
                            "name": "ProjectInterceptor"
                        },
                        {
                            "name": "SourceInterceptor"
                        },
                        {
                            "name": "SourceService"
                        },
                        {
                            "name": "TimelineInterceptor"
                        },
                        {
                            "name": "UserInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddBrainstormDialogComponent"
                        },
                        {
                            "name": "AddChartDialogComponent"
                        },
                        {
                            "name": "AddProjectDialogComponent"
                        },
                        {
                            "name": "AddTimelineDialogComponent"
                        },
                        {
                            "name": "AddUserDialogComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AuthorCardComponent"
                        },
                        {
                            "name": "AuthorDetailsComponent"
                        },
                        {
                            "name": "AuthorsComponent"
                        },
                        {
                            "name": "BrainstormCardComponent"
                        },
                        {
                            "name": "BrainstormComponent"
                        },
                        {
                            "name": "BrainstormsComponent"
                        },
                        {
                            "name": "CategoryComponent"
                        },
                        {
                            "name": "ChartCardComponent"
                        },
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "ChartDisplayComponent"
                        },
                        {
                            "name": "ChartsComponent"
                        },
                        {
                            "name": "ConfirmRemovalComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "EditorComponent"
                        },
                        {
                            "name": "EditorSelectChartComponent"
                        },
                        {
                            "name": "EditorSelectEventComponent"
                        },
                        {
                            "name": "EditorSelectPersonComponent"
                        },
                        {
                            "name": "EditorSelectSourceComponent"
                        },
                        {
                            "name": "EditorSelectTimelineComponent"
                        },
                        {
                            "name": "EssayCardComponent"
                        },
                        {
                            "name": "EssayChartDetailsComponent"
                        },
                        {
                            "name": "EssayComponent"
                        },
                        {
                            "name": "EssayEventComponent"
                        },
                        {
                            "name": "EssayEventDetailsComponent"
                        },
                        {
                            "name": "EssayNoteComponent"
                        },
                        {
                            "name": "EssayPersonComponent"
                        },
                        {
                            "name": "EssayPersonDetailsComponent"
                        },
                        {
                            "name": "EssayReferenceComponent"
                        },
                        {
                            "name": "EssayReferenceDetailsComponent"
                        },
                        {
                            "name": "EssayTimelineComponent"
                        },
                        {
                            "name": "EssayTimelineDetailsComponent"
                        },
                        {
                            "name": "EssaysComponent"
                        },
                        {
                            "name": "EventCardComponent"
                        },
                        {
                            "name": "EventDetailsAddTimelineComponent"
                        },
                        {
                            "name": "EventDetailsComponent"
                        },
                        {
                            "name": "EventDetailsNoteComponent"
                        },
                        {
                            "name": "EventNoteComponent"
                        },
                        {
                            "name": "EventTimelineComponent"
                        },
                        {
                            "name": "EventsComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MessageDialogComponent"
                        },
                        {
                            "name": "PersonCardComponent"
                        },
                        {
                            "name": "PersonDetailsAddBiographyComponent"
                        },
                        {
                            "name": "PersonDetailsAddTimelineComponent"
                        },
                        {
                            "name": "PersonDetailsComponent"
                        },
                        {
                            "name": "PersonDetailsNoteComponent"
                        },
                        {
                            "name": "PersonNoteComponent"
                        },
                        {
                            "name": "PersonsComponent"
                        },
                        {
                            "name": "ProjectCardComponent"
                        },
                        {
                            "name": "ProjectDetailsComponent"
                        },
                        {
                            "name": "ProjectsComponent"
                        },
                        {
                            "name": "QuickAuthorComponent"
                        },
                        {
                            "name": "QuickBrainstormTopicComponent"
                        },
                        {
                            "name": "QuickEssayComponent"
                        },
                        {
                            "name": "QuickEventComponent"
                        },
                        {
                            "name": "QuickPersonComponent"
                        },
                        {
                            "name": "QuickSourceComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        },
                        {
                            "name": "SourceCardComponent"
                        },
                        {
                            "name": "SourceDetailsComponent"
                        },
                        {
                            "name": "SourceDetailsNoteComponent"
                        },
                        {
                            "name": "SourceNoteExportComponent"
                        },
                        {
                            "name": "SourcesComponent"
                        },
                        {
                            "name": "ThoughtComponent"
                        },
                        {
                            "name": "TimelineCardComponent"
                        },
                        {
                            "name": "TimelineCategoriesComponent"
                        },
                        {
                            "name": "TimelineCategoryComponent"
                        },
                        {
                            "name": "TimelineComponent"
                        },
                        {
                            "name": "TimelineDisplayComponent"
                        },
                        {
                            "name": "TimelineEventComponent"
                        },
                        {
                            "name": "TimelineEventDetailNoteComponent"
                        },
                        {
                            "name": "TimelineEventDetailsComponent"
                        },
                        {
                            "name": "TimelineEventListComponent"
                        },
                        {
                            "name": "TimelinePersonComponent"
                        },
                        {
                            "name": "TimelinePersonDetailsComponent"
                        },
                        {
                            "name": "TimelinePersonListComponent"
                        },
                        {
                            "name": "TimelinesComponent"
                        },
                        {
                            "name": "TopicComponent"
                        },
                        {
                            "name": "UserComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/manager/events/event-note/event-note.stories.ts",
                "type": "object",
                "defaultValue": "{\n  onPinTask: action('onPinTask'),\n  onArchiveTask: action('onArchiveTask'),\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: 'http://54.210.108.154:5000',\n  s3Bucket: 'prod.history'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://127.0.0.1:5000',\n  s3Bucket: 'dev.history'\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/manager/events/event-note/event-note.stories.ts",
                "type": "Story<EventNoteComponent>",
                "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ChartFontFamilies",
                "childs": [
                    {
                        "name": "DEFAULT",
                        "value": "'Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif'"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enums/chart-font-families.ts"
            },
            {
                "name": "ChartLegendAlignments",
                "childs": [
                    {
                        "name": "START",
                        "value": "start"
                    },
                    {
                        "name": "CENTER",
                        "value": "center"
                    },
                    {
                        "name": "END",
                        "value": "end"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enums/legend-alignments.ts"
            },
            {
                "name": "ChartTitlePositions",
                "childs": [
                    {
                        "name": "TOP",
                        "value": "top"
                    },
                    {
                        "name": "LEFT",
                        "value": "left"
                    },
                    {
                        "name": "BOTTOM",
                        "value": "bottom"
                    },
                    {
                        "name": "RIGHT",
                        "value": "right"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enums/chart-title-positions.ts"
            },
            {
                "name": "ChartType",
                "childs": [
                    {
                        "name": "LINE",
                        "value": "line"
                    },
                    {
                        "name": "BAR",
                        "value": "bar"
                    },
                    {
                        "name": "HORIZONTAL_BAR",
                        "value": "horizontalBar"
                    },
                    {
                        "name": "PIE",
                        "value": "pie"
                    },
                    {
                        "name": "DOUGHNUT",
                        "value": "doughnut"
                    },
                    {
                        "name": "POLAR_AREA",
                        "value": "polarArea"
                    },
                    {
                        "name": "RADAR",
                        "value": "radar"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/enums/chart-types.ts"
            }
        ],
        "groupedVariables": {
            "src/app/manager/events/event-note/event-note.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/manager/events/event-note/event-note.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  onPinTask: action('onPinTask'),\n  onArchiveTask: action('onArchiveTask'),\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/manager/events/event-note/event-note.stories.ts",
                    "type": "Story<EventNoteComponent>",
                    "defaultValue": "args => ({\n  props: {\n    ...args,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: 'http://54.210.108.154:5000',\n  s3Bucket: 'prod.history'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://127.0.0.1:5000',\n  s3Bucket: 'dev.history'\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/enums/chart-font-families.ts": [
                {
                    "name": "ChartFontFamilies",
                    "childs": [
                        {
                            "name": "DEFAULT",
                            "value": "'Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif'"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enums/chart-font-families.ts"
                }
            ],
            "src/app/enums/legend-alignments.ts": [
                {
                    "name": "ChartLegendAlignments",
                    "childs": [
                        {
                            "name": "START",
                            "value": "start"
                        },
                        {
                            "name": "CENTER",
                            "value": "center"
                        },
                        {
                            "name": "END",
                            "value": "end"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enums/legend-alignments.ts"
                }
            ],
            "src/app/enums/chart-title-positions.ts": [
                {
                    "name": "ChartTitlePositions",
                    "childs": [
                        {
                            "name": "TOP",
                            "value": "top"
                        },
                        {
                            "name": "LEFT",
                            "value": "left"
                        },
                        {
                            "name": "BOTTOM",
                            "value": "bottom"
                        },
                        {
                            "name": "RIGHT",
                            "value": "right"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enums/chart-title-positions.ts"
                }
            ],
            "src/app/enums/chart-types.ts": [
                {
                    "name": "ChartType",
                    "childs": [
                        {
                            "name": "LINE",
                            "value": "line"
                        },
                        {
                            "name": "BAR",
                            "value": "bar"
                        },
                        {
                            "name": "HORIZONTAL_BAR",
                            "value": "horizontalBar"
                        },
                        {
                            "name": "PIE",
                            "value": "pie"
                        },
                        {
                            "name": "DOUGHNUT",
                            "value": "doughnut"
                        },
                        {
                            "name": "POLAR_AREA",
                            "value": "polarArea"
                        },
                        {
                            "name": "RADAR",
                            "value": "radar"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/enums/chart-types.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "DashboardComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "user",
                        "component": "UserComponent"
                    },
                    {
                        "path": "manager/sources",
                        "component": "SourcesComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/sources/:id",
                        "component": "SourceDetailsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/authors",
                        "component": "AuthorsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/authors/:id",
                        "component": "AuthorDetailsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/persons",
                        "component": "PersonsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/persons/:id",
                        "component": "PersonDetailsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/events",
                        "component": "EventsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/events/:id",
                        "component": "EventDetailsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/charts",
                        "component": "ChartsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "manager/charts/:id",
                        "component": "ChartComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "timelines",
                        "component": "TimelinesComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "timeline/:id",
                        "component": "TimelineComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "essays",
                        "component": "EssaysComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "essay/:id",
                        "component": "EssayComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "brainstorming",
                        "component": "BrainstormsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "brainstorming/:id",
                        "component": "BrainstormComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "projects",
                        "component": "ProjectsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "projects/:id",
                        "component": "ProjectDetailsComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "dashboard",
                        "component": "DashboardComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorms/brainstorm-card/brainstorm-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrainstormCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorms/brainstorm/brainstorm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrainstormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorms/brainstorm/quick-brainstorm-topic/quick-brainstorm-topic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickBrainstormTopicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorms/brainstorm/thought/thought.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThoughtComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorms/brainstorm/thought/thought.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReturnRemoveData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorms/brainstorm/topic/topic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorms/brainstorms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrainstormsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-card/essay-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-chart-details/essay-chart-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayChartDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-chart-details/essay-chart-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-event-details/essay-event-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayEventDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-event-details/essay-event-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-event/essay-event.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-note/essay-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-person-details/essay-person-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayPersonDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-person-details/essay-person-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-person/essay-person.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayPersonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-reference-details/essay-reference-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayReferenceDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-reference-details/essay-reference-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-reference/essay-reference.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayReferenceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-timeline-details/essay-timeline-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayTimelineDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-timeline-details/essay-timeline-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay-timeline/essay-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essay/essay.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/123",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/essays.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EssaysComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/quick-essay/quick-essay.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickEssayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/quick-essay/quick-essay.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuickEssayReturnData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/essays/quick-essay/quick-essay.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/authors/author-card/author-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/authors/author-details/author-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/authors/authors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/authors/quick-author/quick-author.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickAuthorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/charts/chart-card/chart-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/charts/chart-display/chart-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/charts/chart/chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/charts/charts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-card/event-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-details/event-details-add-timeline/event-details-add-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventDetailsAddTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-details/event-details-note/event-details-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventDetailsNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-details/event-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-note/event-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-note/event-note.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-note/event-note.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/event-timeline/event-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/events.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/quick-event/quick-event.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/quick-event/quick-event.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuickEventReturnData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/events/quick-event/quick-event.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/person-card/person-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/person-details/person-details-add-biography/person-details-add-biography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonDetailsAddBiographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/person-details/person-details-add-timeline/person-details-add-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonDetailsAddTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/person-details/person-details-note/person-details-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonDetailsNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/person-details/person-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/55",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/person-note/person-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/persons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/quick-person/quick-person.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickPersonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/quick-person/quick-person.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuickPersonReturnData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/persons/quick-person/quick-person.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/sources/quick-source/quick-source.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickSourceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/sources/source-card/source-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SourceCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/sources/source-details/source-details-note/source-details-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SourceDetailsNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/sources/source-details/source-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SourceDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/sources/source-note-export/source-note-export.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SourceNoteExportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/manager/sources/sources.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SourcesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/models/auth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Auth",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/author.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Author",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/brainstorm-thought.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormThought",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/brainstorm-topic.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormTopic",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/brainstorm.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Brainstorm",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/brainstorms/posts/brainstorm-user-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormUserPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/category.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-dataset-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartDatasetData",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-dataset.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartDataset",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-label.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartLabel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AxesOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LegendLabelOptions",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LegendOptions",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScalesOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TickOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TitleOptions",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TooltipOptions",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/models/chart.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Chart",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/era.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Era",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay-note.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayNote",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay-person.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayPerson",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay-reference.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayReference",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay-timeline.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayTimeline",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay-type.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayType",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay-user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayUser",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/essay.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Essay",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/posts/essay-event-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayEventPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/posts/essay-note-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayNotePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/posts/essay-person-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayPersonPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/posts/essay-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/posts/essay-reference-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayReferencePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/posts/essay-timeline-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayTimelinePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/posts/essay-user-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayUserPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/essays/responses/essay-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EssayResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/events/event-note.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventNote",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/events/event-timeline.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventTimeline",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/events/event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Event",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/models/events/posts/event-note-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventNotePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/events/posts/event-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/month.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Month",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/persons/person-biography.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonBiography",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/persons/person-note.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonNote",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/persons/person-timeline.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonTimeline",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/persons/person.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Person",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/author-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthorPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/brainstorm-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/brainstorm-thought-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormThoughtPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/brainstorm-topic-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormTopicPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/brainstorm-topic-thought-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormTopicThoughtPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-dataset-data-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartDatasetDataPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-dataset-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartDatasetPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-label-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartLabelPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-legend-label-options-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartLegendLabelOptionsPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-legend-options-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartLegendOptionsPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-options-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartOptionsPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-title-options-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartTitleOptionsPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/chart-tooltip-options-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartTooltipOptionsPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/person-biography-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonBiographyPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/person-note-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonNotePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/person-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/source-author-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SourceAuthorPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/source-note-brainstorm-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SourceNoteBrainstormPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/source-note-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SourceNotePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/source-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SourcePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/timeline-category-event-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineCategoryEventPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/timeline-category-person-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineCategoryPersonPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/timeline-category-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineCategoryPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/timeline-event-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineEventPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/timeline-person-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelinePersonPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/posts/timeline-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelinePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-brainstorm-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectBrainstormPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-chart-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectChartPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-essay-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectEssayPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-event-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectEventPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-person-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectPersonPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-timeline-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectTimelinePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/posts/project-user-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectUserPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/project-brainstorm.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectBrainstorm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/project-chart.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectChart",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/project-essay.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectEssay",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/project-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/project-person.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectPerson",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/project-timeline.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectTimeline",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/project.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Project",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/projects/responses/project-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/author-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthorResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/brainstorm-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BrainstormResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/chart-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/event-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/event-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventTimelinesResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/event-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineEventsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/person-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonBiographiesResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/person-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/person-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersonTimelinesResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/source-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SourceResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/responses/timeline-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/source-note-brainstorm.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SourceNoteBrainstorm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/source-note.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SourceNote",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/source.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Source",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/models/timelines/posts/timeline-user-post.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineUserPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/timelines/timeline-category.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineCategory",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/timelines/timeline-event.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelineEvent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/timelines/timeline-person.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimelinePerson",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/timelines/timeline.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Timeline",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/users/responses/user-response.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/htmlSanitizer.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/projects/project-card/project-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/projects/project-details/project-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/projects/projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/author.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthorService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/brainstorm.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BrainstormService",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/services/chart-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/chart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartService",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/services/era.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EraService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/essay.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EssayService",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/services/event.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/services/image-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/author.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/brainstorm.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "BrainstormInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/chart.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ChartInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/essay.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "EssayInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/event.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "EventInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/person.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "PersonInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/project.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ProjectInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/source.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "SourceInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/timeline.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TimelineInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/user.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "UserInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/month.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonthService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/person.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PersonService",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/services/project.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/services/source.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SourceService",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/services/timeline.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TimelineService",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/category/category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-card/timeline-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-categories/timeline-categories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineCategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-categories/timeline-category/timeline-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-event-detail-note/timeline-event-detail-note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineEventDetailNoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-event-details/timeline-event-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineEventDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-event-details/timeline-event-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-event-list/timeline-event-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineEventListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-event/timeline-event.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-person-details/timeline-person-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelinePersonDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-person-details/timeline-person-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-person-list/timeline-person-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelinePersonListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline-person/timeline-person.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelinePersonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline/timeline-display/timeline-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timeline/timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/45",
                "status": "low"
            },
            {
                "filePath": "src/app/timelines/timelines.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelinesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-brainstorm-dialog/add-brainstorm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddBrainstormDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-brainstorm-dialog/add-brainstorm-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuickBrainstormReturnData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-brainstorm-dialog/add-brainstorm-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-chart-dialog/add-chart-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddChartDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-chart-dialog/add-chart-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuickChartReturnData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-chart-dialog/add-chart-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-project-dialog/add-project-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProjectDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-timeline-dialog/add-timeline-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTimelineDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-timeline-dialog/add-timeline-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuickTimelineReturnData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-timeline-dialog/add-timeline-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/add-user-dialog/add-user-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddUserDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/confirm-removal/confirm-removal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmRemovalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/confirm-removal/confirm-removal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/editor/editor-select-chart/editor-select-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorSelectChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/editor/editor-select-event/editor-select-event.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorSelectEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/editor/editor-select-person/editor-select-person.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorSelectPersonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/editor/editor-select-source/editor-select-source.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorSelectSourceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/editor/editor-select-timeline/editor-select-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorSelectTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/editor/editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/49",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/message-dialog/message-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/message-dialog/message-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/sleep.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Sleep",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}